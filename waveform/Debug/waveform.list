
waveform.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c440  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000618  0800c5d0  0800c5d0  0001c5d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cbe8  0800cbe8  000202d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800cbe8  0800cbe8  0001cbe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cbf0  0800cbf0  000202d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cbf0  0800cbf0  0001cbf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cbf4  0800cbf4  0001cbf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d0  20000000  0800cbf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  200002d0  0800cec8  000202d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e8  0800cec8  000205e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c7f  00000000  00000000  00020300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000371c  00000000  00000000  00038f7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001648  00000000  00000000  0003c6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001528  00000000  00000000  0003dce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002437f  00000000  00000000  0003f210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a4af  00000000  00000000  0006358f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3923  00000000  00000000  0007da3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00151361  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007244  00000000  00000000  001513b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d0 	.word	0x200002d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c5b8 	.word	0x0800c5b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d4 	.word	0x200002d4
 80001cc:	0800c5b8 	.word	0x0800c5b8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <arm_linear_interp_q15>:
   */
  q15_t arm_linear_interp_q15(
  const q15_t * pYData,
  q31_t x,
  uint32_t nValues)
  {
 8001018:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800101c:	b093      	sub	sp, #76	; 0x4c
 800101e:	af00      	add	r7, sp, #0
 8001020:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001022:	62b9      	str	r1, [r7, #40]	; 0x28
 8001024:	627a      	str	r2, [r7, #36]	; 0x24
    int32_t index;                               /* Index to read nearest output values */

    /* Input is in 12.20 format */
    /* 12 bits for the table index */
    /* Index value calculation */
    index = ((x & (int32_t)0xFFF00000) >> 20);
 8001026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001028:	151b      	asrs	r3, r3, #20
 800102a:	647b      	str	r3, [r7, #68]	; 0x44

    if (index >= (int32_t)(nValues - 1))
 800102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102e:	3b01      	subs	r3, #1
 8001030:	461a      	mov	r2, r3
 8001032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001034:	4293      	cmp	r3, r2
 8001036:	db09      	blt.n	800104c <arm_linear_interp_q15+0x34>
    {
      return (pYData[nValues - 1]);
 8001038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800103e:	3b01      	subs	r3, #1
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001044:	4413      	add	r3, r2
 8001046:	f9b3 3000 	ldrsh.w	r3, [r3]
 800104a:	e067      	b.n	800111c <arm_linear_interp_q15+0x104>
    }
    else if (index < 0)
 800104c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800104e:	2b00      	cmp	r3, #0
 8001050:	da03      	bge.n	800105a <arm_linear_interp_q15+0x42>
    {
      return (pYData[0]);
 8001052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001054:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001058:	e060      	b.n	800111c <arm_linear_interp_q15+0x104>
    }
    else
    {
      /* 20 bits for the fractional part */
      /* fract is in 12.20 format */
      fract = (x & 0x000FFFFF);
 800105a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800105c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001060:	643b      	str	r3, [r7, #64]	; 0x40

      /* Read two nearest output values from the index */
      y0 = pYData[index];
 8001062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001064:	005a      	lsls	r2, r3, #1
 8001066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001068:	4413      	add	r3, r2
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	87fb      	strh	r3, [r7, #62]	; 0x3e
      y1 = pYData[index + 1];
 800106e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001070:	3301      	adds	r3, #1
 8001072:	005a      	lsls	r2, r3, #1
 8001074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001076:	4413      	add	r3, r2
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	87bb      	strh	r3, [r7, #60]	; 0x3c

      /* Calculation of y0 * (1-fract) and y is in 13.35 format */
      y = ((q63_t) y0 * (0xFFFFF - fract));
 800107c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8001080:	17da      	asrs	r2, r3, #31
 8001082:	469a      	mov	sl, r3
 8001084:	4693      	mov	fp, r2
 8001086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001088:	f5c3 237f 	rsb	r3, r3, #1044480	; 0xff000
 800108c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001090:	17da      	asrs	r2, r3, #31
 8001092:	61bb      	str	r3, [r7, #24]
 8001094:	61fa      	str	r2, [r7, #28]
 8001096:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800109a:	4603      	mov	r3, r0
 800109c:	fb03 f20b 	mul.w	r2, r3, fp
 80010a0:	460b      	mov	r3, r1
 80010a2:	fb0a f303 	mul.w	r3, sl, r3
 80010a6:	4413      	add	r3, r2
 80010a8:	4602      	mov	r2, r0
 80010aa:	fbaa 8902 	umull	r8, r9, sl, r2
 80010ae:	444b      	add	r3, r9
 80010b0:	4699      	mov	r9, r3
 80010b2:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
 80010b6:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30

      /* Calculation of (y0 * (1-fract) + y1 * fract) and y is in 13.35 format */
      y += ((q63_t) y1 * (fract));
 80010ba:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 80010be:	17da      	asrs	r2, r3, #31
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	617a      	str	r2, [r7, #20]
 80010c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010c6:	17da      	asrs	r2, r3, #31
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	60fa      	str	r2, [r7, #12]
 80010cc:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80010d0:	464b      	mov	r3, r9
 80010d2:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80010d6:	4652      	mov	r2, sl
 80010d8:	fb02 f203 	mul.w	r2, r2, r3
 80010dc:	465b      	mov	r3, fp
 80010de:	4641      	mov	r1, r8
 80010e0:	fb01 f303 	mul.w	r3, r1, r3
 80010e4:	4413      	add	r3, r2
 80010e6:	4642      	mov	r2, r8
 80010e8:	4651      	mov	r1, sl
 80010ea:	fba2 4501 	umull	r4, r5, r2, r1
 80010ee:	442b      	add	r3, r5
 80010f0:	461d      	mov	r5, r3
 80010f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80010f6:	1911      	adds	r1, r2, r4
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	416b      	adcs	r3, r5
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001102:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

      /* convert y to 1.15 format */
      return (q15_t) (y >> 20);
 8001106:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	f04f 0300 	mov.w	r3, #0
 8001112:	0d02      	lsrs	r2, r0, #20
 8001114:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8001118:	150b      	asrs	r3, r1, #20
 800111a:	b213      	sxth	r3, r2
    }
  }
 800111c:	4618      	mov	r0, r3
 800111e:	374c      	adds	r7, #76	; 0x4c
 8001120:	46bd      	mov	sp, r7
 8001122:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001126:	4770      	bx	lr

08001128 <cJSON_GetStringValue>:
{
    return (const char*) (global_error.json + global_error.position);
}

CJSON_PUBLIC(char *) cJSON_GetStringValue(const cJSON * const item)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
    if (!cJSON_IsString(item))
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f002 f8e2 	bl	80032fa <cJSON_IsString>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d101      	bne.n	8001140 <cJSON_GetStringValue+0x18>
    {
        return NULL;
 800113c:	2300      	movs	r3, #0
 800113e:	e001      	b.n	8001144 <cJSON_GetStringValue+0x1c>
    }

    return item->valuestring;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	691b      	ldr	r3, [r3, #16]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <cJSON_GetNumberValue>:

CJSON_PUBLIC(double) cJSON_GetNumberValue(const cJSON * const item)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
    if (!cJSON_IsNumber(item))
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f002 f8b9 	bl	80032cc <cJSON_IsNumber>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d103      	bne.n	8001168 <cJSON_GetNumberValue+0x1c>
    {
        return (double) NAN;
 8001160:	f04f 0200 	mov.w	r2, #0
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <cJSON_GetNumberValue+0x34>)
 8001166:	e002      	b.n	800116e <cJSON_GetNumberValue+0x22>
    }

    return item->valuedouble;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
}
 800116e:	ec43 2b17 	vmov	d7, r2, r3
 8001172:	eeb0 0a47 	vmov.f32	s0, s14
 8001176:	eef0 0a67 	vmov.f32	s1, s15
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	7ff80000 	.word	0x7ff80000

08001184 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d002      	beq.n	800119a <case_insensitive_strcmp+0x16>
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800119a:	2301      	movs	r3, #1
 800119c:	e056      	b.n	800124c <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d10d      	bne.n	80011c2 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	e050      	b.n	800124c <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <case_insensitive_strcmp+0x32>
        {
            return 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	e04a      	b.n	800124c <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3301      	adds	r3, #1
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	3301      	adds	r3, #1
 80011c0:	603b      	str	r3, [r7, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	73fb      	strb	r3, [r7, #15]
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	3301      	adds	r3, #1
 80011cc:	4a22      	ldr	r2, [pc, #136]	; (8001258 <case_insensitive_strcmp+0xd4>)
 80011ce:	4413      	add	r3, r2
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	f003 0303 	and.w	r3, r3, #3
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d103      	bne.n	80011e2 <case_insensitive_strcmp+0x5e>
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	f103 0220 	add.w	r2, r3, #32
 80011e0:	e000      	b.n	80011e4 <case_insensitive_strcmp+0x60>
 80011e2:	7bfa      	ldrb	r2, [r7, #15]
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	73bb      	strb	r3, [r7, #14]
 80011ea:	7bbb      	ldrb	r3, [r7, #14]
 80011ec:	3301      	adds	r3, #1
 80011ee:	491a      	ldr	r1, [pc, #104]	; (8001258 <case_insensitive_strcmp+0xd4>)
 80011f0:	440b      	add	r3, r1
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d102      	bne.n	8001202 <case_insensitive_strcmp+0x7e>
 80011fc:	7bbb      	ldrb	r3, [r7, #14]
 80011fe:	3320      	adds	r3, #32
 8001200:	e000      	b.n	8001204 <case_insensitive_strcmp+0x80>
 8001202:	7bbb      	ldrb	r3, [r7, #14]
 8001204:	429a      	cmp	r2, r3
 8001206:	d0d0      	beq.n	80011aa <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	737b      	strb	r3, [r7, #13]
 800120e:	7b7b      	ldrb	r3, [r7, #13]
 8001210:	3301      	adds	r3, #1
 8001212:	4a11      	ldr	r2, [pc, #68]	; (8001258 <case_insensitive_strcmp+0xd4>)
 8001214:	4413      	add	r3, r2
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	2b01      	cmp	r3, #1
 800121e:	d103      	bne.n	8001228 <case_insensitive_strcmp+0xa4>
 8001220:	7b7b      	ldrb	r3, [r7, #13]
 8001222:	f103 0220 	add.w	r2, r3, #32
 8001226:	e000      	b.n	800122a <case_insensitive_strcmp+0xa6>
 8001228:	7b7a      	ldrb	r2, [r7, #13]
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	733b      	strb	r3, [r7, #12]
 8001230:	7b3b      	ldrb	r3, [r7, #12]
 8001232:	3301      	adds	r3, #1
 8001234:	4908      	ldr	r1, [pc, #32]	; (8001258 <case_insensitive_strcmp+0xd4>)
 8001236:	440b      	add	r3, r1
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	2b01      	cmp	r3, #1
 8001240:	d102      	bne.n	8001248 <case_insensitive_strcmp+0xc4>
 8001242:	7b3b      	ldrb	r3, [r7, #12]
 8001244:	3320      	adds	r3, #32
 8001246:	e000      	b.n	800124a <case_insensitive_strcmp+0xc6>
 8001248:	7b3b      	ldrb	r3, [r7, #12]
 800124a:	1ad3      	subs	r3, r2, r3
}
 800124c:	4618      	mov	r0, r3
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	0800c79c 	.word	0x0800c79c

0800125c <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d101      	bne.n	8001278 <cJSON_strdup+0x1c>
    {
        return NULL;
 8001274:	2300      	movs	r3, #0
 8001276:	e015      	b.n	80012a4 <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7fe ffb3 	bl	80001e4 <strlen>
 800127e:	4603      	mov	r3, r0
 8001280:	3301      	adds	r3, #1
 8001282:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	68f8      	ldr	r0, [r7, #12]
 800128a:	4798      	blx	r3
 800128c:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d101      	bne.n	8001298 <cJSON_strdup+0x3c>
    {
        return NULL;
 8001294:	2300      	movs	r3, #0
 8001296:	e005      	b.n	80012a4 <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	68b8      	ldr	r0, [r7, #8]
 800129e:	f007 fc21 	bl	8008ae4 <memcpy>

    return copy;
 80012a2:	68bb      	ldr	r3, [r7, #8]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2028      	movs	r0, #40	; 0x28
 80012ba:	4798      	blx	r3
 80012bc:	60f8      	str	r0, [r7, #12]
    if (node)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d004      	beq.n	80012ce <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 80012c4:	2228      	movs	r2, #40	; 0x28
 80012c6:	2100      	movs	r1, #0
 80012c8:	68f8      	ldr	r0, [r7, #12]
 80012ca:	f007 fc19 	bl	8008b00 <memset>
    }

    return node;
 80012ce:	68fb      	ldr	r3, [r7, #12]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 80012e4:	e037      	b.n	8001356 <cJSON_Delete+0x7e>
    {
        next = item->next;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d108      	bne.n	800130a <cJSON_Delete+0x32>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d004      	beq.n	800130a <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ffe7 	bl	80012d8 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001312:	2b00      	cmp	r3, #0
 8001314:	d109      	bne.n	800132a <cJSON_Delete+0x52>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d005      	beq.n	800132a <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <cJSON_Delete+0x90>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	6912      	ldr	r2, [r2, #16]
 8001326:	4610      	mov	r0, r2
 8001328:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001332:	2b00      	cmp	r3, #0
 8001334:	d109      	bne.n	800134a <cJSON_Delete+0x72>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d005      	beq.n	800134a <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 800133e:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <cJSON_Delete+0x90>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6a12      	ldr	r2, [r2, #32]
 8001346:	4610      	mov	r0, r2
 8001348:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 800134a:	4b07      	ldr	r3, [pc, #28]	; (8001368 <cJSON_Delete+0x90>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	4798      	blx	r3
        item = next;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1c4      	bne.n	80012e6 <cJSON_Delete+0xe>
    }
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000000 	.word	0x20000000

0800136c <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8001370:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8001372:	4618      	mov	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	0000      	movs	r0, r0
	...

08001380 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b098      	sub	sp, #96	; 0x60
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
    double number = 0;
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	f04f 0300 	mov.w	r3, #0
 8001392:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 8001396:	2300      	movs	r3, #0
 8001398:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800139a:	f7ff ffe7 	bl	800136c <get_decimal_point>
 800139e:	4603      	mov	r3, r0
 80013a0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <parse_number+0x36>
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <parse_number+0x3a>
    {
        return false;
 80013b6:	2300      	movs	r3, #0
 80013b8:	e0c6      	b.n	8001548 <parse_number+0x1c8>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80013ba:	2300      	movs	r3, #0
 80013bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80013be:	e063      	b.n	8001488 <parse_number+0x108>
    {
        switch (buffer_at_offset(input_buffer)[i])
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	6899      	ldr	r1, [r3, #8]
 80013c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013ca:	440b      	add	r3, r1
 80013cc:	4413      	add	r3, r2
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b45      	cmp	r3, #69	; 0x45
 80013d2:	dc3d      	bgt.n	8001450 <parse_number+0xd0>
 80013d4:	2b2b      	cmp	r3, #43	; 0x2b
 80013d6:	db66      	blt.n	80014a6 <parse_number+0x126>
 80013d8:	3b2b      	subs	r3, #43	; 0x2b
 80013da:	2b1a      	cmp	r3, #26
 80013dc:	d863      	bhi.n	80014a6 <parse_number+0x126>
 80013de:	a201      	add	r2, pc, #4	; (adr r2, 80013e4 <parse_number+0x64>)
 80013e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e4:	08001455 	.word	0x08001455
 80013e8:	080014a7 	.word	0x080014a7
 80013ec:	08001455 	.word	0x08001455
 80013f0:	08001473 	.word	0x08001473
 80013f4:	080014a7 	.word	0x080014a7
 80013f8:	08001455 	.word	0x08001455
 80013fc:	08001455 	.word	0x08001455
 8001400:	08001455 	.word	0x08001455
 8001404:	08001455 	.word	0x08001455
 8001408:	08001455 	.word	0x08001455
 800140c:	08001455 	.word	0x08001455
 8001410:	08001455 	.word	0x08001455
 8001414:	08001455 	.word	0x08001455
 8001418:	08001455 	.word	0x08001455
 800141c:	08001455 	.word	0x08001455
 8001420:	080014a7 	.word	0x080014a7
 8001424:	080014a7 	.word	0x080014a7
 8001428:	080014a7 	.word	0x080014a7
 800142c:	080014a7 	.word	0x080014a7
 8001430:	080014a7 	.word	0x080014a7
 8001434:	080014a7 	.word	0x080014a7
 8001438:	080014a7 	.word	0x080014a7
 800143c:	080014a7 	.word	0x080014a7
 8001440:	080014a7 	.word	0x080014a7
 8001444:	080014a7 	.word	0x080014a7
 8001448:	080014a7 	.word	0x080014a7
 800144c:	08001455 	.word	0x08001455
 8001450:	2b65      	cmp	r3, #101	; 0x65
 8001452:	d128      	bne.n	80014a6 <parse_number+0x126>
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	6899      	ldr	r1, [r3, #8]
 800145c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800145e:	440b      	add	r3, r1
 8001460:	4413      	add	r3, r2
 8001462:	7819      	ldrb	r1, [r3, #0]
 8001464:	f107 0208 	add.w	r2, r7, #8
 8001468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800146a:	4413      	add	r3, r2
 800146c:	460a      	mov	r2, r1
 800146e:	701a      	strb	r2, [r3, #0]
                break;
 8001470:	e007      	b.n	8001482 <parse_number+0x102>

            case '.':
                number_c_string[i] = decimal_point;
 8001472:	f107 0208 	add.w	r2, r7, #8
 8001476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001478:	4413      	add	r3, r2
 800147a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800147e:	701a      	strb	r2, [r3, #0]
                break;
 8001480:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001484:	3301      	adds	r3, #1
 8001486:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001488:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800148a:	2b3e      	cmp	r3, #62	; 0x3e
 800148c:	d80d      	bhi.n	80014aa <parse_number+0x12a>
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00a      	beq.n	80014aa <parse_number+0x12a>
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800149a:	441a      	add	r2, r3
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d38d      	bcc.n	80013c0 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 80014a4:	e001      	b.n	80014aa <parse_number+0x12a>
                goto loop_end;
 80014a6:	bf00      	nop
 80014a8:	e000      	b.n	80014ac <parse_number+0x12c>
loop_end:
 80014aa:	bf00      	nop
    number_c_string[i] = '\0';
 80014ac:	f107 0208 	add.w	r2, r7, #8
 80014b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014b2:	4413      	add	r3, r2
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 80014b8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80014bc:	f107 0308 	add.w	r3, r7, #8
 80014c0:	4611      	mov	r1, r2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f008 fae6 	bl	8009a94 <strtod>
 80014c8:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 80014cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80014ce:	f107 0308 	add.w	r3, r7, #8
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d101      	bne.n	80014da <parse_number+0x15a>
    {
        return false; /* parse_error */
 80014d6:	2300      	movs	r3, #0
 80014d8:	e036      	b.n	8001548 <parse_number+0x1c8>
    }

    item->valuedouble = number;
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80014e0:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 80014e4:	a31b      	add	r3, pc, #108	; (adr r3, 8001554 <parse_number+0x1d4>)
 80014e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80014ee:	f7ff fb19 	bl	8000b24 <__aeabi_dcmpge>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d004      	beq.n	8001502 <parse_number+0x182>
    {
        item->valueint = INT_MAX;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80014fe:	615a      	str	r2, [r3, #20]
 8001500:	e015      	b.n	800152e <parse_number+0x1ae>
    }
    else if (number <= (double)INT_MIN)
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	4b12      	ldr	r3, [pc, #72]	; (8001550 <parse_number+0x1d0>)
 8001508:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800150c:	f7ff fb00 	bl	8000b10 <__aeabi_dcmple>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d004      	beq.n	8001520 <parse_number+0x1a0>
    {
        item->valueint = INT_MIN;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800151c:	615a      	str	r2, [r3, #20]
 800151e:	e006      	b.n	800152e <parse_number+0x1ae>
    }
    else
    {
        item->valueint = (int)number;
 8001520:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001524:	f7ff fb28 	bl	8000b78 <__aeabi_d2iz>
 8001528:	4602      	mov	r2, r0
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2208      	movs	r2, #8
 8001532:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800153a:	f107 0208 	add.w	r2, r7, #8
 800153e:	1a8a      	subs	r2, r1, r2
 8001540:	441a      	add	r2, r3
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	609a      	str	r2, [r3, #8]
    return true;
 8001546:	2301      	movs	r3, #1
}
 8001548:	4618      	mov	r0, r3
 800154a:	3760      	adds	r7, #96	; 0x60
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	c1e00000 	.word	0xc1e00000
 8001554:	ffc00000 	.word	0xffc00000
 8001558:	41dfffff 	.word	0x41dfffff

0800155c <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <ensure+0x20>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <ensure+0x24>
    {
        return NULL;
 800157c:	2300      	movs	r3, #0
 800157e:	e083      	b.n	8001688 <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d007      	beq.n	8001598 <ensure+0x3c>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	429a      	cmp	r2, r3
 8001592:	d301      	bcc.n	8001598 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8001594:	2300      	movs	r3, #0
 8001596:	e077      	b.n	8001688 <ensure+0x12c>
    }

    if (needed > INT_MAX)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	da01      	bge.n	80015a2 <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	e072      	b.n	8001688 <ensure+0x12c>
    }

    needed += p->offset + 1;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	4413      	add	r3, r2
 80015aa:	3301      	adds	r3, #1
 80015ac:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d805      	bhi.n	80015c4 <ensure+0x68>
    {
        return p->buffer + p->offset;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	4413      	add	r3, r2
 80015c2:	e061      	b.n	8001688 <ensure+0x12c>
    }

    if (p->noalloc) {
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <ensure+0x74>
        return NULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	e05b      	b.n	8001688 <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015d6:	d308      	bcc.n	80015ea <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	db03      	blt.n	80015e6 <ensure+0x8a>
        {
            newsize = INT_MAX;
 80015de:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	e004      	b.n	80015f0 <ensure+0x94>
        }
        else
        {
            return NULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	e04e      	b.n	8001688 <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a1b      	ldr	r3, [r3, #32]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d018      	beq.n	800162a <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	4610      	mov	r0, r2
 8001604:	4798      	blx	r3
 8001606:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d132      	bne.n	8001674 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	6812      	ldr	r2, [r2, #0]
 8001616:	4610      	mov	r0, r2
 8001618:	4798      	blx	r3
            p->length = 0;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]

            return NULL;
 8001626:	2300      	movs	r3, #0
 8001628:	e02e      	b.n	8001688 <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	68b8      	ldr	r0, [r7, #8]
 8001630:	4798      	blx	r3
 8001632:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10d      	bne.n	8001656 <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	6812      	ldr	r2, [r2, #0]
 8001642:	4610      	mov	r0, r2
 8001644:	4798      	blx	r3
            p->length = 0;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]

            return NULL;
 8001652:	2300      	movs	r3, #0
 8001654:	e018      	b.n	8001688 <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6819      	ldr	r1, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	3301      	adds	r3, #1
 8001660:	461a      	mov	r2, r3
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f007 fa3e 	bl	8008ae4 <memcpy>
        p->hooks.deallocate(p->buffer);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69db      	ldr	r3, [r3, #28]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	6812      	ldr	r2, [r2, #0]
 8001670:	4610      	mov	r0, r2
 8001672:	4798      	blx	r3
    }
    p->length = newsize;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	4413      	add	r3, r2
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 8001690:	b590      	push	{r4, r7, lr}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d013      	beq.n	80016ca <update_offset+0x3a>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d00f      	beq.n	80016ca <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	4413      	add	r3, r2
 80016b4:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689c      	ldr	r4, [r3, #8]
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f7fe fd92 	bl	80001e4 <strlen>
 80016c0:	4603      	mov	r3, r0
 80016c2:	18e2      	adds	r2, r4, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	e000      	b.n	80016cc <update_offset+0x3c>
        return;
 80016ca:	bf00      	nop
}
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd90      	pop	{r4, r7, pc}
	...

080016d4 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 80016d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016d8:	b087      	sub	sp, #28
 80016da:	af00      	add	r7, sp, #0
 80016dc:	ed87 0b02 	vstr	d0, [r7, #8]
 80016e0:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 80016e4:	68b8      	ldr	r0, [r7, #8]
 80016e6:	68fe      	ldr	r6, [r7, #12]
 80016e8:	f026 4100 	bic.w	r1, r6, #2147483648	; 0x80000000
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	687e      	ldr	r6, [r7, #4]
 80016f0:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80016f4:	f7ff fa20 	bl	8000b38 <__aeabi_dcmpgt>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d004      	beq.n	8001708 <compare_double+0x34>
 80016fe:	68bc      	ldr	r4, [r7, #8]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001706:	e003      	b.n	8001710 <compare_double+0x3c>
 8001708:	683c      	ldr	r4, [r7, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001710:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 8001714:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001718:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800171c:	f7fe fdc4 	bl	80002a8 <__aeabi_dsub>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4690      	mov	r8, r2
 8001726:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <compare_double+0x8c>)
 8001730:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001734:	f7fe ff70 	bl	8000618 <__aeabi_dmul>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	2101      	movs	r1, #1
 800173e:	460c      	mov	r4, r1
 8001740:	4640      	mov	r0, r8
 8001742:	4649      	mov	r1, r9
 8001744:	f7ff f9e4 	bl	8000b10 <__aeabi_dcmple>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <compare_double+0x7e>
 800174e:	2300      	movs	r3, #0
 8001750:	461c      	mov	r4, r3
 8001752:	b2e3      	uxtb	r3, r4
}
 8001754:	4618      	mov	r0, r3
 8001756:	371c      	adds	r7, #28
 8001758:	46bd      	mov	sp, r7
 800175a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800175e:	bf00      	nop
 8001760:	3cb00000 	.word	0x3cb00000

08001764 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 8001764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001766:	b093      	sub	sp, #76	; 0x4c
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800176e:	2300      	movs	r3, #0
 8001770:	63fb      	str	r3, [r7, #60]	; 0x3c
    double d = item->valuedouble;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001778:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int length = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
 8001788:	f107 0318 	add.w	r3, r7, #24
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
 8001798:	829a      	strh	r2, [r3, #20]
    unsigned char decimal_point = get_decimal_point();
 800179a:	f7ff fde7 	bl	800136c <get_decimal_point>
 800179e:	4603      	mov	r3, r0
 80017a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double test = 0.0;
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	f04f 0300 	mov.w	r3, #0
 80017ac:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <print_number+0x56>
    {
        return false;
 80017b6:	2300      	movs	r3, #0
 80017b8:	e0b4      	b.n	8001924 <print_number+0x1c0>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 80017ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80017be:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80017c2:	f7ff f9c3 	bl	8000b4c <__aeabi_dcmpun>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d121      	bne.n	8001810 <print_number+0xac>
 80017cc:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 80017ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017d0:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80017d4:	2301      	movs	r3, #1
 80017d6:	461e      	mov	r6, r3
 80017d8:	f04f 32ff 	mov.w	r2, #4294967295
 80017dc:	4b53      	ldr	r3, [pc, #332]	; (800192c <print_number+0x1c8>)
 80017de:	4620      	mov	r0, r4
 80017e0:	4629      	mov	r1, r5
 80017e2:	f7ff f9b3 	bl	8000b4c <__aeabi_dcmpun>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d10b      	bne.n	8001804 <print_number+0xa0>
 80017ec:	f04f 32ff 	mov.w	r2, #4294967295
 80017f0:	4b4e      	ldr	r3, [pc, #312]	; (800192c <print_number+0x1c8>)
 80017f2:	4620      	mov	r0, r4
 80017f4:	4629      	mov	r1, r5
 80017f6:	f7ff f98b 	bl	8000b10 <__aeabi_dcmple>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d101      	bne.n	8001804 <print_number+0xa0>
 8001800:	2300      	movs	r3, #0
 8001802:	461e      	mov	r6, r3
 8001804:	b2f3      	uxtb	r3, r6
 8001806:	f083 0301 	eor.w	r3, r3, #1
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b00      	cmp	r3, #0
 800180e:	d007      	beq.n	8001820 <print_number+0xbc>
    {
        length = sprintf((char*)number_buffer, "null");
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	4946      	ldr	r1, [pc, #280]	; (8001930 <print_number+0x1cc>)
 8001816:	4618      	mov	r0, r3
 8001818:	f007 fa72 	bl	8008d00 <siprintf>
 800181c:	6478      	str	r0, [r7, #68]	; 0x44
 800181e:	e03f      	b.n	80018a0 <print_number+0x13c>
    }
	else if(d == (double)item->valueint)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	695b      	ldr	r3, [r3, #20]
 8001824:	4618      	mov	r0, r3
 8001826:	f7fe fe8d 	bl	8000544 <__aeabi_i2d>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001832:	f7ff f959 	bl	8000ae8 <__aeabi_dcmpeq>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d009      	beq.n	8001850 <print_number+0xec>
	{
		length = sprintf((char*)number_buffer, "%d", item->valueint);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	695a      	ldr	r2, [r3, #20]
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	493b      	ldr	r1, [pc, #236]	; (8001934 <print_number+0x1d0>)
 8001846:	4618      	mov	r0, r3
 8001848:	f007 fa5a 	bl	8008d00 <siprintf>
 800184c:	6478      	str	r0, [r7, #68]	; 0x44
 800184e:	e027      	b.n	80018a0 <print_number+0x13c>
	}
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 8001850:	f107 0014 	add.w	r0, r7, #20
 8001854:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001858:	4937      	ldr	r1, [pc, #220]	; (8001938 <print_number+0x1d4>)
 800185a:	f007 fa51 	bl	8008d00 <siprintf>
 800185e:	6478      	str	r0, [r7, #68]	; 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 8001860:	f107 0208 	add.w	r2, r7, #8
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	4934      	ldr	r1, [pc, #208]	; (800193c <print_number+0x1d8>)
 800186a:	4618      	mov	r0, r3
 800186c:	f007 fa68 	bl	8008d40 <siscanf>
 8001870:	4603      	mov	r3, r0
 8001872:	2b01      	cmp	r3, #1
 8001874:	d10c      	bne.n	8001890 <print_number+0x12c>
 8001876:	ed97 7b02 	vldr	d7, [r7, #8]
 800187a:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 800187e:	eeb0 0a47 	vmov.f32	s0, s14
 8001882:	eef0 0a67 	vmov.f32	s1, s15
 8001886:	f7ff ff25 	bl	80016d4 <compare_double>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d107      	bne.n	80018a0 <print_number+0x13c>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 8001890:	f107 0014 	add.w	r0, r7, #20
 8001894:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001898:	4929      	ldr	r1, [pc, #164]	; (8001940 <print_number+0x1dc>)
 800189a:	f007 fa31 	bl	8008d00 <siprintf>
 800189e:	6478      	str	r0, [r7, #68]	; 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 80018a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	db02      	blt.n	80018ac <print_number+0x148>
 80018a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018a8:	2b19      	cmp	r3, #25
 80018aa:	dd01      	ble.n	80018b0 <print_number+0x14c>
    {
        return false;
 80018ac:	2300      	movs	r3, #0
 80018ae:	e039      	b.n	8001924 <print_number+0x1c0>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 80018b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018b2:	3301      	adds	r3, #1
 80018b4:	4619      	mov	r1, r3
 80018b6:	6838      	ldr	r0, [r7, #0]
 80018b8:	f7ff fe50 	bl	800155c <ensure>
 80018bc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (output_pointer == NULL)
 80018be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <print_number+0x164>
    {
        return false;
 80018c4:	2300      	movs	r3, #0
 80018c6:	e02d      	b.n	8001924 <print_number+0x1c0>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 80018c8:	2300      	movs	r3, #0
 80018ca:	643b      	str	r3, [r7, #64]	; 0x40
 80018cc:	e01a      	b.n	8001904 <print_number+0x1a0>
    {
        if (number_buffer[i] == decimal_point)
 80018ce:	f107 0214 	add.w	r2, r7, #20
 80018d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018d4:	4413      	add	r3, r2
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80018dc:	429a      	cmp	r2, r3
 80018de:	d105      	bne.n	80018ec <print_number+0x188>
        {
            output_pointer[i] = '.';
 80018e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80018e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018e4:	4413      	add	r3, r2
 80018e6:	222e      	movs	r2, #46	; 0x2e
 80018e8:	701a      	strb	r2, [r3, #0]
            continue;
 80018ea:	e008      	b.n	80018fe <print_number+0x19a>
        }

        output_pointer[i] = number_buffer[i];
 80018ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80018ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018f0:	4413      	add	r3, r2
 80018f2:	f107 0114 	add.w	r1, r7, #20
 80018f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80018f8:	440a      	add	r2, r1
 80018fa:	7812      	ldrb	r2, [r2, #0]
 80018fc:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 80018fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001900:	3301      	adds	r3, #1
 8001902:	643b      	str	r3, [r7, #64]	; 0x40
 8001904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001906:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001908:	429a      	cmp	r2, r3
 800190a:	d3e0      	bcc.n	80018ce <print_number+0x16a>
    }
    output_pointer[i] = '\0';
 800190c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800190e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001910:	4413      	add	r3, r2
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	689a      	ldr	r2, [r3, #8]
 800191a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800191c:	441a      	add	r2, r3
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	609a      	str	r2, [r3, #8]

    return true;
 8001922:	2301      	movs	r3, #1
}
 8001924:	4618      	mov	r0, r3
 8001926:	374c      	adds	r7, #76	; 0x4c
 8001928:	46bd      	mov	sp, r7
 800192a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800192c:	7fefffff 	.word	0x7fefffff
 8001930:	0800c5dc 	.word	0x0800c5dc
 8001934:	0800c5e4 	.word	0x0800c5e4
 8001938:	0800c5e8 	.word	0x0800c5e8
 800193c:	0800c5f0 	.word	0x0800c5f0
 8001940:	0800c5f4 	.word	0x0800c5f4

08001944 <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8001954:	2300      	movs	r3, #0
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	e04c      	b.n	80019f4 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	4413      	add	r3, r2
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b2f      	cmp	r3, #47	; 0x2f
 8001964:	d90f      	bls.n	8001986 <parse_hex4+0x42>
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	4413      	add	r3, r2
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b39      	cmp	r3, #57	; 0x39
 8001970:	d809      	bhi.n	8001986 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	4413      	add	r3, r2
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	461a      	mov	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4413      	add	r3, r2
 8001980:	3b30      	subs	r3, #48	; 0x30
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	e02d      	b.n	80019e2 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	4413      	add	r3, r2
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b40      	cmp	r3, #64	; 0x40
 8001990:	d90f      	bls.n	80019b2 <parse_hex4+0x6e>
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	4413      	add	r3, r2
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b46      	cmp	r3, #70	; 0x46
 800199c:	d809      	bhi.n	80019b2 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	4413      	add	r3, r2
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4413      	add	r3, r2
 80019ac:	3b37      	subs	r3, #55	; 0x37
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	e017      	b.n	80019e2 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	4413      	add	r3, r2
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b60      	cmp	r3, #96	; 0x60
 80019bc:	d90f      	bls.n	80019de <parse_hex4+0x9a>
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	4413      	add	r3, r2
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b66      	cmp	r3, #102	; 0x66
 80019c8:	d809      	bhi.n	80019de <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	4413      	add	r3, r2
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	461a      	mov	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4413      	add	r3, r2
 80019d8:	3b57      	subs	r3, #87	; 0x57
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	e001      	b.n	80019e2 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	e00c      	b.n	80019fc <parse_hex4+0xb8>
        }

        if (i < 3)
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d802      	bhi.n	80019ee <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	011b      	lsls	r3, r3, #4
 80019ec:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	3301      	adds	r3, #1
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	d9af      	bls.n	800195a <parse_hex4+0x16>
        }
    }

    return h;
 80019fa:	68fb      	ldr	r3, [r7, #12]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08a      	sub	sp, #40	; 0x28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b05      	cmp	r3, #5
 8001a40:	f340 80b7 	ble.w	8001bb2 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	3302      	adds	r3, #2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff7b 	bl	8001944 <parse_hex4>
 8001a4e:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001a56:	d304      	bcc.n	8001a62 <utf16_literal_to_utf8+0x5a>
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001a5e:	f0c0 80aa 	bcc.w	8001bb6 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8001a68:	d337      	bcc.n	8001ada <utf16_literal_to_utf8+0xd2>
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001a70:	d233      	bcs.n	8001ada <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	3306      	adds	r3, #6
 8001a76:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8001a7c:	230c      	movs	r3, #12
 8001a7e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b05      	cmp	r3, #5
 8001a8a:	f340 8096 	ble.w	8001bba <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b5c      	cmp	r3, #92	; 0x5c
 8001a94:	f040 8093 	bne.w	8001bbe <utf16_literal_to_utf8+0x1b6>
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b75      	cmp	r3, #117	; 0x75
 8001aa0:	f040 808d 	bne.w	8001bbe <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	3302      	adds	r3, #2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff4b 	bl	8001944 <parse_hex4>
 8001aae:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001ab6:	f0c0 8084 	bcc.w	8001bc2 <utf16_literal_to_utf8+0x1ba>
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001ac0:	d27f      	bcs.n	8001bc2 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	029a      	lsls	r2, r3, #10
 8001ac6:	4b43      	ldr	r3, [pc, #268]	; (8001bd4 <utf16_literal_to_utf8+0x1cc>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
    {
 8001ad8:	e004      	b.n	8001ae4 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 8001ada:	2306      	movs	r3, #6
 8001adc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	2b7f      	cmp	r3, #127	; 0x7f
 8001ae8:	d803      	bhi.n	8001af2 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 8001aea:	2301      	movs	r3, #1
 8001aec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001af0:	e01f      	b.n	8001b32 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001af8:	d206      	bcs.n	8001b08 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 8001afa:	2302      	movs	r3, #2
 8001afc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8001b00:	23c0      	movs	r3, #192	; 0xc0
 8001b02:	f887 3020 	strb.w	r3, [r7, #32]
 8001b06:	e014      	b.n	8001b32 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b0e:	d206      	bcs.n	8001b1e <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8001b10:	2303      	movs	r3, #3
 8001b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 8001b16:	23e0      	movs	r3, #224	; 0xe0
 8001b18:	f887 3020 	strb.w	r3, [r7, #32]
 8001b1c:	e009      	b.n	8001b32 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001b24:	d24f      	bcs.n	8001bc6 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 8001b26:	2304      	movs	r3, #4
 8001b28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8001b2c:	23f0      	movs	r3, #240	; 0xf0
 8001b2e:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001b32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b36:	3b01      	subs	r3, #1
 8001b38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001b3c:	e015      	b.n	8001b6a <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6819      	ldr	r1, [r3, #0]
 8001b4c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001b50:	440b      	add	r3, r1
 8001b52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	099b      	lsrs	r3, r3, #6
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001b60:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001b64:	3b01      	subs	r3, #1
 8001b66:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001b6a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1e5      	bne.n	8001b3e <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8001b72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d909      	bls.n	8001b8e <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	b2d9      	uxtb	r1, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	701a      	strb	r2, [r3, #0]
 8001b8c:	e007      	b.n	8001b9e <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ba6:	441a      	add	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8001bac:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001bb0:	e00b      	b.n	8001bca <utf16_literal_to_utf8+0x1c2>
        goto fail;
 8001bb2:	bf00      	nop
 8001bb4:	e008      	b.n	8001bc8 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001bb6:	bf00      	nop
 8001bb8:	e006      	b.n	8001bc8 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001bba:	bf00      	nop
 8001bbc:	e004      	b.n	8001bc8 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001bbe:	bf00      	nop
 8001bc0:	e002      	b.n	8001bc8 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001bc2:	bf00      	nop
 8001bc4:	e000      	b.n	8001bc8 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001bc6:	bf00      	nop

fail:
    return 0;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3728      	adds	r7, #40	; 0x28
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	000ffc00 	.word	0x000ffc00

08001bd8 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	; 0x28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	3301      	adds	r3, #1
 8001bec:	4413      	add	r3, r2
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	4413      	add	r3, r2
 8001bfc:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	4413      	add	r3, r2
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b22      	cmp	r3, #34	; 0x22
 8001c14:	f040 8102 	bne.w	8001e1c <parse_string+0x244>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001c20:	e017      	b.n	8001c52 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8001c22:	6a3b      	ldr	r3, [r7, #32]
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b5c      	cmp	r3, #92	; 0x5c
 8001c28:	d110      	bne.n	8001c4c <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	1c5a      	adds	r2, r3, #1
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	461a      	mov	r2, r3
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	f080 80f0 	bcs.w	8001e20 <parse_string+0x248>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	3301      	adds	r3, #1
 8001c44:	61bb      	str	r3, [r7, #24]
                input_end++;
 8001c46:	6a3b      	ldr	r3, [r7, #32]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8001c4c:	6a3b      	ldr	r3, [r7, #32]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6a3a      	ldr	r2, [r7, #32]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d203      	bcs.n	8001c6c <parse_string+0x94>
 8001c64:	6a3b      	ldr	r3, [r7, #32]
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b22      	cmp	r3, #34	; 0x22
 8001c6a:	d1da      	bne.n	8001c22 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6a3a      	ldr	r2, [r7, #32]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	461a      	mov	r2, r3
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	f080 80d2 	bcs.w	8001e24 <parse_string+0x24c>
 8001c80:	6a3b      	ldr	r3, [r7, #32]
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b22      	cmp	r3, #34	; 0x22
 8001c86:	f040 80cd 	bne.w	8001e24 <parse_string+0x24c>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	4413      	add	r3, r2
 8001c94:	6a3a      	ldr	r2, [r7, #32]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	461a      	mov	r2, r3
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	3201      	adds	r2, #1
 8001ca8:	4610      	mov	r0, r2
 8001caa:	4798      	blx	r3
 8001cac:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f000 80b9 	beq.w	8001e28 <parse_string+0x250>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8001cba:	e093      	b.n	8001de4 <parse_string+0x20c>
    {
        if (*input_pointer != '\\')
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b5c      	cmp	r3, #92	; 0x5c
 8001cc2:	d008      	beq.n	8001cd6 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8001cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc6:	1c53      	adds	r3, r2, #1
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	1c59      	adds	r1, r3, #1
 8001cce:	60f9      	str	r1, [r7, #12]
 8001cd0:	7812      	ldrb	r2, [r2, #0]
 8001cd2:	701a      	strb	r2, [r3, #0]
 8001cd4:	e086      	b.n	8001de4 <parse_string+0x20c>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8001cda:	6a3a      	ldr	r2, [r7, #32]
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f340 80a3 	ble.w	8001e2c <parse_string+0x254>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	3301      	adds	r3, #1
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b75      	cmp	r3, #117	; 0x75
 8001cee:	f300 809f 	bgt.w	8001e30 <parse_string+0x258>
 8001cf2:	2b5c      	cmp	r3, #92	; 0x5c
 8001cf4:	da04      	bge.n	8001d00 <parse_string+0x128>
 8001cf6:	2b22      	cmp	r3, #34	; 0x22
 8001cf8:	d05c      	beq.n	8001db4 <parse_string+0x1dc>
 8001cfa:	2b2f      	cmp	r3, #47	; 0x2f
 8001cfc:	d05a      	beq.n	8001db4 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8001cfe:	e097      	b.n	8001e30 <parse_string+0x258>
            switch (input_pointer[1])
 8001d00:	3b5c      	subs	r3, #92	; 0x5c
 8001d02:	2b19      	cmp	r3, #25
 8001d04:	f200 8094 	bhi.w	8001e30 <parse_string+0x258>
 8001d08:	a201      	add	r2, pc, #4	; (adr r2, 8001d10 <parse_string+0x138>)
 8001d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d0e:	bf00      	nop
 8001d10:	08001db5 	.word	0x08001db5
 8001d14:	08001e31 	.word	0x08001e31
 8001d18:	08001e31 	.word	0x08001e31
 8001d1c:	08001e31 	.word	0x08001e31
 8001d20:	08001e31 	.word	0x08001e31
 8001d24:	08001e31 	.word	0x08001e31
 8001d28:	08001d79 	.word	0x08001d79
 8001d2c:	08001e31 	.word	0x08001e31
 8001d30:	08001e31 	.word	0x08001e31
 8001d34:	08001e31 	.word	0x08001e31
 8001d38:	08001d85 	.word	0x08001d85
 8001d3c:	08001e31 	.word	0x08001e31
 8001d40:	08001e31 	.word	0x08001e31
 8001d44:	08001e31 	.word	0x08001e31
 8001d48:	08001e31 	.word	0x08001e31
 8001d4c:	08001e31 	.word	0x08001e31
 8001d50:	08001e31 	.word	0x08001e31
 8001d54:	08001e31 	.word	0x08001e31
 8001d58:	08001d91 	.word	0x08001d91
 8001d5c:	08001e31 	.word	0x08001e31
 8001d60:	08001e31 	.word	0x08001e31
 8001d64:	08001e31 	.word	0x08001e31
 8001d68:	08001d9d 	.word	0x08001d9d
 8001d6c:	08001e31 	.word	0x08001e31
 8001d70:	08001da9 	.word	0x08001da9
 8001d74:	08001dc3 	.word	0x08001dc3
                    *output_pointer++ = '\b';
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	1c5a      	adds	r2, r3, #1
 8001d7c:	60fa      	str	r2, [r7, #12]
 8001d7e:	2208      	movs	r2, #8
 8001d80:	701a      	strb	r2, [r3, #0]
                    break;
 8001d82:	e02b      	b.n	8001ddc <parse_string+0x204>
                    *output_pointer++ = '\f';
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	1c5a      	adds	r2, r3, #1
 8001d88:	60fa      	str	r2, [r7, #12]
 8001d8a:	220c      	movs	r2, #12
 8001d8c:	701a      	strb	r2, [r3, #0]
                    break;
 8001d8e:	e025      	b.n	8001ddc <parse_string+0x204>
                    *output_pointer++ = '\n';
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	1c5a      	adds	r2, r3, #1
 8001d94:	60fa      	str	r2, [r7, #12]
 8001d96:	220a      	movs	r2, #10
 8001d98:	701a      	strb	r2, [r3, #0]
                    break;
 8001d9a:	e01f      	b.n	8001ddc <parse_string+0x204>
                    *output_pointer++ = '\r';
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	1c5a      	adds	r2, r3, #1
 8001da0:	60fa      	str	r2, [r7, #12]
 8001da2:	220d      	movs	r2, #13
 8001da4:	701a      	strb	r2, [r3, #0]
                    break;
 8001da6:	e019      	b.n	8001ddc <parse_string+0x204>
                    *output_pointer++ = '\t';
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	1c5a      	adds	r2, r3, #1
 8001dac:	60fa      	str	r2, [r7, #12]
 8001dae:	2209      	movs	r2, #9
 8001db0:	701a      	strb	r2, [r3, #0]
                    break;
 8001db2:	e013      	b.n	8001ddc <parse_string+0x204>
                    *output_pointer++ = input_pointer[1];
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	60fa      	str	r2, [r7, #12]
 8001dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dbc:	7852      	ldrb	r2, [r2, #1]
 8001dbe:	701a      	strb	r2, [r3, #0]
                    break;
 8001dc0:	e00c      	b.n	8001ddc <parse_string+0x204>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001dc2:	f107 030c 	add.w	r3, r7, #12
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	6a39      	ldr	r1, [r7, #32]
 8001dca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001dcc:	f7ff fe1c 	bl	8001a08 <utf16_literal_to_utf8>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8001dd4:	7dfb      	ldrb	r3, [r7, #23]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d02c      	beq.n	8001e34 <parse_string+0x25c>
                    break;
 8001dda:	bf00      	nop
            }
            input_pointer += sequence_length;
 8001ddc:	7dfb      	ldrb	r3, [r7, #23]
 8001dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de0:	4413      	add	r3, r2
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 8001de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de6:	6a3b      	ldr	r3, [r7, #32]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	f4ff af67 	bcc.w	8001cbc <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2210      	movs	r2, #16
 8001df8:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69fa      	ldr	r2, [r7, #28]
 8001dfe:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6a3a      	ldr	r2, [r7, #32]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	461a      	mov	r2, r3
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	609a      	str	r2, [r3, #8]

    return true;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e01e      	b.n	8001e5a <parse_string+0x282>
        goto fail;
 8001e1c:	bf00      	nop
 8001e1e:	e00a      	b.n	8001e36 <parse_string+0x25e>
                    goto fail;
 8001e20:	bf00      	nop
 8001e22:	e008      	b.n	8001e36 <parse_string+0x25e>
            goto fail; /* string ended unexpectedly */
 8001e24:	bf00      	nop
 8001e26:	e006      	b.n	8001e36 <parse_string+0x25e>
            goto fail; /* allocation failure */
 8001e28:	bf00      	nop
 8001e2a:	e004      	b.n	8001e36 <parse_string+0x25e>
                goto fail;
 8001e2c:	bf00      	nop
 8001e2e:	e002      	b.n	8001e36 <parse_string+0x25e>
                    goto fail;
 8001e30:	bf00      	nop
 8001e32:	e000      	b.n	8001e36 <parse_string+0x25e>
                        goto fail;
 8001e34:	bf00      	nop

fail:
    if (output != NULL)
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <parse_string+0x26c>
    {
        input_buffer->hooks.deallocate(output);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	69f8      	ldr	r0, [r7, #28]
 8001e42:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d006      	beq.n	8001e58 <parse_string+0x280>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	461a      	mov	r2, r3
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3728      	adds	r7, #40	; 0x28
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop

08001e64 <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b088      	sub	sp, #32
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <print_string_ptr+0x28>
    {
        return false;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	e110      	b.n	80020ae <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d111      	bne.n	8001eb6 <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 8001e92:	2103      	movs	r1, #3
 8001e94:	6838      	ldr	r0, [r7, #0]
 8001e96:	f7ff fb61 	bl	800155c <ensure>
 8001e9a:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <print_string_ptr+0x42>
        {
            return false;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	e103      	b.n	80020ae <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	4a83      	ldr	r2, [pc, #524]	; (80020b8 <print_string_ptr+0x254>)
 8001eaa:	8811      	ldrh	r1, [r2, #0]
 8001eac:	7892      	ldrb	r2, [r2, #2]
 8001eae:	8019      	strh	r1, [r3, #0]
 8001eb0:	709a      	strb	r2, [r3, #2]

        return true;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e0fb      	b.n	80020ae <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	61fb      	str	r3, [r7, #28]
 8001eba:	e023      	b.n	8001f04 <print_string_ptr+0xa0>
    {
        switch (*input_pointer)
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b22      	cmp	r3, #34	; 0x22
 8001ec2:	dc0e      	bgt.n	8001ee2 <print_string_ptr+0x7e>
 8001ec4:	2b08      	cmp	r3, #8
 8001ec6:	db12      	blt.n	8001eee <print_string_ptr+0x8a>
 8001ec8:	3b08      	subs	r3, #8
 8001eca:	2201      	movs	r2, #1
 8001ecc:	409a      	lsls	r2, r3
 8001ece:	4b7b      	ldr	r3, [pc, #492]	; (80020bc <print_string_ptr+0x258>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	bf14      	ite	ne
 8001ed6:	2301      	movne	r3, #1
 8001ed8:	2300      	moveq	r3, #0
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d102      	bne.n	8001ee6 <print_string_ptr+0x82>
 8001ee0:	e005      	b.n	8001eee <print_string_ptr+0x8a>
 8001ee2:	2b5c      	cmp	r3, #92	; 0x5c
 8001ee4:	d103      	bne.n	8001eee <print_string_ptr+0x8a>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	617b      	str	r3, [r7, #20]
                break;
 8001eec:	e007      	b.n	8001efe <print_string_ptr+0x9a>
            default:
                if (*input_pointer < 32)
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b1f      	cmp	r3, #31
 8001ef4:	d802      	bhi.n	8001efc <print_string_ptr+0x98>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	3305      	adds	r3, #5
 8001efa:	617b      	str	r3, [r7, #20]
                }
                break;
 8001efc:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3301      	adds	r3, #1
 8001f02:	61fb      	str	r3, [r7, #28]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1d7      	bne.n	8001ebc <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8001f0c:	69fa      	ldr	r2, [r7, #28]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	461a      	mov	r2, r3
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	4413      	add	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	3303      	adds	r3, #3
 8001f1e:	4619      	mov	r1, r3
 8001f20:	6838      	ldr	r0, [r7, #0]
 8001f22:	f7ff fb1b 	bl	800155c <ensure>
 8001f26:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <print_string_ptr+0xce>
    {
        return false;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	e0bd      	b.n	80020ae <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d117      	bne.n	8001f68 <print_string_ptr+0x104>
    {
        output[0] = '\"';
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	2222      	movs	r2, #34	; 0x22
 8001f3c:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	3301      	adds	r3, #1
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f006 fdcc 	bl	8008ae4 <memcpy>
        output[output_length + 1] = '\"';
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	4413      	add	r3, r2
 8001f54:	2222      	movs	r2, #34	; 0x22
 8001f56:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	4413      	add	r3, r2
 8001f60:	2200      	movs	r2, #0
 8001f62:	701a      	strb	r2, [r3, #0]

        return true;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e0a2      	b.n	80020ae <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	2222      	movs	r2, #34	; 0x22
 8001f6c:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	3301      	adds	r3, #1
 8001f72:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	61fb      	str	r3, [r7, #28]
 8001f78:	e087      	b.n	800208a <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b1f      	cmp	r3, #31
 8001f80:	d90c      	bls.n	8001f9c <print_string_ptr+0x138>
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b22      	cmp	r3, #34	; 0x22
 8001f88:	d008      	beq.n	8001f9c <print_string_ptr+0x138>
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b5c      	cmp	r3, #92	; 0x5c
 8001f90:	d004      	beq.n	8001f9c <print_string_ptr+0x138>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	781a      	ldrb	r2, [r3, #0]
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	701a      	strb	r2, [r3, #0]
 8001f9a:	e070      	b.n	800207e <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	1c5a      	adds	r2, r3, #1
 8001fa0:	61ba      	str	r2, [r7, #24]
 8001fa2:	225c      	movs	r2, #92	; 0x5c
 8001fa4:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b22      	cmp	r3, #34	; 0x22
 8001fac:	dc3e      	bgt.n	800202c <print_string_ptr+0x1c8>
 8001fae:	2b08      	cmp	r3, #8
 8001fb0:	db5a      	blt.n	8002068 <print_string_ptr+0x204>
 8001fb2:	3b08      	subs	r3, #8
 8001fb4:	2b1a      	cmp	r3, #26
 8001fb6:	d857      	bhi.n	8002068 <print_string_ptr+0x204>
 8001fb8:	a201      	add	r2, pc, #4	; (adr r2, 8001fc0 <print_string_ptr+0x15c>)
 8001fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fbe:	bf00      	nop
 8001fc0:	08002041 	.word	0x08002041
 8001fc4:	08002061 	.word	0x08002061
 8001fc8:	08002051 	.word	0x08002051
 8001fcc:	08002069 	.word	0x08002069
 8001fd0:	08002049 	.word	0x08002049
 8001fd4:	08002059 	.word	0x08002059
 8001fd8:	08002069 	.word	0x08002069
 8001fdc:	08002069 	.word	0x08002069
 8001fe0:	08002069 	.word	0x08002069
 8001fe4:	08002069 	.word	0x08002069
 8001fe8:	08002069 	.word	0x08002069
 8001fec:	08002069 	.word	0x08002069
 8001ff0:	08002069 	.word	0x08002069
 8001ff4:	08002069 	.word	0x08002069
 8001ff8:	08002069 	.word	0x08002069
 8001ffc:	08002069 	.word	0x08002069
 8002000:	08002069 	.word	0x08002069
 8002004:	08002069 	.word	0x08002069
 8002008:	08002069 	.word	0x08002069
 800200c:	08002069 	.word	0x08002069
 8002010:	08002069 	.word	0x08002069
 8002014:	08002069 	.word	0x08002069
 8002018:	08002069 	.word	0x08002069
 800201c:	08002069 	.word	0x08002069
 8002020:	08002069 	.word	0x08002069
 8002024:	08002069 	.word	0x08002069
 8002028:	08002039 	.word	0x08002039
 800202c:	2b5c      	cmp	r3, #92	; 0x5c
 800202e:	d11b      	bne.n	8002068 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	225c      	movs	r2, #92	; 0x5c
 8002034:	701a      	strb	r2, [r3, #0]
                    break;
 8002036:	e022      	b.n	800207e <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	2222      	movs	r2, #34	; 0x22
 800203c:	701a      	strb	r2, [r3, #0]
                    break;
 800203e:	e01e      	b.n	800207e <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	2262      	movs	r2, #98	; 0x62
 8002044:	701a      	strb	r2, [r3, #0]
                    break;
 8002046:	e01a      	b.n	800207e <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	2266      	movs	r2, #102	; 0x66
 800204c:	701a      	strb	r2, [r3, #0]
                    break;
 800204e:	e016      	b.n	800207e <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	226e      	movs	r2, #110	; 0x6e
 8002054:	701a      	strb	r2, [r3, #0]
                    break;
 8002056:	e012      	b.n	800207e <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	2272      	movs	r2, #114	; 0x72
 800205c:	701a      	strb	r2, [r3, #0]
                    break;
 800205e:	e00e      	b.n	800207e <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	2274      	movs	r2, #116	; 0x74
 8002064:	701a      	strb	r2, [r3, #0]
                    break;
 8002066:	e00a      	b.n	800207e <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	461a      	mov	r2, r3
 800206e:	4914      	ldr	r1, [pc, #80]	; (80020c0 <print_string_ptr+0x25c>)
 8002070:	69b8      	ldr	r0, [r7, #24]
 8002072:	f006 fe45 	bl	8008d00 <siprintf>
                    output_pointer += 4;
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	3304      	adds	r3, #4
 800207a:	61bb      	str	r3, [r7, #24]
                    break;
 800207c:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3301      	adds	r3, #1
 8002082:	61fb      	str	r3, [r7, #28]
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	3301      	adds	r3, #1
 8002088:	61bb      	str	r3, [r7, #24]
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	f47f af73 	bne.w	8001f7a <print_string_ptr+0x116>
            }
        }
    }
    output[output_length + 1] = '\"';
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	3301      	adds	r3, #1
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	4413      	add	r3, r2
 800209c:	2222      	movs	r2, #34	; 0x22
 800209e:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	3302      	adds	r3, #2
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4413      	add	r3, r2
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]

    return true;
 80020ac:	2301      	movs	r3, #1
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3720      	adds	r7, #32
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	0800c5fc 	.word	0x0800c5fc
 80020bc:	04000037 	.word	0x04000037
 80020c0:	0800c600 	.word	0x0800c600

080020c4 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	6839      	ldr	r1, [r7, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fec5 	bl	8001e64 <print_string_ptr>
 80020da:	4603      	mov	r3, r0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <buffer_skip_whitespace+0x16>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	e02c      	b.n	8002158 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d005      	beq.n	8002110 <buffer_skip_whitespace+0x2c>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	429a      	cmp	r2, r3
 800210e:	d306      	bcc.n	800211e <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	e021      	b.n	8002158 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00d      	beq.n	8002140 <buffer_skip_whitespace+0x5c>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	429a      	cmp	r2, r3
 800212e:	d207      	bcs.n	8002140 <buffer_skip_whitespace+0x5c>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	4413      	add	r3, r2
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b20      	cmp	r3, #32
 800213e:	d9e9      	bls.n	8002114 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	429a      	cmp	r2, r3
 800214a:	d104      	bne.n	8002156 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	1e5a      	subs	r2, r3, #1
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8002156:	687b      	ldr	r3, [r7, #4]
}
 8002158:	4618      	mov	r0, r3
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d007      	beq.n	8002182 <skip_utf8_bom+0x1e>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <skip_utf8_bom+0x1e>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <skip_utf8_bom+0x22>
    {
        return NULL;
 8002182:	2300      	movs	r3, #0
 8002184:	e01c      	b.n	80021c0 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d018      	beq.n	80021be <skip_utf8_bom+0x5a>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	1d1a      	adds	r2, r3, #4
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	429a      	cmp	r2, r3
 8002198:	d211      	bcs.n	80021be <skip_utf8_bom+0x5a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	4413      	add	r3, r2
 80021a4:	2203      	movs	r2, #3
 80021a6:	4908      	ldr	r1, [pc, #32]	; (80021c8 <skip_utf8_bom+0x64>)
 80021a8:	4618      	mov	r0, r3
 80021aa:	f006 fe3a 	bl	8008e22 <strncmp>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d104      	bne.n	80021be <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	1cda      	adds	r2, r3, #3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80021be:	687b      	ldr	r3, [r7, #4]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	0800c608 	.word	0x0800c608

080021cc <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	e00c      	b.n	80021fc <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f7fd fffe 	bl	80001e4 <strlen>
 80021e8:	4603      	mov	r3, r0
 80021ea:	3301      	adds	r3, #1
 80021ec:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	6979      	ldr	r1, [r7, #20]
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f000 f805 	bl	8002204 <cJSON_ParseWithLengthOpts>
 80021fa:	4603      	mov	r3, r0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08e      	sub	sp, #56	; 0x38
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
 8002210:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8002212:	f107 0318 	add.w	r3, r7, #24
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	605a      	str	r2, [r3, #4]
 800221c:	609a      	str	r2, [r3, #8]
 800221e:	60da      	str	r2, [r3, #12]
 8002220:	611a      	str	r2, [r3, #16]
 8002222:	615a      	str	r2, [r3, #20]
 8002224:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8002226:	2300      	movs	r3, #0
 8002228:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 800222a:	4b41      	ldr	r3, [pc, #260]	; (8002330 <cJSON_ParseWithLengthOpts+0x12c>)
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8002230:	4b3f      	ldr	r3, [pc, #252]	; (8002330 <cJSON_ParseWithLengthOpts+0x12c>)
 8002232:	2200      	movs	r2, #0
 8002234:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d042      	beq.n	80022c2 <cJSON_ParseWithLengthOpts+0xbe>
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d03f      	beq.n	80022c2 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 800224e:	4a39      	ldr	r2, [pc, #228]	; (8002334 <cJSON_ParseWithLengthOpts+0x130>)
 8002250:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002254:	ca07      	ldmia	r2, {r0, r1, r2}
 8002256:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 800225a:	4836      	ldr	r0, [pc, #216]	; (8002334 <cJSON_ParseWithLengthOpts+0x130>)
 800225c:	f7ff f826 	bl	80012ac <cJSON_New_Item>
 8002260:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 8002262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002264:	2b00      	cmp	r3, #0
 8002266:	d02e      	beq.n	80022c6 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8002268:	f107 0318 	add.w	r3, r7, #24
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff ff79 	bl	8002164 <skip_utf8_bom>
 8002272:	4603      	mov	r3, r0
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff35 	bl	80020e4 <buffer_skip_whitespace>
 800227a:	4603      	mov	r3, r0
 800227c:	4619      	mov	r1, r3
 800227e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002280:	f000 f8fc 	bl	800247c <parse_value>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d01f      	beq.n	80022ca <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00e      	beq.n	80022ae <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8002290:	f107 0318 	add.w	r3, r7, #24
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff ff25 	bl	80020e4 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800229a:	6a3a      	ldr	r2, [r7, #32]
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d215      	bcs.n	80022ce <cJSON_ParseWithLengthOpts+0xca>
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	6a3b      	ldr	r3, [r7, #32]
 80022a6:	4413      	add	r3, r2
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10f      	bne.n	80022ce <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d004      	beq.n	80022be <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	441a      	add	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	601a      	str	r2, [r3, #0]
    }

    return item;
 80022be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022c0:	e031      	b.n	8002326 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 80022c2:	bf00      	nop
 80022c4:	e004      	b.n	80022d0 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 80022c6:	bf00      	nop
 80022c8:	e002      	b.n	80022d0 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 80022ca:	bf00      	nop
 80022cc:	e000      	b.n	80022d0 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 80022ce:	bf00      	nop

fail:
    if (item != NULL)
 80022d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d002      	beq.n	80022dc <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 80022d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80022d8:	f7fe fffe 	bl	80012d8 <cJSON_Delete>
    }

    if (value != NULL)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d020      	beq.n	8002324 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 80022ea:	6a3a      	ldr	r2, [r7, #32]
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d202      	bcs.n	80022f8 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	e005      	b.n	8002304 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3b01      	subs	r3, #1
 8002302:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d004      	beq.n	8002314 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	441a      	add	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8002314:	4b06      	ldr	r3, [pc, #24]	; (8002330 <cJSON_ParseWithLengthOpts+0x12c>)
 8002316:	461a      	mov	r2, r3
 8002318:	f107 0310 	add.w	r3, r7, #16
 800231c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002320:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3738      	adds	r7, #56	; 0x38
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	200002ec 	.word	0x200002ec
 8002334:	20000000 	.word	0x20000000

08002338 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8002340:	2200      	movs	r2, #0
 8002342:	2100      	movs	r1, #0
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff ff41 	bl	80021cc <cJSON_ParseWithOpts>
 800234a:	4603      	mov	r3, r0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b08e      	sub	sp, #56	; 0x38
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8002360:	2300      	movs	r3, #0
 8002362:	637b      	str	r3, [r7, #52]	; 0x34

    memset(buffer, 0, sizeof(buffer));
 8002364:	f107 0310 	add.w	r3, r7, #16
 8002368:	2224      	movs	r2, #36	; 0x24
 800236a:	2100      	movs	r1, #0
 800236c:	4618      	mov	r0, r3
 800236e:	f006 fbc7 	bl	8008b00 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a38      	ldr	r2, [pc, #224]	; (8002458 <print+0x104>)
 8002378:	6812      	ldr	r2, [r2, #0]
 800237a:	4610      	mov	r0, r2
 800237c:	4798      	blx	r3
 800237e:	4603      	mov	r3, r0
 8002380:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 8002382:	4b35      	ldr	r3, [pc, #212]	; (8002458 <print+0x104>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
    buffer->hooks = *hooks;
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002392:	ca07      	ldmia	r2, {r0, r1, r2}
 8002394:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d040      	beq.n	8002420 <print+0xcc>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 800239e:	f107 0310 	add.w	r3, r7, #16
 80023a2:	4619      	mov	r1, r3
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 f955 	bl	8002654 <print_value>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d039      	beq.n	8002424 <print+0xd0>
    {
        goto fail;
    }
    update_offset(buffer);
 80023b0:	f107 0310 	add.w	r3, r7, #16
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff f96b 	bl	8001690 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00d      	beq.n	80023de <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	6938      	ldr	r0, [r7, #16]
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	3201      	adds	r2, #1
 80023cc:	4611      	mov	r1, r2
 80023ce:	4798      	blx	r3
 80023d0:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL) {
 80023d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d027      	beq.n	8002428 <print+0xd4>
            goto fail;
        }
        buffer->buffer = NULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	e01e      	b.n	800241c <print+0xc8>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	3201      	adds	r2, #1
 80023e6:	4610      	mov	r0, r2
 80023e8:	4798      	blx	r3
 80023ea:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL)
 80023ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d01c      	beq.n	800242c <print+0xd8>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 80023f2:	6939      	ldr	r1, [r7, #16]
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	1c5a      	adds	r2, r3, #1
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	4293      	cmp	r3, r2
 80023fc:	bf28      	it	cs
 80023fe:	4613      	movcs	r3, r2
 8002400:	461a      	mov	r2, r3
 8002402:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002404:	f006 fb6e 	bl	8008ae4 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800240c:	4413      	add	r3, r2
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4610      	mov	r0, r2
 800241a:	4798      	blx	r3
    }

    return printed;
 800241c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800241e:	e016      	b.n	800244e <print+0xfa>
        goto fail;
 8002420:	bf00      	nop
 8002422:	e004      	b.n	800242e <print+0xda>
        goto fail;
 8002424:	bf00      	nop
 8002426:	e002      	b.n	800242e <print+0xda>
            goto fail;
 8002428:	bf00      	nop
 800242a:	e000      	b.n	800242e <print+0xda>
            goto fail;
 800242c:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d004      	beq.n	800243e <print+0xea>
    {
        hooks->deallocate(buffer->buffer);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	4610      	mov	r0, r2
 800243c:	4798      	blx	r3
    }

    if (printed != NULL)
 800243e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <print+0xf8>
    {
        hooks->deallocate(printed);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800244a:	4798      	blx	r3
    }

    return NULL;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3738      	adds	r7, #56	; 0x38
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	0800c750 	.word	0x0800c750

0800245c <cJSON_Print>:

/* Render a cJSON item/entity/structure to text. */
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
    return (char*)print(item, true, &global_hooks);
 8002464:	4a04      	ldr	r2, [pc, #16]	; (8002478 <cJSON_Print+0x1c>)
 8002466:	2101      	movs	r1, #1
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7ff ff73 	bl	8002354 <print>
 800246e:	4603      	mov	r3, r0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	20000000 	.word	0x20000000

0800247c <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <parse_value+0x18>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <parse_value+0x1c>
    {
        return false; /* no input */
 8002494:	2300      	movs	r3, #0
 8002496:	e0d2      	b.n	800263e <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d01d      	beq.n	80024da <parse_value+0x5e>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	1d1a      	adds	r2, r3, #4
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d816      	bhi.n	80024da <parse_value+0x5e>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	4413      	add	r3, r2
 80024b6:	2204      	movs	r2, #4
 80024b8:	4963      	ldr	r1, [pc, #396]	; (8002648 <parse_value+0x1cc>)
 80024ba:	4618      	mov	r0, r3
 80024bc:	f006 fcb1 	bl	8008e22 <strncmp>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d109      	bne.n	80024da <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2204      	movs	r2, #4
 80024ca:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	1d1a      	adds	r2, r3, #4
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	609a      	str	r2, [r3, #8]
        return true;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e0b1      	b.n	800263e <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d01d      	beq.n	800251c <parse_value+0xa0>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	1d5a      	adds	r2, r3, #5
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d816      	bhi.n	800251c <parse_value+0xa0>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	4413      	add	r3, r2
 80024f8:	2205      	movs	r2, #5
 80024fa:	4954      	ldr	r1, [pc, #336]	; (800264c <parse_value+0x1d0>)
 80024fc:	4618      	mov	r0, r3
 80024fe:	f006 fc90 	bl	8008e22 <strncmp>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d109      	bne.n	800251c <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	1d5a      	adds	r2, r3, #5
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	609a      	str	r2, [r3, #8]
        return true;
 8002518:	2301      	movs	r3, #1
 800251a:	e090      	b.n	800263e <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d020      	beq.n	8002564 <parse_value+0xe8>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	1d1a      	adds	r2, r3, #4
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	429a      	cmp	r2, r3
 800252e:	d819      	bhi.n	8002564 <parse_value+0xe8>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	4413      	add	r3, r2
 800253a:	2204      	movs	r2, #4
 800253c:	4944      	ldr	r1, [pc, #272]	; (8002650 <parse_value+0x1d4>)
 800253e:	4618      	mov	r0, r3
 8002540:	f006 fc6f 	bl	8008e22 <strncmp>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10c      	bne.n	8002564 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2202      	movs	r2, #2
 800254e:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	1d1a      	adds	r2, r3, #4
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	609a      	str	r2, [r3, #8]
        return true;
 8002560:	2301      	movs	r3, #1
 8002562:	e06c      	b.n	800263e <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d013      	beq.n	8002592 <parse_value+0x116>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	429a      	cmp	r2, r3
 8002574:	d20d      	bcs.n	8002592 <parse_value+0x116>
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	4413      	add	r3, r2
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b22      	cmp	r3, #34	; 0x22
 8002584:	d105      	bne.n	8002592 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8002586:	6839      	ldr	r1, [r7, #0]
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff fb25 	bl	8001bd8 <parse_string>
 800258e:	4603      	mov	r3, r0
 8002590:	e055      	b.n	800263e <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d023      	beq.n	80025e0 <parse_value+0x164>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d21d      	bcs.n	80025e0 <parse_value+0x164>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	4413      	add	r3, r2
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b2d      	cmp	r3, #45	; 0x2d
 80025b2:	d00f      	beq.n	80025d4 <parse_value+0x158>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	4413      	add	r3, r2
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b2f      	cmp	r3, #47	; 0x2f
 80025c2:	d90d      	bls.n	80025e0 <parse_value+0x164>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	4413      	add	r3, r2
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b39      	cmp	r3, #57	; 0x39
 80025d2:	d805      	bhi.n	80025e0 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 80025d4:	6839      	ldr	r1, [r7, #0]
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7fe fed2 	bl	8001380 <parse_number>
 80025dc:	4603      	mov	r3, r0
 80025de:	e02e      	b.n	800263e <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d013      	beq.n	800260e <parse_value+0x192>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	689a      	ldr	r2, [r3, #8]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d20d      	bcs.n	800260e <parse_value+0x192>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	4413      	add	r3, r2
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b5b      	cmp	r3, #91	; 0x5b
 8002600:	d105      	bne.n	800260e <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8002602:	6839      	ldr	r1, [r7, #0]
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 f909 	bl	800281c <parse_array>
 800260a:	4603      	mov	r3, r0
 800260c:	e017      	b.n	800263e <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d013      	beq.n	800263c <parse_value+0x1c0>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	429a      	cmp	r2, r3
 800261e:	d20d      	bcs.n	800263c <parse_value+0x1c0>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	4413      	add	r3, r2
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b7b      	cmp	r3, #123	; 0x7b
 800262e:	d105      	bne.n	800263c <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8002630:	6839      	ldr	r1, [r7, #0]
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 fa3c 	bl	8002ab0 <parse_object>
 8002638:	4603      	mov	r3, r0
 800263a:	e000      	b.n	800263e <parse_value+0x1c2>
    }

    return false;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	0800c5dc 	.word	0x0800c5dc
 800264c:	0800c60c 	.word	0x0800c60c
 8002650:	0800c614 	.word	0x0800c614

08002654 <print_value>:

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 800265e:	2300      	movs	r3, #0
 8002660:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <print_value+0x1a>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <print_value+0x1e>
    {
        return false;
 800266e:	2300      	movs	r3, #0
 8002670:	e0c9      	b.n	8002806 <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b80      	cmp	r3, #128	; 0x80
 800267a:	f000 808e 	beq.w	800279a <print_value+0x146>
 800267e:	2b80      	cmp	r3, #128	; 0x80
 8002680:	f300 80c0 	bgt.w	8002804 <print_value+0x1b0>
 8002684:	2b20      	cmp	r3, #32
 8002686:	dc49      	bgt.n	800271c <print_value+0xc8>
 8002688:	2b00      	cmp	r3, #0
 800268a:	f340 80bb 	ble.w	8002804 <print_value+0x1b0>
 800268e:	3b01      	subs	r3, #1
 8002690:	2b1f      	cmp	r3, #31
 8002692:	f200 80b7 	bhi.w	8002804 <print_value+0x1b0>
 8002696:	a201      	add	r2, pc, #4	; (adr r2, 800269c <print_value+0x48>)
 8002698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269c:	08002747 	.word	0x08002747
 80026a0:	0800276b 	.word	0x0800276b
 80026a4:	08002805 	.word	0x08002805
 80026a8:	08002723 	.word	0x08002723
 80026ac:	08002805 	.word	0x08002805
 80026b0:	08002805 	.word	0x08002805
 80026b4:	08002805 	.word	0x08002805
 80026b8:	0800278f 	.word	0x0800278f
 80026bc:	08002805 	.word	0x08002805
 80026c0:	08002805 	.word	0x08002805
 80026c4:	08002805 	.word	0x08002805
 80026c8:	08002805 	.word	0x08002805
 80026cc:	08002805 	.word	0x08002805
 80026d0:	08002805 	.word	0x08002805
 80026d4:	08002805 	.word	0x08002805
 80026d8:	080027e1 	.word	0x080027e1
 80026dc:	08002805 	.word	0x08002805
 80026e0:	08002805 	.word	0x08002805
 80026e4:	08002805 	.word	0x08002805
 80026e8:	08002805 	.word	0x08002805
 80026ec:	08002805 	.word	0x08002805
 80026f0:	08002805 	.word	0x08002805
 80026f4:	08002805 	.word	0x08002805
 80026f8:	08002805 	.word	0x08002805
 80026fc:	08002805 	.word	0x08002805
 8002700:	08002805 	.word	0x08002805
 8002704:	08002805 	.word	0x08002805
 8002708:	08002805 	.word	0x08002805
 800270c:	08002805 	.word	0x08002805
 8002710:	08002805 	.word	0x08002805
 8002714:	08002805 	.word	0x08002805
 8002718:	080027ed 	.word	0x080027ed
 800271c:	2b40      	cmp	r3, #64	; 0x40
 800271e:	d06b      	beq.n	80027f8 <print_value+0x1a4>
 8002720:	e070      	b.n	8002804 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 8002722:	2105      	movs	r1, #5
 8002724:	6838      	ldr	r0, [r7, #0]
 8002726:	f7fe ff19 	bl	800155c <ensure>
 800272a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <print_value+0xe2>
            {
                return false;
 8002732:	2300      	movs	r3, #0
 8002734:	e067      	b.n	8002806 <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4a35      	ldr	r2, [pc, #212]	; (8002810 <print_value+0x1bc>)
 800273a:	6810      	ldr	r0, [r2, #0]
 800273c:	6018      	str	r0, [r3, #0]
 800273e:	7912      	ldrb	r2, [r2, #4]
 8002740:	711a      	strb	r2, [r3, #4]
            return true;
 8002742:	2301      	movs	r3, #1
 8002744:	e05f      	b.n	8002806 <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 8002746:	2106      	movs	r1, #6
 8002748:	6838      	ldr	r0, [r7, #0]
 800274a:	f7fe ff07 	bl	800155c <ensure>
 800274e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <print_value+0x106>
            {
                return false;
 8002756:	2300      	movs	r3, #0
 8002758:	e055      	b.n	8002806 <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	4a2d      	ldr	r2, [pc, #180]	; (8002814 <print_value+0x1c0>)
 800275e:	6810      	ldr	r0, [r2, #0]
 8002760:	6018      	str	r0, [r3, #0]
 8002762:	8892      	ldrh	r2, [r2, #4]
 8002764:	809a      	strh	r2, [r3, #4]
            return true;
 8002766:	2301      	movs	r3, #1
 8002768:	e04d      	b.n	8002806 <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 800276a:	2105      	movs	r1, #5
 800276c:	6838      	ldr	r0, [r7, #0]
 800276e:	f7fe fef5 	bl	800155c <ensure>
 8002772:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <print_value+0x12a>
            {
                return false;
 800277a:	2300      	movs	r3, #0
 800277c:	e043      	b.n	8002806 <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	4a25      	ldr	r2, [pc, #148]	; (8002818 <print_value+0x1c4>)
 8002782:	6810      	ldr	r0, [r2, #0]
 8002784:	6018      	str	r0, [r3, #0]
 8002786:	7912      	ldrb	r2, [r2, #4]
 8002788:	711a      	strb	r2, [r3, #4]
            return true;
 800278a:	2301      	movs	r3, #1
 800278c:	e03b      	b.n	8002806 <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 800278e:	6839      	ldr	r1, [r7, #0]
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7fe ffe7 	bl	8001764 <print_number>
 8002796:	4603      	mov	r3, r0
 8002798:	e035      	b.n	8002806 <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 800279a:	2300      	movs	r3, #0
 800279c:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <print_value+0x156>
            {
                return false;
 80027a6:	2300      	movs	r3, #0
 80027a8:	e02d      	b.n	8002806 <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fd fd18 	bl	80001e4 <strlen>
 80027b4:	4603      	mov	r3, r0
 80027b6:	3301      	adds	r3, #1
 80027b8:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 80027ba:	68b9      	ldr	r1, [r7, #8]
 80027bc:	6838      	ldr	r0, [r7, #0]
 80027be:	f7fe fecd 	bl	800155c <ensure>
 80027c2:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <print_value+0x17a>
            {
                return false;
 80027ca:	2300      	movs	r3, #0
 80027cc:	e01b      	b.n	8002806 <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	4619      	mov	r1, r3
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f006 f984 	bl	8008ae4 <memcpy>
            return true;
 80027dc:	2301      	movs	r3, #1
 80027de:	e012      	b.n	8002806 <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 80027e0:	6839      	ldr	r1, [r7, #0]
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7ff fc6e 	bl	80020c4 <print_string>
 80027e8:	4603      	mov	r3, r0
 80027ea:	e00c      	b.n	8002806 <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 80027ec:	6839      	ldr	r1, [r7, #0]
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f8d8 	bl	80029a4 <print_array>
 80027f4:	4603      	mov	r3, r0
 80027f6:	e006      	b.n	8002806 <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 80027f8:	6839      	ldr	r1, [r7, #0]
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 fa57 	bl	8002cae <print_object>
 8002800:	4603      	mov	r3, r0
 8002802:	e000      	b.n	8002806 <print_value+0x1b2>

        default:
            return false;
 8002804:	2300      	movs	r3, #0
    }
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	0800c5dc 	.word	0x0800c5dc
 8002814:	0800c60c 	.word	0x0800c60c
 8002818:	0800c614 	.word	0x0800c614

0800281c <parse_array>:

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002836:	d301      	bcc.n	800283c <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8002838:	2300      	movs	r3, #0
 800283a:	e0af      	b.n	800299c <parse_array+0x180>
    }
    input_buffer->depth++;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	4413      	add	r3, r2
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b5b      	cmp	r3, #91	; 0x5b
 8002854:	f040 8094 	bne.w	8002980 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8002862:	6838      	ldr	r0, [r7, #0]
 8002864:	f7ff fc3e 	bl	80020e4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00d      	beq.n	800288a <parse_array+0x6e>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	429a      	cmp	r2, r3
 8002878:	d207      	bcs.n	800288a <parse_array+0x6e>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	4413      	add	r3, r2
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b5d      	cmp	r3, #93	; 0x5d
 8002888:	d061      	beq.n	800294e <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <parse_array+0x80>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	429a      	cmp	r2, r3
 800289a:	d305      	bcc.n	80028a8 <parse_array+0x8c>
    {
        input_buffer->offset--;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	1e5a      	subs	r2, r3, #1
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	609a      	str	r2, [r3, #8]
        goto fail;
 80028a6:	e072      	b.n	800298e <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	1e5a      	subs	r2, r3, #1
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	3310      	adds	r3, #16
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe fcf8 	bl	80012ac <cJSON_New_Item>
 80028bc:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d05f      	beq.n	8002984 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d104      	bne.n	80028d4 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	617b      	str	r3, [r7, #20]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	e007      	b.n	80028e4 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	1c5a      	adds	r2, r3, #1
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80028ee:	6838      	ldr	r0, [r7, #0]
 80028f0:	f7ff fbf8 	bl	80020e4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 80028f4:	6839      	ldr	r1, [r7, #0]
 80028f6:	6938      	ldr	r0, [r7, #16]
 80028f8:	f7ff fdc0 	bl	800247c <parse_value>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d042      	beq.n	8002988 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8002902:	6838      	ldr	r0, [r7, #0]
 8002904:	f7ff fbee 	bl	80020e4 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00d      	beq.n	800292a <parse_array+0x10e>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	429a      	cmp	r2, r3
 8002918:	d207      	bcs.n	800292a <parse_array+0x10e>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	4413      	add	r3, r2
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b2c      	cmp	r3, #44	; 0x2c
 8002928:	d0c3      	beq.n	80028b2 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d02d      	beq.n	800298c <parse_array+0x170>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	429a      	cmp	r2, r3
 800293a:	d227      	bcs.n	800298c <parse_array+0x170>
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	4413      	add	r3, r2
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b5d      	cmp	r3, #93	; 0x5d
 800294a:	d11f      	bne.n	800298c <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 800294c:	e000      	b.n	8002950 <parse_array+0x134>
        goto success;
 800294e:	bf00      	nop
    input_buffer->depth--;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	1e5a      	subs	r2, r3, #1
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d002      	beq.n	8002966 <parse_array+0x14a>
        head->prev = current_item;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2220      	movs	r2, #32
 800296a:	60da      	str	r2, [r3, #12]
    item->child = head;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	1c5a      	adds	r2, r3, #1
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	609a      	str	r2, [r3, #8]

    return true;
 800297c:	2301      	movs	r3, #1
 800297e:	e00d      	b.n	800299c <parse_array+0x180>
        goto fail;
 8002980:	bf00      	nop
 8002982:	e004      	b.n	800298e <parse_array+0x172>
            goto fail; /* allocation failure */
 8002984:	bf00      	nop
 8002986:	e002      	b.n	800298e <parse_array+0x172>
            goto fail; /* failed to parse value */
 8002988:	bf00      	nop
 800298a:	e000      	b.n	800298e <parse_array+0x172>
        goto fail; /* expected end of array */
 800298c:	bf00      	nop

fail:
    if (head != NULL)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d002      	beq.n	800299a <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8002994:	6978      	ldr	r0, [r7, #20]
 8002996:	f7fe fc9f 	bl	80012d8 <cJSON_Delete>
    }

    return false;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <print_array>:

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <print_array+0x22>
    {
        return false;
 80029c2:	2300      	movs	r3, #0
 80029c4:	e070      	b.n	8002aa8 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 80029c6:	2101      	movs	r1, #1
 80029c8:	6838      	ldr	r0, [r7, #0]
 80029ca:	f7fe fdc7 	bl	800155c <ensure>
 80029ce:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <print_array+0x36>
    {
        return false;
 80029d6:	2300      	movs	r3, #0
 80029d8:	e066      	b.n	8002aa8 <print_array+0x104>
    }

    *output_pointer = '[';
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	225b      	movs	r2, #91	; 0x5b
 80029de:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	1c5a      	adds	r2, r3, #1
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 80029f4:	e03d      	b.n	8002a72 <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 80029f6:	6839      	ldr	r1, [r7, #0]
 80029f8:	6938      	ldr	r0, [r7, #16]
 80029fa:	f7ff fe2b 	bl	8002654 <print_value>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <print_array+0x64>
        {
            return false;
 8002a04:	2300      	movs	r3, #0
 8002a06:	e04f      	b.n	8002aa8 <print_array+0x104>
        }
        update_offset(output_buffer);
 8002a08:	6838      	ldr	r0, [r7, #0]
 8002a0a:	f7fe fe41 	bl	8001690 <update_offset>
        if (current_element->next)
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d02a      	beq.n	8002a6c <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <print_array+0x7e>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e000      	b.n	8002a24 <print_array+0x80>
 8002a22:	2301      	movs	r3, #1
 8002a24:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	6838      	ldr	r0, [r7, #0]
 8002a2e:	f7fe fd95 	bl	800155c <ensure>
 8002a32:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <print_array+0x9a>
            {
                return false;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	e034      	b.n	8002aa8 <print_array+0x104>
            }
            *output_pointer++ = ',';
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	617a      	str	r2, [r7, #20]
 8002a44:	222c      	movs	r2, #44	; 0x2c
 8002a46:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d004      	beq.n	8002a5a <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	617a      	str	r2, [r7, #20]
 8002a56:	2220      	movs	r2, #32
 8002a58:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	441a      	add	r2, r3
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1be      	bne.n	80029f6 <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 8002a78:	2102      	movs	r1, #2
 8002a7a:	6838      	ldr	r0, [r7, #0]
 8002a7c:	f7fe fd6e 	bl	800155c <ensure>
 8002a80:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <print_array+0xe8>
    {
        return false;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	e00d      	b.n	8002aa8 <print_array+0x104>
    }
    *output_pointer++ = ']';
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	617a      	str	r2, [r7, #20]
 8002a92:	225d      	movs	r2, #93	; 0x5d
 8002a94:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	1e5a      	subs	r2, r3, #1
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	60da      	str	r2, [r3, #12]

    return true;
 8002aa6:	2301      	movs	r3, #1
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <parse_object>:

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002aca:	d301      	bcc.n	8002ad0 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8002acc:	2300      	movs	r3, #0
 8002ace:	e0ea      	b.n	8002ca6 <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 80d0 	beq.w	8002c82 <parse_object+0x1d2>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	f080 80c9 	bcs.w	8002c82 <parse_object+0x1d2>
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	4413      	add	r3, r2
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b7b      	cmp	r3, #123	; 0x7b
 8002afe:	f040 80c0 	bne.w	8002c82 <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	1c5a      	adds	r2, r3, #1
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8002b0c:	6838      	ldr	r0, [r7, #0]
 8002b0e:	f7ff fae9 	bl	80020e4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00e      	beq.n	8002b36 <parse_object+0x86>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d208      	bcs.n	8002b36 <parse_object+0x86>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b7d      	cmp	r3, #125	; 0x7d
 8002b32:	f000 808d 	beq.w	8002c50 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <parse_object+0x98>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d305      	bcc.n	8002b54 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	1e5a      	subs	r2, r3, #1
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	609a      	str	r2, [r3, #8]
        goto fail;
 8002b52:	e0a1      	b.n	8002c98 <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	1e5a      	subs	r2, r3, #1
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	3310      	adds	r3, #16
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fe fba2 	bl	80012ac <cJSON_New_Item>
 8002b68:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 808a 	beq.w	8002c86 <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d104      	bne.n	8002b82 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	613b      	str	r3, [r7, #16]
 8002b80:	e007      	b.n	8002b92 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	1c5a      	adds	r2, r3, #1
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002b9c:	6838      	ldr	r0, [r7, #0]
 8002b9e:	f7ff faa1 	bl	80020e4 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8002ba2:	6839      	ldr	r1, [r7, #0]
 8002ba4:	6938      	ldr	r0, [r7, #16]
 8002ba6:	f7ff f817 	bl	8001bd8 <parse_string>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d06c      	beq.n	8002c8a <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8002bb0:	6838      	ldr	r0, [r7, #0]
 8002bb2:	f7ff fa97 	bl	80020e4 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	691a      	ldr	r2, [r3, #16]
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d061      	beq.n	8002c8e <parse_object+0x1de>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d25b      	bcs.n	8002c8e <parse_object+0x1de>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	4413      	add	r3, r2
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b3a      	cmp	r3, #58	; 0x3a
 8002be4:	d153      	bne.n	8002c8e <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002bf0:	6838      	ldr	r0, [r7, #0]
 8002bf2:	f7ff fa77 	bl	80020e4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8002bf6:	6839      	ldr	r1, [r7, #0]
 8002bf8:	6938      	ldr	r0, [r7, #16]
 8002bfa:	f7ff fc3f 	bl	800247c <parse_value>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d046      	beq.n	8002c92 <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8002c04:	6838      	ldr	r0, [r7, #0]
 8002c06:	f7ff fa6d 	bl	80020e4 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00d      	beq.n	8002c2c <parse_object+0x17c>
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d207      	bcs.n	8002c2c <parse_object+0x17c>
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	4413      	add	r3, r2
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b2c      	cmp	r3, #44	; 0x2c
 8002c2a:	d098      	beq.n	8002b5e <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d031      	beq.n	8002c96 <parse_object+0x1e6>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d22b      	bcs.n	8002c96 <parse_object+0x1e6>
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	4413      	add	r3, r2
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b7d      	cmp	r3, #125	; 0x7d
 8002c4c:	d123      	bne.n	8002c96 <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 8002c4e:	e000      	b.n	8002c52 <parse_object+0x1a2>
        goto success; /* empty object */
 8002c50:	bf00      	nop
    input_buffer->depth--;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	1e5a      	subs	r2, r3, #1
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d002      	beq.n	8002c68 <parse_object+0x1b8>
        head->prev = current_item;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2240      	movs	r2, #64	; 0x40
 8002c6c:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	609a      	str	r2, [r3, #8]
    return true;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e011      	b.n	8002ca6 <parse_object+0x1f6>
        goto fail; /* not an object */
 8002c82:	bf00      	nop
 8002c84:	e008      	b.n	8002c98 <parse_object+0x1e8>
            goto fail; /* allocation failure */
 8002c86:	bf00      	nop
 8002c88:	e006      	b.n	8002c98 <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 8002c8a:	bf00      	nop
 8002c8c:	e004      	b.n	8002c98 <parse_object+0x1e8>
            goto fail; /* invalid object */
 8002c8e:	bf00      	nop
 8002c90:	e002      	b.n	8002c98 <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 8002c92:	bf00      	nop
 8002c94:	e000      	b.n	8002c98 <parse_object+0x1e8>
        goto fail; /* expected end of object */
 8002c96:	bf00      	nop

fail:
    if (head != NULL)
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d002      	beq.n	8002ca4 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 8002c9e:	6978      	ldr	r0, [r7, #20]
 8002ca0:	f7fe fb1a 	bl	80012d8 <cJSON_Delete>
    }

    return false;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <print_object>:

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b088      	sub	sp, #32
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
 8002cb6:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <print_object+0x22>
    {
        return false;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	e108      	b.n	8002ee2 <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <print_object+0x2e>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e000      	b.n	8002cde <print_object+0x30>
 8002cdc:	2301      	movs	r3, #1
 8002cde:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	6838      	ldr	r0, [r7, #0]
 8002ce8:	f7fe fc38 	bl	800155c <ensure>
 8002cec:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <print_object+0x4a>
    {
        return false;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	e0f4      	b.n	8002ee2 <print_object+0x234>
    }

    *output_pointer++ = '{';
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	61fa      	str	r2, [r7, #28]
 8002cfe:	227b      	movs	r2, #123	; 0x7b
 8002d00:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d004      	beq.n	8002d1e <print_object+0x70>
    {
        *output_pointer++ = '\n';
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	1c5a      	adds	r2, r3, #1
 8002d18:	61fa      	str	r2, [r7, #28]
 8002d1a:	220a      	movs	r2, #10
 8002d1c:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	441a      	add	r2, r3
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	609a      	str	r2, [r3, #8]

    while (current_item)
 8002d2a:	e0a0      	b.n	8002e6e <print_object+0x1c0>
    {
        if (output_buffer->format)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d022      	beq.n	8002d7a <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	4619      	mov	r1, r3
 8002d3a:	6838      	ldr	r0, [r7, #0]
 8002d3c:	f7fe fc0e 	bl	800155c <ensure>
 8002d40:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <print_object+0x9e>
            {
                return false;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	e0ca      	b.n	8002ee2 <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	e007      	b.n	8002d62 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	61fa      	str	r2, [r7, #28]
 8002d58:	2209      	movs	r2, #9
 8002d5a:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	617b      	str	r3, [r7, #20]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d3f2      	bcc.n	8002d52 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	441a      	add	r2, r3
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	6839      	ldr	r1, [r7, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff f86f 	bl	8001e64 <print_string_ptr>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <print_object+0xe2>
        {
            return false;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	e0a8      	b.n	8002ee2 <print_object+0x234>
        }
        update_offset(output_buffer);
 8002d90:	6838      	ldr	r0, [r7, #0]
 8002d92:	f7fe fc7d 	bl	8001690 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <print_object+0xf4>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e000      	b.n	8002da4 <print_object+0xf6>
 8002da2:	2301      	movs	r3, #1
 8002da4:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 8002da6:	68f9      	ldr	r1, [r7, #12]
 8002da8:	6838      	ldr	r0, [r7, #0]
 8002daa:	f7fe fbd7 	bl	800155c <ensure>
 8002dae:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <print_object+0x10c>
        {
            return false;
 8002db6:	2300      	movs	r3, #0
 8002db8:	e093      	b.n	8002ee2 <print_object+0x234>
        }
        *output_pointer++ = ':';
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	61fa      	str	r2, [r7, #28]
 8002dc0:	223a      	movs	r2, #58	; 0x3a
 8002dc2:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d004      	beq.n	8002dd6 <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	1c5a      	adds	r2, r3, #1
 8002dd0:	61fa      	str	r2, [r7, #28]
 8002dd2:	2209      	movs	r2, #9
 8002dd4:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	441a      	add	r2, r3
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8002de2:	6839      	ldr	r1, [r7, #0]
 8002de4:	69b8      	ldr	r0, [r7, #24]
 8002de6:	f7ff fc35 	bl	8002654 <print_value>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <print_object+0x146>
        {
            return false;
 8002df0:	2300      	movs	r3, #0
 8002df2:	e076      	b.n	8002ee2 <print_object+0x234>
        }
        update_offset(output_buffer);
 8002df4:	6838      	ldr	r0, [r7, #0]
 8002df6:	f7fe fc4b 	bl	8001690 <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <print_object+0x158>
 8002e02:	2201      	movs	r2, #1
 8002e04:	e000      	b.n	8002e08 <print_object+0x15a>
 8002e06:	2200      	movs	r2, #0
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <print_object+0x166>
 8002e10:	2301      	movs	r3, #1
 8002e12:	e000      	b.n	8002e16 <print_object+0x168>
 8002e14:	2300      	movs	r3, #0
 8002e16:	4413      	add	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	4619      	mov	r1, r3
 8002e20:	6838      	ldr	r0, [r7, #0]
 8002e22:	f7fe fb9b 	bl	800155c <ensure>
 8002e26:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <print_object+0x184>
        {
            return false;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	e057      	b.n	8002ee2 <print_object+0x234>
        }
        if (current_item->next)
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d004      	beq.n	8002e44 <print_object+0x196>
        {
            *output_pointer++ = ',';
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	1c5a      	adds	r2, r3, #1
 8002e3e:	61fa      	str	r2, [r7, #28]
 8002e40:	222c      	movs	r2, #44	; 0x2c
 8002e42:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d004      	beq.n	8002e56 <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	1c5a      	adds	r2, r3, #1
 8002e50:	61fa      	str	r2, [r7, #28]
 8002e52:	220a      	movs	r2, #10
 8002e54:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	441a      	add	r2, r3
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f47f af5b 	bne.w	8002d2c <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d003      	beq.n	8002e86 <print_object+0x1d8>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	3301      	adds	r3, #1
 8002e84:	e000      	b.n	8002e88 <print_object+0x1da>
 8002e86:	2302      	movs	r3, #2
 8002e88:	4619      	mov	r1, r3
 8002e8a:	6838      	ldr	r0, [r7, #0]
 8002e8c:	f7fe fb66 	bl	800155c <ensure>
 8002e90:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <print_object+0x1ee>
    {
        return false;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	e022      	b.n	8002ee2 <print_object+0x234>
    }
    if (output_buffer->format)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d010      	beq.n	8002ec6 <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	613b      	str	r3, [r7, #16]
 8002ea8:	e007      	b.n	8002eba <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	1c5a      	adds	r2, r3, #1
 8002eae:	61fa      	str	r2, [r7, #28]
 8002eb0:	2209      	movs	r2, #9
 8002eb2:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d3f1      	bcc.n	8002eaa <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	1c5a      	adds	r2, r3, #1
 8002eca:	61fa      	str	r2, [r7, #28]
 8002ecc:	227d      	movs	r2, #125	; 0x7d
 8002ece:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	1e5a      	subs	r2, r3, #1
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	60da      	str	r2, [r3, #12]

    return true;
 8002ee0:	2301      	movs	r3, #1
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3720      	adds	r7, #32
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <get_array_item>:

    return (int)size;
}

static cJSON* get_array_item(const cJSON *array, size_t index)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b085      	sub	sp, #20
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
 8002ef2:	6039      	str	r1, [r7, #0]
    cJSON *current_child = NULL;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	60fb      	str	r3, [r7, #12]

    if (array == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <get_array_item+0x18>
    {
        return NULL;
 8002efe:	2300      	movs	r3, #0
 8002f00:	e010      	b.n	8002f24 <get_array_item+0x3a>
    }

    current_child = array->child;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 8002f08:	e005      	b.n	8002f16 <get_array_item+0x2c>
    {
        index--;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	603b      	str	r3, [r7, #0]
        current_child = current_child->next;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d002      	beq.n	8002f22 <get_array_item+0x38>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f3      	bne.n	8002f0a <get_array_item+0x20>
    }

    return current_child;
 8002f22:	68fb      	ldr	r3, [r7, #12]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <cJSON_GetArrayItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
    if (index < 0)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	da01      	bge.n	8002f44 <cJSON_GetArrayItem+0x14>
    {
        return NULL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	e005      	b.n	8002f50 <cJSON_GetArrayItem+0x20>
    }

    return get_array_item(array, (size_t)index);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	4619      	mov	r1, r3
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff ffce 	bl	8002eea <get_array_item>
 8002f4e:	4603      	mov	r3, r0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <get_object_item>:

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8002f64:	2300      	movs	r3, #0
 8002f66:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d002      	beq.n	8002f74 <get_object_item+0x1c>
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <get_object_item+0x20>
    {
        return NULL;
 8002f74:	2300      	movs	r3, #0
 8002f76:	e033      	b.n	8002fe0 <get_object_item+0x88>
    }

    current_element = object->child;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d017      	beq.n	8002fb4 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002f84:	e002      	b.n	8002f8c <get_object_item+0x34>
        {
            current_element = current_element->next;
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d01c      	beq.n	8002fcc <get_object_item+0x74>
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d018      	beq.n	8002fcc <get_object_item+0x74>
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	68b8      	ldr	r0, [r7, #8]
 8002fa2:	f7fd f915 	bl	80001d0 <strcmp>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1ec      	bne.n	8002f86 <get_object_item+0x2e>
 8002fac:	e00e      	b.n	8002fcc <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d008      	beq.n	8002fcc <get_object_item+0x74>
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	68b8      	ldr	r0, [r7, #8]
 8002fc2:	f7fe f8df 	bl	8001184 <case_insensitive_strcmp>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1f0      	bne.n	8002fae <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <get_object_item+0x82>
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <get_object_item+0x86>
        return NULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	e000      	b.n	8002fe0 <get_object_item+0x88>
    }

    return current_element;
 8002fde:	697b      	ldr	r3, [r7, #20]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	6839      	ldr	r1, [r7, #0]
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff ffae 	bl	8002f58 <get_object_item>
 8002ffc:	4603      	mov	r3, r0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 8003006:	b480      	push	{r7}
 8003008:	b083      	sub	sp, #12
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
 800300e:	6039      	str	r1, [r7, #0]
    prev->next = item;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	605a      	str	r2, [r3, #4]
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 8003032:	2300      	movs	r3, #0
 8003034:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d006      	beq.n	800304a <add_item_to_array+0x22>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <add_item_to_array+0x22>
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	429a      	cmp	r2, r3
 8003048:	d101      	bne.n	800304e <add_item_to_array+0x26>
    {
        return false;
 800304a:	2300      	movs	r3, #0
 800304c:	e01e      	b.n	800308c <add_item_to_array+0x64>
    }

    child = array->child;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d109      	bne.n	800306e <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	609a      	str	r2, [r3, #8]
        item->prev = item;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	e00d      	b.n	800308a <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d009      	beq.n	800308a <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	6839      	ldr	r1, [r7, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff ffc2 	bl	8003006 <suffix_object>
            array->child->prev = item;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 800308a:	2301      	movs	r3, #1
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <cJSON_AddItemToArray>:

/* Add item to array/object. */
CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToArray(cJSON *array, cJSON *item)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
    return add_item_to_array(array, item);
 800309e:	6839      	ldr	r1, [r7, #0]
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7ff ffc1 	bl	8003028 <add_item_to_array>
 80030a6:	4603      	mov	r3, r0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
    return (void*)string;
 80030b8:	687b      	ldr	r3, [r7, #4]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b086      	sub	sp, #24
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	60f8      	str	r0, [r7, #12]
 80030ce:	60b9      	str	r1, [r7, #8]
 80030d0:	607a      	str	r2, [r7, #4]
 80030d2:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 80030d4:	2300      	movs	r3, #0
 80030d6:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 80030d8:	2300      	movs	r3, #0
 80030da:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d009      	beq.n	80030f6 <add_item_to_object+0x30>
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d006      	beq.n	80030f6 <add_item_to_object+0x30>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <add_item_to_object+0x30>
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d101      	bne.n	80030fa <add_item_to_object+0x34>
    {
        return false;
 80030f6:	2300      	movs	r3, #0
 80030f8:	e036      	b.n	8003168 <add_item_to_object+0xa2>
    }

    if (constant_key)
 80030fa:	6a3b      	ldr	r3, [r7, #32]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d009      	beq.n	8003114 <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 8003100:	68b8      	ldr	r0, [r7, #8]
 8003102:	f7ff ffd5 	bl	80030b0 <cast_away_const>
 8003106:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003110:	613b      	str	r3, [r7, #16]
 8003112:	e00e      	b.n	8003132 <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 8003114:	6839      	ldr	r1, [r7, #0]
 8003116:	68b8      	ldr	r0, [r7, #8]
 8003118:	f7fe f8a0 	bl	800125c <cJSON_strdup>
 800311c:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <add_item_to_object+0x62>
        {
            return false;
 8003124:	2300      	movs	r3, #0
 8003126:	e01f      	b.n	8003168 <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003130:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800313a:	2b00      	cmp	r3, #0
 800313c:	d109      	bne.n	8003152 <add_item_to_object+0x8c>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d005      	beq.n	8003152 <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6a12      	ldr	r2, [r2, #32]
 800314e:	4610      	mov	r0, r2
 8003150:	4798      	blx	r3
    }

    item->string = new_key;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f7ff ff61 	bl	8003028 <add_item_to_array>
 8003166:	4603      	mov	r3, r0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <cJSON_AddItemToObject>:

CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af02      	add	r7, sp, #8
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
    return add_item_to_object(object, string, item, &global_hooks, false);
 800317c:	2300      	movs	r3, #0
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	4b05      	ldr	r3, [pc, #20]	; (8003198 <cJSON_AddItemToObject+0x28>)
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	68b9      	ldr	r1, [r7, #8]
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f7ff ff9d 	bl	80030c6 <add_item_to_object>
 800318c:	4603      	mov	r3, r0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	20000000 	.word	0x20000000
 800319c:	00000000 	.word	0x00000000

080031a0 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 80031aa:	481f      	ldr	r0, [pc, #124]	; (8003228 <cJSON_CreateNumber+0x88>)
 80031ac:	f7fe f87e 	bl	80012ac <cJSON_New_Item>
 80031b0:	60f8      	str	r0, [r7, #12]
    if(item)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d02c      	beq.n	8003212 <cJSON_CreateNumber+0x72>
    {
        item->type = cJSON_Number;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2208      	movs	r2, #8
 80031bc:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 80031be:	68f9      	ldr	r1, [r7, #12]
 80031c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031c4:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 80031c8:	a315      	add	r3, pc, #84	; (adr r3, 8003220 <cJSON_CreateNumber+0x80>)
 80031ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80031d2:	f7fd fca7 	bl	8000b24 <__aeabi_dcmpge>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d004      	beq.n	80031e6 <cJSON_CreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80031e2:	615a      	str	r2, [r3, #20]
 80031e4:	e015      	b.n	8003212 <cJSON_CreateNumber+0x72>
        }
        else if (num <= (double)INT_MIN)
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	4b10      	ldr	r3, [pc, #64]	; (800322c <cJSON_CreateNumber+0x8c>)
 80031ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80031f0:	f7fd fc8e 	bl	8000b10 <__aeabi_dcmple>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d004      	beq.n	8003204 <cJSON_CreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003200:	615a      	str	r2, [r3, #20]
 8003202:	e006      	b.n	8003212 <cJSON_CreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 8003204:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003208:	f7fd fcb6 	bl	8000b78 <__aeabi_d2iz>
 800320c:	4602      	mov	r2, r0
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 8003212:	68fb      	ldr	r3, [r7, #12]
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	f3af 8000 	nop.w
 8003220:	ffc00000 	.word	0xffc00000
 8003224:	41dfffff 	.word	0x41dfffff
 8003228:	20000000 	.word	0x20000000
 800322c:	c1e00000 	.word	0xc1e00000

08003230 <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8003238:	480f      	ldr	r0, [pc, #60]	; (8003278 <cJSON_CreateString+0x48>)
 800323a:	f7fe f837 	bl	80012ac <cJSON_New_Item>
 800323e:	60f8      	str	r0, [r7, #12]
    if(item)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d012      	beq.n	800326c <cJSON_CreateString+0x3c>
    {
        item->type = cJSON_String;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2210      	movs	r2, #16
 800324a:	60da      	str	r2, [r3, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
 800324c:	490a      	ldr	r1, [pc, #40]	; (8003278 <cJSON_CreateString+0x48>)
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7fe f804 	bl	800125c <cJSON_strdup>
 8003254:	4602      	mov	r2, r0
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	611a      	str	r2, [r3, #16]
        if(!item->valuestring)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d104      	bne.n	800326c <cJSON_CreateString+0x3c>
        {
            cJSON_Delete(item);
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f7fe f838 	bl	80012d8 <cJSON_Delete>
            return NULL;
 8003268:	2300      	movs	r3, #0
 800326a:	e000      	b.n	800326e <cJSON_CreateString+0x3e>
        }
    }

    return item;
 800326c:	68fb      	ldr	r3, [r7, #12]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	20000000 	.word	0x20000000

0800327c <cJSON_CreateArray>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 8003282:	4807      	ldr	r0, [pc, #28]	; (80032a0 <cJSON_CreateArray+0x24>)
 8003284:	f7fe f812 	bl	80012ac <cJSON_New_Item>
 8003288:	6078      	str	r0, [r7, #4]
    if(item)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d002      	beq.n	8003296 <cJSON_CreateArray+0x1a>
    {
        item->type=cJSON_Array;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2220      	movs	r2, #32
 8003294:	60da      	str	r2, [r3, #12]
    }

    return item;
 8003296:	687b      	ldr	r3, [r7, #4]
}
 8003298:	4618      	mov	r0, r3
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	20000000 	.word	0x20000000

080032a4 <cJSON_CreateObject>:

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 80032aa:	4807      	ldr	r0, [pc, #28]	; (80032c8 <cJSON_CreateObject+0x24>)
 80032ac:	f7fd fffe 	bl	80012ac <cJSON_New_Item>
 80032b0:	6078      	str	r0, [r7, #4]
    if (item)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d002      	beq.n	80032be <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2240      	movs	r2, #64	; 0x40
 80032bc:	60da      	str	r2, [r3, #12]
    }

    return item;
 80032be:	687b      	ldr	r3, [r7, #4]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	20000000 	.word	0x20000000

080032cc <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <cJSON_IsNumber+0x12>
    {
        return false;
 80032da:	2300      	movs	r3, #0
 80032dc:	e007      	b.n	80032ee <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	bf0c      	ite	eq
 80032e8:	2301      	moveq	r3, #1
 80032ea:	2300      	movne	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <cJSON_IsString>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d101      	bne.n	800330c <cJSON_IsString+0x12>
    {
        return false;
 8003308:	2300      	movs	r3, #0
 800330a:	e007      	b.n	800331c <cJSON_IsString+0x22>
    }

    return (item->type & 0xFF) == cJSON_String;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b10      	cmp	r3, #16
 8003314:	bf0c      	ite	eq
 8003316:	2301      	moveq	r3, #1
 8003318:	2300      	movne	r3, #0
 800331a:	b2db      	uxtb	r3, r3
}
 800331c:	4618      	mov	r0, r3
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac_ch1;
DMA_HandleTypeDef hdma_dac_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08a      	sub	sp, #40	; 0x28
 800332c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800332e:	1d3b      	adds	r3, r7, #4
 8003330:	2224      	movs	r2, #36	; 0x24
 8003332:	2100      	movs	r1, #0
 8003334:	4618      	mov	r0, r3
 8003336:	f005 fbe3 	bl	8008b00 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800333a:	4b17      	ldr	r3, [pc, #92]	; (8003398 <MX_DAC1_Init+0x70>)
 800333c:	4a17      	ldr	r2, [pc, #92]	; (800339c <MX_DAC1_Init+0x74>)
 800333e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003340:	4815      	ldr	r0, [pc, #84]	; (8003398 <MX_DAC1_Init+0x70>)
 8003342:	f001 fb41 	bl	80049c8 <HAL_DAC_Init>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800334c:	f000 fe40 	bl	8003fd0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003350:	2300      	movs	r3, #0
 8003352:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8003354:	2324      	movs	r3, #36	; 0x24
 8003356:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003358:	2300      	movs	r3, #0
 800335a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 800335c:	2301      	movs	r3, #1
 800335e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003360:	2300      	movs	r3, #0
 8003362:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003364:	1d3b      	adds	r3, r7, #4
 8003366:	2200      	movs	r2, #0
 8003368:	4619      	mov	r1, r3
 800336a:	480b      	ldr	r0, [pc, #44]	; (8003398 <MX_DAC1_Init+0x70>)
 800336c:	f001 fc38 	bl	8004be0 <HAL_DAC_ConfigChannel>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8003376:	f000 fe2b 	bl	8003fd0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800337a:	1d3b      	adds	r3, r7, #4
 800337c:	2210      	movs	r2, #16
 800337e:	4619      	mov	r1, r3
 8003380:	4805      	ldr	r0, [pc, #20]	; (8003398 <MX_DAC1_Init+0x70>)
 8003382:	f001 fc2d 	bl	8004be0 <HAL_DAC_ConfigChannel>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 800338c:	f000 fe20 	bl	8003fd0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8003390:	bf00      	nop
 8003392:	3728      	adds	r7, #40	; 0x28
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	200002f4 	.word	0x200002f4
 800339c:	40007400 	.word	0x40007400

080033a0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b08a      	sub	sp, #40	; 0x28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a8:	f107 0314 	add.w	r3, r7, #20
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	605a      	str	r2, [r3, #4]
 80033b2:	609a      	str	r2, [r3, #8]
 80033b4:	60da      	str	r2, [r3, #12]
 80033b6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a41      	ldr	r2, [pc, #260]	; (80034c4 <HAL_DAC_MspInit+0x124>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d17c      	bne.n	80034bc <HAL_DAC_MspInit+0x11c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80033c2:	4b41      	ldr	r3, [pc, #260]	; (80034c8 <HAL_DAC_MspInit+0x128>)
 80033c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c6:	4a40      	ldr	r2, [pc, #256]	; (80034c8 <HAL_DAC_MspInit+0x128>)
 80033c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80033cc:	6593      	str	r3, [r2, #88]	; 0x58
 80033ce:	4b3e      	ldr	r3, [pc, #248]	; (80034c8 <HAL_DAC_MspInit+0x128>)
 80033d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033d6:	613b      	str	r3, [r7, #16]
 80033d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033da:	4b3b      	ldr	r3, [pc, #236]	; (80034c8 <HAL_DAC_MspInit+0x128>)
 80033dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033de:	4a3a      	ldr	r2, [pc, #232]	; (80034c8 <HAL_DAC_MspInit+0x128>)
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033e6:	4b38      	ldr	r3, [pc, #224]	; (80034c8 <HAL_DAC_MspInit+0x128>)
 80033e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80033f2:	2330      	movs	r3, #48	; 0x30
 80033f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033f6:	2303      	movs	r3, #3
 80033f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033fe:	f107 0314 	add.w	r3, r7, #20
 8003402:	4619      	mov	r1, r3
 8003404:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003408:	f002 f804 	bl	8005414 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 800340c:	4b2f      	ldr	r3, [pc, #188]	; (80034cc <HAL_DAC_MspInit+0x12c>)
 800340e:	4a30      	ldr	r2, [pc, #192]	; (80034d0 <HAL_DAC_MspInit+0x130>)
 8003410:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8003412:	4b2e      	ldr	r3, [pc, #184]	; (80034cc <HAL_DAC_MspInit+0x12c>)
 8003414:	2206      	movs	r2, #6
 8003416:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003418:	4b2c      	ldr	r3, [pc, #176]	; (80034cc <HAL_DAC_MspInit+0x12c>)
 800341a:	2210      	movs	r2, #16
 800341c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800341e:	4b2b      	ldr	r3, [pc, #172]	; (80034cc <HAL_DAC_MspInit+0x12c>)
 8003420:	2200      	movs	r2, #0
 8003422:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003424:	4b29      	ldr	r3, [pc, #164]	; (80034cc <HAL_DAC_MspInit+0x12c>)
 8003426:	2280      	movs	r2, #128	; 0x80
 8003428:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800342a:	4b28      	ldr	r3, [pc, #160]	; (80034cc <HAL_DAC_MspInit+0x12c>)
 800342c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003430:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003432:	4b26      	ldr	r3, [pc, #152]	; (80034cc <HAL_DAC_MspInit+0x12c>)
 8003434:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003438:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 800343a:	4b24      	ldr	r3, [pc, #144]	; (80034cc <HAL_DAC_MspInit+0x12c>)
 800343c:	2220      	movs	r2, #32
 800343e:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8003440:	4b22      	ldr	r3, [pc, #136]	; (80034cc <HAL_DAC_MspInit+0x12c>)
 8003442:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003446:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8003448:	4820      	ldr	r0, [pc, #128]	; (80034cc <HAL_DAC_MspInit+0x12c>)
 800344a:	f001 fd6d 	bl	8004f28 <HAL_DMA_Init>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8003454:	f000 fdbc 	bl	8003fd0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a1c      	ldr	r2, [pc, #112]	; (80034cc <HAL_DAC_MspInit+0x12c>)
 800345c:	609a      	str	r2, [r3, #8]
 800345e:	4a1b      	ldr	r2, [pc, #108]	; (80034cc <HAL_DAC_MspInit+0x12c>)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 8003464:	4b1b      	ldr	r3, [pc, #108]	; (80034d4 <HAL_DAC_MspInit+0x134>)
 8003466:	4a1c      	ldr	r2, [pc, #112]	; (80034d8 <HAL_DAC_MspInit+0x138>)
 8003468:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 800346a:	4b1a      	ldr	r3, [pc, #104]	; (80034d4 <HAL_DAC_MspInit+0x134>)
 800346c:	2205      	movs	r2, #5
 800346e:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003470:	4b18      	ldr	r3, [pc, #96]	; (80034d4 <HAL_DAC_MspInit+0x134>)
 8003472:	2210      	movs	r2, #16
 8003474:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003476:	4b17      	ldr	r3, [pc, #92]	; (80034d4 <HAL_DAC_MspInit+0x134>)
 8003478:	2200      	movs	r2, #0
 800347a:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800347c:	4b15      	ldr	r3, [pc, #84]	; (80034d4 <HAL_DAC_MspInit+0x134>)
 800347e:	2280      	movs	r2, #128	; 0x80
 8003480:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003482:	4b14      	ldr	r3, [pc, #80]	; (80034d4 <HAL_DAC_MspInit+0x134>)
 8003484:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003488:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800348a:	4b12      	ldr	r3, [pc, #72]	; (80034d4 <HAL_DAC_MspInit+0x134>)
 800348c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003490:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 8003492:	4b10      	ldr	r3, [pc, #64]	; (80034d4 <HAL_DAC_MspInit+0x134>)
 8003494:	2220      	movs	r2, #32
 8003496:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8003498:	4b0e      	ldr	r3, [pc, #56]	; (80034d4 <HAL_DAC_MspInit+0x134>)
 800349a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800349e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 80034a0:	480c      	ldr	r0, [pc, #48]	; (80034d4 <HAL_DAC_MspInit+0x134>)
 80034a2:	f001 fd41 	bl	8004f28 <HAL_DMA_Init>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <HAL_DAC_MspInit+0x110>
    {
      Error_Handler();
 80034ac:	f000 fd90 	bl	8003fd0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac_ch2);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a08      	ldr	r2, [pc, #32]	; (80034d4 <HAL_DAC_MspInit+0x134>)
 80034b4:	60da      	str	r2, [r3, #12]
 80034b6:	4a07      	ldr	r2, [pc, #28]	; (80034d4 <HAL_DAC_MspInit+0x134>)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80034bc:	bf00      	nop
 80034be:	3728      	adds	r7, #40	; 0x28
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40007400 	.word	0x40007400
 80034c8:	40021000 	.word	0x40021000
 80034cc:	20000308 	.word	0x20000308
 80034d0:	40020030 	.word	0x40020030
 80034d4:	20000350 	.word	0x20000350
 80034d8:	40020044 	.word	0x40020044

080034dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80034e2:	4b10      	ldr	r3, [pc, #64]	; (8003524 <MX_DMA_Init+0x48>)
 80034e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034e6:	4a0f      	ldr	r2, [pc, #60]	; (8003524 <MX_DMA_Init+0x48>)
 80034e8:	f043 0301 	orr.w	r3, r3, #1
 80034ec:	6493      	str	r3, [r2, #72]	; 0x48
 80034ee:	4b0d      	ldr	r3, [pc, #52]	; (8003524 <MX_DMA_Init+0x48>)
 80034f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	607b      	str	r3, [r7, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80034fa:	2200      	movs	r2, #0
 80034fc:	2100      	movs	r1, #0
 80034fe:	200d      	movs	r0, #13
 8003500:	f001 fa38 	bl	8004974 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003504:	200d      	movs	r0, #13
 8003506:	f001 fa51 	bl	80049ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800350a:	2200      	movs	r2, #0
 800350c:	2100      	movs	r1, #0
 800350e:	200e      	movs	r0, #14
 8003510:	f001 fa30 	bl	8004974 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003514:	200e      	movs	r0, #14
 8003516:	f001 fa49 	bl	80049ac <HAL_NVIC_EnableIRQ>

}
 800351a:	bf00      	nop
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40021000 	.word	0x40021000

08003528 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800352e:	4b09      	ldr	r3, [pc, #36]	; (8003554 <MX_GPIO_Init+0x2c>)
 8003530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003532:	4a08      	ldr	r2, [pc, #32]	; (8003554 <MX_GPIO_Init+0x2c>)
 8003534:	f043 0301 	orr.w	r3, r3, #1
 8003538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800353a:	4b06      	ldr	r3, [pc, #24]	; (8003554 <MX_GPIO_Init+0x2c>)
 800353c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	607b      	str	r3, [r7, #4]
 8003544:	687b      	ldr	r3, [r7, #4]

}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	40021000 	.word	0x40021000

08003558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003558:	b5b0      	push	{r4, r5, r7, lr}
 800355a:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 800355e:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003560:	f001 f8f3 	bl	800474a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003564:	f000 fac6 	bl	8003af4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003568:	f7ff ffde 	bl	8003528 <MX_GPIO_Init>
  MX_DMA_Init();
 800356c:	f7ff ffb6 	bl	80034dc <MX_DMA_Init>
  MX_DAC1_Init();
 8003570:	f7ff feda 	bl	8003328 <MX_DAC1_Init>
  MX_TIM2_Init();
 8003574:	f000 fef0 	bl	8004358 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8003578:	f000 ff58 	bl	800442c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

   for (int i = 0; i < 9; i++) {
 800357c:	2300      	movs	r3, #0
 800357e:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 8003582:	e011      	b.n	80035a8 <main+0x50>
	   SinData[10+i] = SinData[8-i];
 8003584:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8003588:	f1c3 0208 	rsb	r2, r3, #8
 800358c:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8003590:	330a      	adds	r3, #10
 8003592:	49d7      	ldr	r1, [pc, #860]	; (80038f0 <main+0x398>)
 8003594:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8003598:	4ad5      	ldr	r2, [pc, #852]	; (80038f0 <main+0x398>)
 800359a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for (int i = 0; i < 9; i++) {
 800359e:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 80035a2:	3301      	adds	r3, #1
 80035a4:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 80035a8:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	dde9      	ble.n	8003584 <main+0x2c>
   }
   for (int i = 0; i < 18; i++) {
 80035b0:	2300      	movs	r3, #0
 80035b2:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 80035b6:	e014      	b.n	80035e2 <main+0x8a>
	   SinData[19+i] = 4095 - SinData[i+1];
 80035b8:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 80035bc:	3301      	adds	r3, #1
 80035be:	4acc      	ldr	r2, [pc, #816]	; (80038f0 <main+0x398>)
 80035c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035c4:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 80035c8:	3213      	adds	r2, #19
 80035ca:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 80035ce:	330f      	adds	r3, #15
 80035d0:	b299      	uxth	r1, r3
 80035d2:	4bc7      	ldr	r3, [pc, #796]	; (80038f0 <main+0x398>)
 80035d4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
   for (int i = 0; i < 18; i++) {
 80035d8:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 80035dc:	3301      	adds	r3, #1
 80035de:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 80035e2:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 80035e6:	2b11      	cmp	r3, #17
 80035e8:	dde6      	ble.n	80035b8 <main+0x60>
   }


   for (int i = 0; i < 9; i++) {
 80035ea:	2300      	movs	r3, #0
 80035ec:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 80035f0:	e012      	b.n	8003618 <main+0xc0>
 	   TriData[10+i] = TriData[9+i]+228;
 80035f2:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80035f6:	3309      	adds	r3, #9
 80035f8:	4abe      	ldr	r2, [pc, #760]	; (80038f4 <main+0x39c>)
 80035fa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80035fe:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8003602:	330a      	adds	r3, #10
 8003604:	32e4      	adds	r2, #228	; 0xe4
 8003606:	b291      	uxth	r1, r2
 8003608:	4aba      	ldr	r2, [pc, #744]	; (80038f4 <main+0x39c>)
 800360a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for (int i = 0; i < 9; i++) {
 800360e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8003612:	3301      	adds	r3, #1
 8003614:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 8003618:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 800361c:	2b08      	cmp	r3, #8
 800361e:	dde8      	ble.n	80035f2 <main+0x9a>
   }
   for (int i = 0; i < 18; i++) {
 8003620:	2300      	movs	r3, #0
 8003622:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8003626:	e011      	b.n	800364c <main+0xf4>
	   TriData[19+i] = TriData[17-i];
 8003628:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 800362c:	f1c3 0211 	rsb	r2, r3, #17
 8003630:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8003634:	3313      	adds	r3, #19
 8003636:	49af      	ldr	r1, [pc, #700]	; (80038f4 <main+0x39c>)
 8003638:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800363c:	4aad      	ldr	r2, [pc, #692]	; (80038f4 <main+0x39c>)
 800363e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for (int i = 0; i < 18; i++) {
 8003642:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8003646:	3301      	adds	r3, #1
 8003648:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 800364c:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8003650:	2b11      	cmp	r3, #17
 8003652:	dde9      	ble.n	8003628 <main+0xd0>
   }


   for (int i = 0; i < 27; i++) {
 8003654:	2300      	movs	r3, #0
 8003656:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 800365a:	e012      	b.n	8003682 <main+0x12a>
	   Sawtooth[i+10] = Sawtooth[i+9]+114;
 800365c:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8003660:	3309      	adds	r3, #9
 8003662:	4aa5      	ldr	r2, [pc, #660]	; (80038f8 <main+0x3a0>)
 8003664:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003668:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 800366c:	330a      	adds	r3, #10
 800366e:	3272      	adds	r2, #114	; 0x72
 8003670:	b291      	uxth	r1, r2
 8003672:	4aa1      	ldr	r2, [pc, #644]	; (80038f8 <main+0x3a0>)
 8003674:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   for (int i = 0; i < 27; i++) {
 8003678:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 800367c:	3301      	adds	r3, #1
 800367e:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8003682:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8003686:	2b1a      	cmp	r3, #26
 8003688:	dde8      	ble.n	800365c <main+0x104>
   }

   q15_t outputSignal[N_OUTPUT_SAMPLES];
   q15_t offSet[N_OUTPUT_SAMPLES];

   HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)outputSignal, N_OUTPUT_SAMPLES/2, DAC_ALIGN_12B_R);
 800368a:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 800368e:	2300      	movs	r3, #0
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	2379      	movs	r3, #121	; 0x79
 8003694:	2100      	movs	r1, #0
 8003696:	4899      	ldr	r0, [pc, #612]	; (80038fc <main+0x3a4>)
 8003698:	f001 f9b8 	bl	8004a0c <HAL_DAC_Start_DMA>
   HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t*)offSet, N_OUTPUT_SAMPLES/2, DAC_ALIGN_12B_R);
 800369c:	463a      	mov	r2, r7
 800369e:	2300      	movs	r3, #0
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	2379      	movs	r3, #121	; 0x79
 80036a4:	2110      	movs	r1, #16
 80036a6:	4895      	ldr	r0, [pc, #596]	; (80038fc <main+0x3a4>)
 80036a8:	f001 f9b0 	bl	8004a0c <HAL_DAC_Start_DMA>
   HAL_TIM_Base_Start(&htim2);
 80036ac:	4894      	ldr	r0, [pc, #592]	; (8003900 <main+0x3a8>)
 80036ae:	f003 fa29 	bl	8006b04 <HAL_TIM_Base_Start>

   // Initialize UART2 and receive buffer
   HAL_UART_Receive_IT(&huart2, &RxData, 1);
 80036b2:	2201      	movs	r2, #1
 80036b4:	4993      	ldr	r1, [pc, #588]	; (8003904 <main+0x3ac>)
 80036b6:	4894      	ldr	r0, [pc, #592]	; (8003908 <main+0x3b0>)
 80036b8:	f003 ff12 	bl	80074e0 <HAL_UART_Receive_IT>
   RxIndex = 0;
 80036bc:	4b93      	ldr	r3, [pc, #588]	; (800390c <main+0x3b4>)
 80036be:	2200      	movs	r2, #0
 80036c0:	801a      	strh	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_UART_Receive (&huart2, UART1_rxBuffer, 1,1000);
	  for (int i = 0; i < N_OUTPUT_SAMPLES; i++)
 80036c2:	2300      	movs	r3, #0
 80036c4:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 80036c8:	e1c9      	b.n	8003a5e <main+0x506>
	  {
	     	  float32_t t = i / (float32_t) SAMPLE_RATE;
 80036ca:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 80036ce:	ee07 3a90 	vmov	s15, r3
 80036d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036d6:	eddf 6a8e 	vldr	s13, [pc, #568]	; 8003910 <main+0x3b8>
 80036da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036de:	edc7 7af5 	vstr	s15, [r7, #980]	; 0x3d4
	     	  q31_t x = (q31_t) (t * (N_INPUT_SAMPLES - 1) * (1 << 20));
 80036e2:	edd7 7af5 	vldr	s15, [r7, #980]	; 0x3d4
 80036e6:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8003914 <main+0x3bc>
 80036ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036ee:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8003918 <main+0x3c0>
 80036f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036fa:	ee17 3a90 	vmov	r3, s15
 80036fe:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
	     	  if (Vstate == STOP)
 8003702:	4b86      	ldr	r3, [pc, #536]	; (800391c <main+0x3c4>)
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d112      	bne.n	8003730 <main+0x1d8>
	     	  {
	     		 outputSignal[i] = 0;
 800370a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800370e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8003712:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8003716:	2100      	movs	r1, #0
 8003718:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	     		 offSet[i] = 0;
 800371c:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003720:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8003724:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8003728:	2100      	movs	r1, #0
 800372a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800372e:	e191      	b.n	8003a54 <main+0x4fc>
	     	  } else {
	     		  offSet[i] = roundf(Voffset/6700.0*4095.0);     //
 8003730:	4b7b      	ldr	r3, [pc, #492]	; (8003920 <main+0x3c8>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f7fc ff05 	bl	8000544 <__aeabi_i2d>
 800373a:	a365      	add	r3, pc, #404	; (adr r3, 80038d0 <main+0x378>)
 800373c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003740:	f7fd f894 	bl	800086c <__aeabi_ddiv>
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	4610      	mov	r0, r2
 800374a:	4619      	mov	r1, r3
 800374c:	a362      	add	r3, pc, #392	; (adr r3, 80038d8 <main+0x380>)
 800374e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003752:	f7fc ff61 	bl	8000618 <__aeabi_dmul>
 8003756:	4602      	mov	r2, r0
 8003758:	460b      	mov	r3, r1
 800375a:	4610      	mov	r0, r2
 800375c:	4619      	mov	r1, r3
 800375e:	f7fd fa53 	bl	8000c08 <__aeabi_d2f>
 8003762:	4603      	mov	r3, r0
 8003764:	ee00 3a10 	vmov	s0, r3
 8003768:	f008 ff02 	bl	800c570 <roundf>
 800376c:	eef0 7a40 	vmov.f32	s15, s0
 8003770:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003774:	ee17 3a90 	vmov	r3, s15
 8003778:	b219      	sxth	r1, r3
 800377a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800377e:	f5a3 737c 	sub.w	r3, r3, #1008	; 0x3f0
 8003782:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8003786:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	     		  if (Vtype == DC)
 800378a:	4b66      	ldr	r3, [pc, #408]	; (8003924 <main+0x3cc>)
 800378c:	881b      	ldrh	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d109      	bne.n	80037a6 <main+0x24e>
	     		  {
	     			 outputSignal[i] = 112;
 8003792:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003796:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800379a:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 800379e:	2170      	movs	r1, #112	; 0x70
 80037a0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80037a4:	e156      	b.n	8003a54 <main+0x4fc>
	     		  } else if (Vtype == SIN) {
 80037a6:	4b5f      	ldr	r3, [pc, #380]	; (8003924 <main+0x3cc>)
 80037a8:	881b      	ldrh	r3, [r3, #0]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d140      	bne.n	8003830 <main+0x2d8>
	     			 outputSignal[i] = roundf((arm_linear_interp_q15((const q15_t *)SinData, x, (N_INPUT_SAMPLES)+1000)/1.2)/(5000.0/Vampli));
 80037ae:	f240 420d 	movw	r2, #1037	; 0x40d
 80037b2:	f8d7 13d0 	ldr.w	r1, [r7, #976]	; 0x3d0
 80037b6:	484e      	ldr	r0, [pc, #312]	; (80038f0 <main+0x398>)
 80037b8:	f7fd fc2e 	bl	8001018 <arm_linear_interp_q15>
 80037bc:	4603      	mov	r3, r0
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fc fec0 	bl	8000544 <__aeabi_i2d>
 80037c4:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80037c8:	4b57      	ldr	r3, [pc, #348]	; (8003928 <main+0x3d0>)
 80037ca:	f7fd f84f 	bl	800086c <__aeabi_ddiv>
 80037ce:	4602      	mov	r2, r0
 80037d0:	460b      	mov	r3, r1
 80037d2:	4614      	mov	r4, r2
 80037d4:	461d      	mov	r5, r3
 80037d6:	4b55      	ldr	r3, [pc, #340]	; (800392c <main+0x3d4>)
 80037d8:	881b      	ldrh	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fc feb2 	bl	8000544 <__aeabi_i2d>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	a13e      	add	r1, pc, #248	; (adr r1, 80038e0 <main+0x388>)
 80037e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80037ea:	f7fd f83f 	bl	800086c <__aeabi_ddiv>
 80037ee:	4602      	mov	r2, r0
 80037f0:	460b      	mov	r3, r1
 80037f2:	4620      	mov	r0, r4
 80037f4:	4629      	mov	r1, r5
 80037f6:	f7fd f839 	bl	800086c <__aeabi_ddiv>
 80037fa:	4602      	mov	r2, r0
 80037fc:	460b      	mov	r3, r1
 80037fe:	4610      	mov	r0, r2
 8003800:	4619      	mov	r1, r3
 8003802:	f7fd fa01 	bl	8000c08 <__aeabi_d2f>
 8003806:	4603      	mov	r3, r0
 8003808:	ee00 3a10 	vmov	s0, r3
 800380c:	f008 feb0 	bl	800c570 <roundf>
 8003810:	eef0 7a40 	vmov.f32	s15, s0
 8003814:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003818:	ee17 3a90 	vmov	r3, s15
 800381c:	b219      	sxth	r1, r3
 800381e:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003822:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8003826:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 800382a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800382e:	e111      	b.n	8003a54 <main+0x4fc>
	     		  } else if (Vtype == TRI) {
 8003830:	4b3c      	ldr	r3, [pc, #240]	; (8003924 <main+0x3cc>)
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	2b02      	cmp	r3, #2
 8003836:	d17d      	bne.n	8003934 <main+0x3dc>
	     			 outputSignal[i] = roundf((arm_linear_interp_q15((const q15_t *)TriData, x, N_INPUT_SAMPLES)/1.32+160)/(5000.0/Vampli));
 8003838:	2225      	movs	r2, #37	; 0x25
 800383a:	f8d7 13d0 	ldr.w	r1, [r7, #976]	; 0x3d0
 800383e:	482d      	ldr	r0, [pc, #180]	; (80038f4 <main+0x39c>)
 8003840:	f7fd fbea 	bl	8001018 <arm_linear_interp_q15>
 8003844:	4603      	mov	r3, r0
 8003846:	4618      	mov	r0, r3
 8003848:	f7fc fe7c 	bl	8000544 <__aeabi_i2d>
 800384c:	a326      	add	r3, pc, #152	; (adr r3, 80038e8 <main+0x390>)
 800384e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003852:	f7fd f80b 	bl	800086c <__aeabi_ddiv>
 8003856:	4602      	mov	r2, r0
 8003858:	460b      	mov	r3, r1
 800385a:	4610      	mov	r0, r2
 800385c:	4619      	mov	r1, r3
 800385e:	f04f 0200 	mov.w	r2, #0
 8003862:	4b33      	ldr	r3, [pc, #204]	; (8003930 <main+0x3d8>)
 8003864:	f7fc fd22 	bl	80002ac <__adddf3>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4614      	mov	r4, r2
 800386e:	461d      	mov	r5, r3
 8003870:	4b2e      	ldr	r3, [pc, #184]	; (800392c <main+0x3d4>)
 8003872:	881b      	ldrh	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f7fc fe65 	bl	8000544 <__aeabi_i2d>
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	a118      	add	r1, pc, #96	; (adr r1, 80038e0 <main+0x388>)
 8003880:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003884:	f7fc fff2 	bl	800086c <__aeabi_ddiv>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	4620      	mov	r0, r4
 800388e:	4629      	mov	r1, r5
 8003890:	f7fc ffec 	bl	800086c <__aeabi_ddiv>
 8003894:	4602      	mov	r2, r0
 8003896:	460b      	mov	r3, r1
 8003898:	4610      	mov	r0, r2
 800389a:	4619      	mov	r1, r3
 800389c:	f7fd f9b4 	bl	8000c08 <__aeabi_d2f>
 80038a0:	4603      	mov	r3, r0
 80038a2:	ee00 3a10 	vmov	s0, r3
 80038a6:	f008 fe63 	bl	800c570 <roundf>
 80038aa:	eef0 7a40 	vmov.f32	s15, s0
 80038ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038b2:	ee17 3a90 	vmov	r3, s15
 80038b6:	b219      	sxth	r1, r3
 80038b8:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80038bc:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80038c0:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 80038c4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80038c8:	e0c4      	b.n	8003a54 <main+0x4fc>
 80038ca:	bf00      	nop
 80038cc:	f3af 8000 	nop.w
 80038d0:	00000000 	.word	0x00000000
 80038d4:	40ba2c00 	.word	0x40ba2c00
 80038d8:	00000000 	.word	0x00000000
 80038dc:	40affe00 	.word	0x40affe00
 80038e0:	00000000 	.word	0x00000000
 80038e4:	40b38800 	.word	0x40b38800
 80038e8:	51eb851f 	.word	0x51eb851f
 80038ec:	3ff51eb8 	.word	0x3ff51eb8
 80038f0:	2000000c 	.word	0x2000000c
 80038f4:	20000058 	.word	0x20000058
 80038f8:	200000a4 	.word	0x200000a4
 80038fc:	200002f4 	.word	0x200002f4
 8003900:	200004fc 	.word	0x200004fc
 8003904:	2000049a 	.word	0x2000049a
 8003908:	20000548 	.word	0x20000548
 800390c:	20000498 	.word	0x20000498
 8003910:	43730000 	.word	0x43730000
 8003914:	42100000 	.word	0x42100000
 8003918:	49800000 	.word	0x49800000
 800391c:	2000049c 	.word	0x2000049c
 8003920:	200004a8 	.word	0x200004a8
 8003924:	2000049e 	.word	0x2000049e
 8003928:	3ff33333 	.word	0x3ff33333
 800392c:	200004a0 	.word	0x200004a0
 8003930:	40640000 	.word	0x40640000
	     		  } else if (Vtype == SAW) {
 8003934:	4b68      	ldr	r3, [pc, #416]	; (8003ad8 <main+0x580>)
 8003936:	881b      	ldrh	r3, [r3, #0]
 8003938:	2b03      	cmp	r3, #3
 800393a:	d148      	bne.n	80039ce <main+0x476>
	     			 outputSignal[i] = roundf((arm_linear_interp_q15((const q15_t *)Sawtooth, x, N_INPUT_SAMPLES)/1.32+160)/(5000.0/Vampli));
 800393c:	2225      	movs	r2, #37	; 0x25
 800393e:	f8d7 13d0 	ldr.w	r1, [r7, #976]	; 0x3d0
 8003942:	4866      	ldr	r0, [pc, #408]	; (8003adc <main+0x584>)
 8003944:	f7fd fb68 	bl	8001018 <arm_linear_interp_q15>
 8003948:	4603      	mov	r3, r0
 800394a:	4618      	mov	r0, r3
 800394c:	f7fc fdfa 	bl	8000544 <__aeabi_i2d>
 8003950:	a359      	add	r3, pc, #356	; (adr r3, 8003ab8 <main+0x560>)
 8003952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003956:	f7fc ff89 	bl	800086c <__aeabi_ddiv>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4610      	mov	r0, r2
 8003960:	4619      	mov	r1, r3
 8003962:	f04f 0200 	mov.w	r2, #0
 8003966:	4b5e      	ldr	r3, [pc, #376]	; (8003ae0 <main+0x588>)
 8003968:	f7fc fca0 	bl	80002ac <__adddf3>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4614      	mov	r4, r2
 8003972:	461d      	mov	r5, r3
 8003974:	4b5b      	ldr	r3, [pc, #364]	; (8003ae4 <main+0x58c>)
 8003976:	881b      	ldrh	r3, [r3, #0]
 8003978:	4618      	mov	r0, r3
 800397a:	f7fc fde3 	bl	8000544 <__aeabi_i2d>
 800397e:	4602      	mov	r2, r0
 8003980:	460b      	mov	r3, r1
 8003982:	a14f      	add	r1, pc, #316	; (adr r1, 8003ac0 <main+0x568>)
 8003984:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003988:	f7fc ff70 	bl	800086c <__aeabi_ddiv>
 800398c:	4602      	mov	r2, r0
 800398e:	460b      	mov	r3, r1
 8003990:	4620      	mov	r0, r4
 8003992:	4629      	mov	r1, r5
 8003994:	f7fc ff6a 	bl	800086c <__aeabi_ddiv>
 8003998:	4602      	mov	r2, r0
 800399a:	460b      	mov	r3, r1
 800399c:	4610      	mov	r0, r2
 800399e:	4619      	mov	r1, r3
 80039a0:	f7fd f932 	bl	8000c08 <__aeabi_d2f>
 80039a4:	4603      	mov	r3, r0
 80039a6:	ee00 3a10 	vmov	s0, r3
 80039aa:	f008 fde1 	bl	800c570 <roundf>
 80039ae:	eef0 7a40 	vmov.f32	s15, s0
 80039b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039b6:	ee17 3a90 	vmov	r3, s15
 80039ba:	b219      	sxth	r1, r3
 80039bc:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80039c0:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80039c4:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 80039c8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80039cc:	e042      	b.n	8003a54 <main+0x4fc>
	     		  } else if (Vtype == SQUARE) {
 80039ce:	4b42      	ldr	r3, [pc, #264]	; (8003ad8 <main+0x580>)
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d13e      	bne.n	8003a54 <main+0x4fc>
	     			  if (i < N_OUTPUT_SAMPLES/2) {
 80039d6:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 80039da:	2b78      	cmp	r3, #120	; 0x78
 80039dc:	dc31      	bgt.n	8003a42 <main+0x4ea>
	     				 outputSignal[i] = roundf(3070/(5000.0/Vampli))+190;
 80039de:	4b41      	ldr	r3, [pc, #260]	; (8003ae4 <main+0x58c>)
 80039e0:	881b      	ldrh	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fc fdae 	bl	8000544 <__aeabi_i2d>
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	a134      	add	r1, pc, #208	; (adr r1, 8003ac0 <main+0x568>)
 80039ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80039f2:	f7fc ff3b 	bl	800086c <__aeabi_ddiv>
 80039f6:	4602      	mov	r2, r0
 80039f8:	460b      	mov	r3, r1
 80039fa:	a133      	add	r1, pc, #204	; (adr r1, 8003ac8 <main+0x570>)
 80039fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a00:	f7fc ff34 	bl	800086c <__aeabi_ddiv>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	4610      	mov	r0, r2
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	f7fd f8fc 	bl	8000c08 <__aeabi_d2f>
 8003a10:	4603      	mov	r3, r0
 8003a12:	ee00 3a10 	vmov	s0, r3
 8003a16:	f008 fdab 	bl	800c570 <roundf>
 8003a1a:	eef0 7a40 	vmov.f32	s15, s0
 8003a1e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8003ae8 <main+0x590>
 8003a22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a2a:	ee17 3a90 	vmov	r3, s15
 8003a2e:	b219      	sxth	r1, r3
 8003a30:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003a34:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8003a38:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8003a3c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8003a40:	e008      	b.n	8003a54 <main+0x4fc>
	     			  } else {
	     				 outputSignal[i] = 190;
 8003a42:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8003a46:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8003a4a:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8003a4e:	21be      	movs	r1, #190	; 0xbe
 8003a50:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  for (int i = 0; i < N_OUTPUT_SAMPLES; i++)
 8003a54:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8003a58:	3301      	adds	r3, #1
 8003a5a:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 8003a5e:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8003a62:	2bf2      	cmp	r3, #242	; 0xf2
 8003a64:	f77f ae31 	ble.w	80036ca <main+0x172>
	     		  }
	     	  }
	   }


	   htim2.Init.Period = roundf(13.0*max_freq/Vfreq)-1;
 8003a68:	4b20      	ldr	r3, [pc, #128]	; (8003aec <main+0x594>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7fc fd59 	bl	8000524 <__aeabi_ui2d>
 8003a72:	4602      	mov	r2, r0
 8003a74:	460b      	mov	r3, r1
 8003a76:	a116      	add	r1, pc, #88	; (adr r1, 8003ad0 <main+0x578>)
 8003a78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a7c:	f7fc fef6 	bl	800086c <__aeabi_ddiv>
 8003a80:	4602      	mov	r2, r0
 8003a82:	460b      	mov	r3, r1
 8003a84:	4610      	mov	r0, r2
 8003a86:	4619      	mov	r1, r3
 8003a88:	f7fd f8be 	bl	8000c08 <__aeabi_d2f>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	ee00 3a10 	vmov	s0, r3
 8003a92:	f008 fd6d 	bl	800c570 <roundf>
 8003a96:	eef0 7a40 	vmov.f32	s15, s0
 8003a9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003aa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aa6:	ee17 2a90 	vmov	r2, s15
 8003aaa:	4b11      	ldr	r3, [pc, #68]	; (8003af0 <main+0x598>)
 8003aac:	60da      	str	r2, [r3, #12]
	   // Apply the changes to the TIM2 configuration
	   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003aae:	4810      	ldr	r0, [pc, #64]	; (8003af0 <main+0x598>)
 8003ab0:	f002 ffd0 	bl	8006a54 <HAL_TIM_Base_Init>
	  for (int i = 0; i < N_OUTPUT_SAMPLES; i++)
 8003ab4:	e605      	b.n	80036c2 <main+0x16a>
 8003ab6:	bf00      	nop
 8003ab8:	51eb851f 	.word	0x51eb851f
 8003abc:	3ff51eb8 	.word	0x3ff51eb8
 8003ac0:	00000000 	.word	0x00000000
 8003ac4:	40b38800 	.word	0x40b38800
 8003ac8:	00000000 	.word	0x00000000
 8003acc:	40a7fc00 	.word	0x40a7fc00
 8003ad0:	00000000 	.word	0x00000000
 8003ad4:	4123d620 	.word	0x4123d620
 8003ad8:	2000049e 	.word	0x2000049e
 8003adc:	200000a4 	.word	0x200000a4
 8003ae0:	40640000 	.word	0x40640000
 8003ae4:	200004a0 	.word	0x200004a0
 8003ae8:	433e0000 	.word	0x433e0000
 8003aec:	200004a4 	.word	0x200004a4
 8003af0:	200004fc 	.word	0x200004fc

08003af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b096      	sub	sp, #88	; 0x58
 8003af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003afa:	f107 0314 	add.w	r3, r7, #20
 8003afe:	2244      	movs	r2, #68	; 0x44
 8003b00:	2100      	movs	r1, #0
 8003b02:	4618      	mov	r0, r3
 8003b04:	f004 fffc 	bl	8008b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b08:	463b      	mov	r3, r7
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	605a      	str	r2, [r3, #4]
 8003b10:	609a      	str	r2, [r3, #8]
 8003b12:	60da      	str	r2, [r3, #12]
 8003b14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003b16:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003b1a:	f001 fdf3 	bl	8005704 <HAL_PWREx_ControlVoltageScaling>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003b24:	f000 fa54 	bl	8003fd0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003b28:	2310      	movs	r3, #16
 8003b2a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003b30:	2300      	movs	r3, #0
 8003b32:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003b34:	2360      	movs	r3, #96	; 0x60
 8003b36:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b38:	2302      	movs	r3, #2
 8003b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003b40:	2301      	movs	r3, #1
 8003b42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003b44:	2328      	movs	r3, #40	; 0x28
 8003b46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003b48:	2307      	movs	r3, #7
 8003b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003b50:	2302      	movs	r3, #2
 8003b52:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b54:	f107 0314 	add.w	r3, r7, #20
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f001 fe29 	bl	80057b0 <HAL_RCC_OscConfig>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8003b64:	f000 fa34 	bl	8003fd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b68:	230f      	movs	r3, #15
 8003b6a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b70:	2300      	movs	r3, #0
 8003b72:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b74:	2300      	movs	r3, #0
 8003b76:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003b7c:	463b      	mov	r3, r7
 8003b7e:	2104      	movs	r1, #4
 8003b80:	4618      	mov	r0, r3
 8003b82:	f002 fa29 	bl	8005fd8 <HAL_RCC_ClockConfig>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003b8c:	f000 fa20 	bl	8003fd0 <Error_Handler>
  }
}
 8003b90:	bf00      	nop
 8003b92:	3758      	adds	r7, #88	; 0x58
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <json_transmit>:
/**
  * @Transmit JSON code to display current state
  * @retval None
  */
void json_transmit(char* command, char* state, char* waveType, uint32_t actualSignalFreq, uint16_t actualVpp, uint16_t actualVOffset)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b090      	sub	sp, #64	; 0x40
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
 8003ba4:	603b      	str	r3, [r7, #0]
	// Create the JSON object and arrays
	cJSON *root = cJSON_CreateObject();
 8003ba6:	f7ff fb7d 	bl	80032a4 <cJSON_CreateObject>
 8003baa:	63f8      	str	r0, [r7, #60]	; 0x3c
	cJSON *awg = cJSON_CreateObject();
 8003bac:	f7ff fb7a 	bl	80032a4 <cJSON_CreateObject>
 8003bb0:	63b8      	str	r0, [r7, #56]	; 0x38
	cJSON_AddItemToObject(root, "awg", awg);
 8003bb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bb4:	4941      	ldr	r1, [pc, #260]	; (8003cbc <json_transmit+0x124>)
 8003bb6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003bb8:	f7ff fada 	bl	8003170 <cJSON_AddItemToObject>

	cJSON *array1 = cJSON_CreateArray();
 8003bbc:	f7ff fb5e 	bl	800327c <cJSON_CreateArray>
 8003bc0:	6378      	str	r0, [r7, #52]	; 0x34
	cJSON_AddItemToObject(awg, "1", array1);
 8003bc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bc4:	493e      	ldr	r1, [pc, #248]	; (8003cc0 <json_transmit+0x128>)
 8003bc6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003bc8:	f7ff fad2 	bl	8003170 <cJSON_AddItemToObject>

	cJSON *command_json = cJSON_CreateString(command);
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f7ff fb2f 	bl	8003230 <cJSON_CreateString>
 8003bd2:	6338      	str	r0, [r7, #48]	; 0x30
	cJSON *state_json = cJSON_CreateString(state);
 8003bd4:	68b8      	ldr	r0, [r7, #8]
 8003bd6:	f7ff fb2b 	bl	8003230 <cJSON_CreateString>
 8003bda:	62f8      	str	r0, [r7, #44]	; 0x2c
	cJSON *waveType_json = cJSON_CreateString(waveType);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7ff fb27 	bl	8003230 <cJSON_CreateString>
 8003be2:	62b8      	str	r0, [r7, #40]	; 0x28
	cJSON *actualSignalFreq_json = cJSON_CreateNumber(actualSignalFreq);
 8003be4:	6838      	ldr	r0, [r7, #0]
 8003be6:	f7fc fc9d 	bl	8000524 <__aeabi_ui2d>
 8003bea:	4602      	mov	r2, r0
 8003bec:	460b      	mov	r3, r1
 8003bee:	ec43 2b10 	vmov	d0, r2, r3
 8003bf2:	f7ff fad5 	bl	80031a0 <cJSON_CreateNumber>
 8003bf6:	6278      	str	r0, [r7, #36]	; 0x24
	cJSON *actualVpp_json = cJSON_CreateNumber(actualVpp);
 8003bf8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7fc fc91 	bl	8000524 <__aeabi_ui2d>
 8003c02:	4602      	mov	r2, r0
 8003c04:	460b      	mov	r3, r1
 8003c06:	ec43 2b10 	vmov	d0, r2, r3
 8003c0a:	f7ff fac9 	bl	80031a0 <cJSON_CreateNumber>
 8003c0e:	6238      	str	r0, [r7, #32]
	cJSON *actualVOffset_json = cJSON_CreateNumber(actualVOffset);
 8003c10:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7fc fc85 	bl	8000524 <__aeabi_ui2d>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	ec43 2b10 	vmov	d0, r2, r3
 8003c22:	f7ff fabd 	bl	80031a0 <cJSON_CreateNumber>
 8003c26:	61f8      	str	r0, [r7, #28]

	// Add the items to the array
	cJSON *item = cJSON_CreateObject();
 8003c28:	f7ff fb3c 	bl	80032a4 <cJSON_CreateObject>
 8003c2c:	61b8      	str	r0, [r7, #24]
	cJSON_AddItemToObject(item, "command", command_json);
 8003c2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c30:	4924      	ldr	r1, [pc, #144]	; (8003cc4 <json_transmit+0x12c>)
 8003c32:	69b8      	ldr	r0, [r7, #24]
 8003c34:	f7ff fa9c 	bl	8003170 <cJSON_AddItemToObject>
	cJSON_AddItemToObject(item, "state", state_json);
 8003c38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c3a:	4923      	ldr	r1, [pc, #140]	; (8003cc8 <json_transmit+0x130>)
 8003c3c:	69b8      	ldr	r0, [r7, #24]
 8003c3e:	f7ff fa97 	bl	8003170 <cJSON_AddItemToObject>
	cJSON_AddItemToObject(item, "waveType", waveType_json);
 8003c42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c44:	4921      	ldr	r1, [pc, #132]	; (8003ccc <json_transmit+0x134>)
 8003c46:	69b8      	ldr	r0, [r7, #24]
 8003c48:	f7ff fa92 	bl	8003170 <cJSON_AddItemToObject>
	cJSON_AddItemToObject(item, "actualSignalFreq", actualSignalFreq_json);
 8003c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c4e:	4920      	ldr	r1, [pc, #128]	; (8003cd0 <json_transmit+0x138>)
 8003c50:	69b8      	ldr	r0, [r7, #24]
 8003c52:	f7ff fa8d 	bl	8003170 <cJSON_AddItemToObject>
	cJSON_AddItemToObject(item, "actualVpp", actualVpp_json);
 8003c56:	6a3a      	ldr	r2, [r7, #32]
 8003c58:	491e      	ldr	r1, [pc, #120]	; (8003cd4 <json_transmit+0x13c>)
 8003c5a:	69b8      	ldr	r0, [r7, #24]
 8003c5c:	f7ff fa88 	bl	8003170 <cJSON_AddItemToObject>
    cJSON_AddItemToObject(item, "actualVOffset", actualVOffset_json);
 8003c60:	69fa      	ldr	r2, [r7, #28]
 8003c62:	491d      	ldr	r1, [pc, #116]	; (8003cd8 <json_transmit+0x140>)
 8003c64:	69b8      	ldr	r0, [r7, #24]
 8003c66:	f7ff fa83 	bl	8003170 <cJSON_AddItemToObject>
    cJSON_AddItemToArray(array1, item);
 8003c6a:	69b9      	ldr	r1, [r7, #24]
 8003c6c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003c6e:	f7ff fa11 	bl	8003094 <cJSON_AddItemToArray>

    // Print the JSON object
    char *jsonString = cJSON_Print(root);
 8003c72:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003c74:	f7fe fbf2 	bl	800245c <cJSON_Print>
 8003c78:	6178      	str	r0, [r7, #20]
    strcat(jsonString, "\r");  // add newline character
 8003c7a:	6978      	ldr	r0, [r7, #20]
 8003c7c:	f7fc fab2 	bl	80001e4 <strlen>
 8003c80:	4603      	mov	r3, r0
 8003c82:	461a      	mov	r2, r3
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	4413      	add	r3, r2
 8003c88:	4914      	ldr	r1, [pc, #80]	; (8003cdc <json_transmit+0x144>)
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	881b      	ldrh	r3, [r3, #0]
 8003c90:	8013      	strh	r3, [r2, #0]
    HAL_UART_Transmit_IT(&huart2, (uint8_t *)jsonString, strlen(jsonString));
 8003c92:	6978      	ldr	r0, [r7, #20]
 8003c94:	f7fc faa6 	bl	80001e4 <strlen>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	6979      	ldr	r1, [r7, #20]
 8003ca0:	480f      	ldr	r0, [pc, #60]	; (8003ce0 <json_transmit+0x148>)
 8003ca2:	f003 fbaf 	bl	8007404 <HAL_UART_Transmit_IT>

	// Free the allocated memory
	cJSON_Delete(root);
 8003ca6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003ca8:	f7fd fb16 	bl	80012d8 <cJSON_Delete>
	free(jsonString);
 8003cac:	6978      	ldr	r0, [r7, #20]
 8003cae:	f004 ff11 	bl	8008ad4 <free>
}
 8003cb2:	bf00      	nop
 8003cb4:	3740      	adds	r7, #64	; 0x40
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	0800c61c 	.word	0x0800c61c
 8003cc0:	0800c620 	.word	0x0800c620
 8003cc4:	0800c624 	.word	0x0800c624
 8003cc8:	0800c62c 	.word	0x0800c62c
 8003ccc:	0800c634 	.word	0x0800c634
 8003cd0:	0800c640 	.word	0x0800c640
 8003cd4:	0800c654 	.word	0x0800c654
 8003cd8:	0800c660 	.word	0x0800c660
 8003cdc:	0800c670 	.word	0x0800c670
 8003ce0:	20000548 	.word	0x20000548

08003ce4 <HAL_UART_RxCpltCallback>:
/**
  * @UART receive call back function
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
    if (UartHandle->Instance == USART2)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a18      	ldr	r2, [pc, #96]	; (8003d54 <HAL_UART_RxCpltCallback+0x70>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d12a      	bne.n	8003d4c <HAL_UART_RxCpltCallback+0x68>
	{
    	if (RxIndex < RX_BUFFER_SIZE - 1) // Check if buffer has space
 8003cf6:	4b18      	ldr	r3, [pc, #96]	; (8003d58 <HAL_UART_RxCpltCallback+0x74>)
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	2bfe      	cmp	r3, #254	; 0xfe
 8003cfc:	d81e      	bhi.n	8003d3c <HAL_UART_RxCpltCallback+0x58>
    	    {
    	      if (RxData == '\n') // Check for end of message
 8003cfe:	4b17      	ldr	r3, [pc, #92]	; (8003d5c <HAL_UART_RxCpltCallback+0x78>)
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	2b0a      	cmp	r3, #10
 8003d04:	d10c      	bne.n	8003d20 <HAL_UART_RxCpltCallback+0x3c>
    	      {
    	        RxBuffer[RxIndex] = '\0'; // Add null terminator to end of message
 8003d06:	4b14      	ldr	r3, [pc, #80]	; (8003d58 <HAL_UART_RxCpltCallback+0x74>)
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	4b14      	ldr	r3, [pc, #80]	; (8003d60 <HAL_UART_RxCpltCallback+0x7c>)
 8003d0e:	2100      	movs	r1, #0
 8003d10:	5499      	strb	r1, [r3, r2]
    	        process_message((char*)RxBuffer); // Process message
 8003d12:	4813      	ldr	r0, [pc, #76]	; (8003d60 <HAL_UART_RxCpltCallback+0x7c>)
 8003d14:	f000 f828 	bl	8003d68 <process_message>
    	        RxIndex = 0; // Reset buffer index for next message
 8003d18:	4b0f      	ldr	r3, [pc, #60]	; (8003d58 <HAL_UART_RxCpltCallback+0x74>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	801a      	strh	r2, [r3, #0]
 8003d1e:	e010      	b.n	8003d42 <HAL_UART_RxCpltCallback+0x5e>
    	      }
    	      else // If not end of message, add data to buffer
    	      {
    	        RxBuffer[RxIndex] = RxData;
 8003d20:	4b0d      	ldr	r3, [pc, #52]	; (8003d58 <HAL_UART_RxCpltCallback+0x74>)
 8003d22:	881b      	ldrh	r3, [r3, #0]
 8003d24:	461a      	mov	r2, r3
 8003d26:	4b0d      	ldr	r3, [pc, #52]	; (8003d5c <HAL_UART_RxCpltCallback+0x78>)
 8003d28:	7819      	ldrb	r1, [r3, #0]
 8003d2a:	4b0d      	ldr	r3, [pc, #52]	; (8003d60 <HAL_UART_RxCpltCallback+0x7c>)
 8003d2c:	5499      	strb	r1, [r3, r2]
    	        RxIndex++;
 8003d2e:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <HAL_UART_RxCpltCallback+0x74>)
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	3301      	adds	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	4b08      	ldr	r3, [pc, #32]	; (8003d58 <HAL_UART_RxCpltCallback+0x74>)
 8003d38:	801a      	strh	r2, [r3, #0]
 8003d3a:	e002      	b.n	8003d42 <HAL_UART_RxCpltCallback+0x5e>
    	      }
    	    }
    	    else // If buffer is full, reset buffer index and ignore message
    	    {
    	      RxIndex = 0;
 8003d3c:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <HAL_UART_RxCpltCallback+0x74>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	801a      	strh	r2, [r3, #0]
    	    }
    	    HAL_UART_Receive_IT(&huart2, &RxData, 1); // Restart interrupt-based receive
 8003d42:	2201      	movs	r2, #1
 8003d44:	4905      	ldr	r1, [pc, #20]	; (8003d5c <HAL_UART_RxCpltCallback+0x78>)
 8003d46:	4807      	ldr	r0, [pc, #28]	; (8003d64 <HAL_UART_RxCpltCallback+0x80>)
 8003d48:	f003 fbca 	bl	80074e0 <HAL_UART_Receive_IT>
    }
}
 8003d4c:	bf00      	nop
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40004400 	.word	0x40004400
 8003d58:	20000498 	.word	0x20000498
 8003d5c:	2000049a 	.word	0x2000049a
 8003d60:	20000398 	.word	0x20000398
 8003d64:	20000548 	.word	0x20000548

08003d68 <process_message>:

void process_message(char* message)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b092      	sub	sp, #72	; 0x48
 8003d6c:	af02      	add	r7, sp, #8
 8003d6e:	6078      	str	r0, [r7, #4]
	// Parse the JSON string
	cJSON *root = cJSON_Parse(message);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7fe fae1 	bl	8002338 <cJSON_Parse>
 8003d76:	6378      	str	r0, [r7, #52]	; 0x34

    // Get the "awg" object
    cJSON *awg = cJSON_GetObjectItemCaseSensitive(root, "awg");
 8003d78:	4972      	ldr	r1, [pc, #456]	; (8003f44 <process_message+0x1dc>)
 8003d7a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003d7c:	f7ff f934 	bl	8002fe8 <cJSON_GetObjectItemCaseSensitive>
 8003d80:	6338      	str	r0, [r7, #48]	; 0x30

    // Get the "1" array
    cJSON *awg_1 = cJSON_GetObjectItemCaseSensitive(awg, "1");
 8003d82:	4971      	ldr	r1, [pc, #452]	; (8003f48 <process_message+0x1e0>)
 8003d84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d86:	f7ff f92f 	bl	8002fe8 <cJSON_GetObjectItemCaseSensitive>
 8003d8a:	62f8      	str	r0, [r7, #44]	; 0x2c

    // Get the first object in the array
    cJSON *awg_1_0 = cJSON_GetArrayItem(awg_1, 0);
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d90:	f7ff f8ce 	bl	8002f30 <cJSON_GetArrayItem>
 8003d94:	62b8      	str	r0, [r7, #40]	; 0x28

    // Get the "signalType" string
    cJSON *command = cJSON_GetObjectItemCaseSensitive(awg_1_0, "command");
 8003d96:	496d      	ldr	r1, [pc, #436]	; (8003f4c <process_message+0x1e4>)
 8003d98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d9a:	f7ff f925 	bl	8002fe8 <cJSON_GetObjectItemCaseSensitive>
 8003d9e:	6278      	str	r0, [r7, #36]	; 0x24
    char *command_str = cJSON_GetStringValue(command);
 8003da0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003da2:	f7fd f9c1 	bl	8001128 <cJSON_GetStringValue>
 8003da6:	6238      	str	r0, [r7, #32]
    if (strcmp(command_str, "getCurrentState") == 0)
 8003da8:	4969      	ldr	r1, [pc, #420]	; (8003f50 <process_message+0x1e8>)
 8003daa:	6a38      	ldr	r0, [r7, #32]
 8003dac:	f7fc fa10 	bl	80001d0 <strcmp>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d136      	bne.n	8003e24 <process_message+0xbc>
    {
    	char* currentState;
    	char* currentWave;

    	if (Vstate == STOP)
 8003db6:	4b67      	ldr	r3, [pc, #412]	; (8003f54 <process_message+0x1ec>)
 8003db8:	881b      	ldrh	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d102      	bne.n	8003dc4 <process_message+0x5c>
    	{
    		currentState = "idle";
 8003dbe:	4b66      	ldr	r3, [pc, #408]	; (8003f58 <process_message+0x1f0>)
 8003dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dc2:	e001      	b.n	8003dc8 <process_message+0x60>
    	} else
    	{
    		currentState = "running";
 8003dc4:	4b65      	ldr	r3, [pc, #404]	; (8003f5c <process_message+0x1f4>)
 8003dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
    	}

    	if (Vtype == SQUARE)
 8003dc8:	4b65      	ldr	r3, [pc, #404]	; (8003f60 <process_message+0x1f8>)
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	2b04      	cmp	r3, #4
 8003dce:	d102      	bne.n	8003dd6 <process_message+0x6e>
    	{
    		currentWave = "square";
 8003dd0:	4b64      	ldr	r3, [pc, #400]	; (8003f64 <process_message+0x1fc>)
 8003dd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dd4:	e016      	b.n	8003e04 <process_message+0x9c>
    	} else if (Vtype == SIN)
 8003dd6:	4b62      	ldr	r3, [pc, #392]	; (8003f60 <process_message+0x1f8>)
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d102      	bne.n	8003de4 <process_message+0x7c>
    	{
    		currentWave = "sine";
 8003dde:	4b62      	ldr	r3, [pc, #392]	; (8003f68 <process_message+0x200>)
 8003de0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003de2:	e00f      	b.n	8003e04 <process_message+0x9c>
    	} else if (Vtype == TRI)
 8003de4:	4b5e      	ldr	r3, [pc, #376]	; (8003f60 <process_message+0x1f8>)
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d102      	bne.n	8003df2 <process_message+0x8a>
    	{
    		currentWave = "triangle";
 8003dec:	4b5f      	ldr	r3, [pc, #380]	; (8003f6c <process_message+0x204>)
 8003dee:	63bb      	str	r3, [r7, #56]	; 0x38
 8003df0:	e008      	b.n	8003e04 <process_message+0x9c>
    	} else if (Vtype == SAW)
 8003df2:	4b5b      	ldr	r3, [pc, #364]	; (8003f60 <process_message+0x1f8>)
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	2b03      	cmp	r3, #3
 8003df8:	d102      	bne.n	8003e00 <process_message+0x98>
    	{
    		currentWave = "sawtooth";
 8003dfa:	4b5d      	ldr	r3, [pc, #372]	; (8003f70 <process_message+0x208>)
 8003dfc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dfe:	e001      	b.n	8003e04 <process_message+0x9c>
    	} else
    	{
    		currentWave = "DC";
 8003e00:	4b5c      	ldr	r3, [pc, #368]	; (8003f74 <process_message+0x20c>)
 8003e02:	63bb      	str	r3, [r7, #56]	; 0x38
    	}

    	json_transmit("getCurrentState", currentState, currentWave, Vfreq, Vampli, Voffset);
 8003e04:	4b5c      	ldr	r3, [pc, #368]	; (8003f78 <process_message+0x210>)
 8003e06:	6819      	ldr	r1, [r3, #0]
 8003e08:	4b5c      	ldr	r3, [pc, #368]	; (8003f7c <process_message+0x214>)
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	4a5c      	ldr	r2, [pc, #368]	; (8003f80 <process_message+0x218>)
 8003e0e:	6812      	ldr	r2, [r2, #0]
 8003e10:	b292      	uxth	r2, r2
 8003e12:	9201      	str	r2, [sp, #4]
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	460b      	mov	r3, r1
 8003e18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e1c:	484c      	ldr	r0, [pc, #304]	; (8003f50 <process_message+0x1e8>)
 8003e1e:	f7ff febb 	bl	8003b98 <json_transmit>
 8003e22:	e087      	b.n	8003f34 <process_message+0x1cc>

    } else if (strcmp(command_str, "stop") == 0)
 8003e24:	4957      	ldr	r1, [pc, #348]	; (8003f84 <process_message+0x21c>)
 8003e26:	6a38      	ldr	r0, [r7, #32]
 8003e28:	f7fc f9d2 	bl	80001d0 <strcmp>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d103      	bne.n	8003e3a <process_message+0xd2>
    {
    	Vstate = STOP;
 8003e32:	4b48      	ldr	r3, [pc, #288]	; (8003f54 <process_message+0x1ec>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	801a      	strh	r2, [r3, #0]
 8003e38:	e07c      	b.n	8003f34 <process_message+0x1cc>
    } else if (strcmp(command_str, "setRegularWaveform") == 0)
 8003e3a:	4953      	ldr	r1, [pc, #332]	; (8003f88 <process_message+0x220>)
 8003e3c:	6a38      	ldr	r0, [r7, #32]
 8003e3e:	f7fc f9c7 	bl	80001d0 <strcmp>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d175      	bne.n	8003f34 <process_message+0x1cc>
    {
    	Vstate = RUN;
 8003e48:	4b42      	ldr	r3, [pc, #264]	; (8003f54 <process_message+0x1ec>)
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	801a      	strh	r2, [r3, #0]

    	// Get the "signalType" string
    	cJSON *signalType = cJSON_GetObjectItemCaseSensitive(awg_1_0, "signalType");
 8003e4e:	494f      	ldr	r1, [pc, #316]	; (8003f8c <process_message+0x224>)
 8003e50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e52:	f7ff f8c9 	bl	8002fe8 <cJSON_GetObjectItemCaseSensitive>
 8003e56:	61f8      	str	r0, [r7, #28]
        char *signalType_str = cJSON_GetStringValue(signalType);
 8003e58:	69f8      	ldr	r0, [r7, #28]
 8003e5a:	f7fd f965 	bl	8001128 <cJSON_GetStringValue>
 8003e5e:	61b8      	str	r0, [r7, #24]
        if (strcmp(signalType_str, "DC") == 0)
 8003e60:	4944      	ldr	r1, [pc, #272]	; (8003f74 <process_message+0x20c>)
 8003e62:	69b8      	ldr	r0, [r7, #24]
 8003e64:	f7fc f9b4 	bl	80001d0 <strcmp>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d103      	bne.n	8003e76 <process_message+0x10e>
        {
        	Vtype = DC;
 8003e6e:	4b3c      	ldr	r3, [pc, #240]	; (8003f60 <process_message+0x1f8>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	801a      	strh	r2, [r3, #0]
 8003e74:	e02a      	b.n	8003ecc <process_message+0x164>
        } else if (strcmp(signalType_str, "Sine Wave") == 0)
 8003e76:	4946      	ldr	r1, [pc, #280]	; (8003f90 <process_message+0x228>)
 8003e78:	69b8      	ldr	r0, [r7, #24]
 8003e7a:	f7fc f9a9 	bl	80001d0 <strcmp>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d103      	bne.n	8003e8c <process_message+0x124>
        {
        	Vtype = SIN;
 8003e84:	4b36      	ldr	r3, [pc, #216]	; (8003f60 <process_message+0x1f8>)
 8003e86:	2201      	movs	r2, #1
 8003e88:	801a      	strh	r2, [r3, #0]
 8003e8a:	e01f      	b.n	8003ecc <process_message+0x164>
        } else if (strcmp(signalType_str, "Triangle Wave") == 0)
 8003e8c:	4941      	ldr	r1, [pc, #260]	; (8003f94 <process_message+0x22c>)
 8003e8e:	69b8      	ldr	r0, [r7, #24]
 8003e90:	f7fc f99e 	bl	80001d0 <strcmp>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d103      	bne.n	8003ea2 <process_message+0x13a>
        {
        	Vtype = TRI;
 8003e9a:	4b31      	ldr	r3, [pc, #196]	; (8003f60 <process_message+0x1f8>)
 8003e9c:	2202      	movs	r2, #2
 8003e9e:	801a      	strh	r2, [r3, #0]
 8003ea0:	e014      	b.n	8003ecc <process_message+0x164>
        } else if (strcmp(signalType_str, "Sawtooth Wave") == 0)
 8003ea2:	493d      	ldr	r1, [pc, #244]	; (8003f98 <process_message+0x230>)
 8003ea4:	69b8      	ldr	r0, [r7, #24]
 8003ea6:	f7fc f993 	bl	80001d0 <strcmp>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d103      	bne.n	8003eb8 <process_message+0x150>
        {
        	Vtype = SAW;
 8003eb0:	4b2b      	ldr	r3, [pc, #172]	; (8003f60 <process_message+0x1f8>)
 8003eb2:	2203      	movs	r2, #3
 8003eb4:	801a      	strh	r2, [r3, #0]
 8003eb6:	e009      	b.n	8003ecc <process_message+0x164>
        } else if (strcmp(signalType_str, "Square Wave(Digital)") == 0)
 8003eb8:	4938      	ldr	r1, [pc, #224]	; (8003f9c <process_message+0x234>)
 8003eba:	69b8      	ldr	r0, [r7, #24]
 8003ebc:	f7fc f988 	bl	80001d0 <strcmp>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d102      	bne.n	8003ecc <process_message+0x164>
        {
        	Vtype = SQUARE;
 8003ec6:	4b26      	ldr	r3, [pc, #152]	; (8003f60 <process_message+0x1f8>)
 8003ec8:	2204      	movs	r2, #4
 8003eca:	801a      	strh	r2, [r3, #0]
        }

   	    // Get the "signalFreq" number
   	    cJSON *signalFreq = cJSON_GetObjectItemCaseSensitive(awg_1_0, "signalFreq");
 8003ecc:	4934      	ldr	r1, [pc, #208]	; (8003fa0 <process_message+0x238>)
 8003ece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ed0:	f7ff f88a 	bl	8002fe8 <cJSON_GetObjectItemCaseSensitive>
 8003ed4:	6178      	str	r0, [r7, #20]
   	    Vfreq = cJSON_GetNumberValue(signalFreq);
 8003ed6:	6978      	ldr	r0, [r7, #20]
 8003ed8:	f7fd f938 	bl	800114c <cJSON_GetNumberValue>
 8003edc:	ec53 2b10 	vmov	r2, r3, d0
 8003ee0:	4610      	mov	r0, r2
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	f7fc fe70 	bl	8000bc8 <__aeabi_d2uiz>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	4a23      	ldr	r2, [pc, #140]	; (8003f78 <process_message+0x210>)
 8003eec:	6013      	str	r3, [r2, #0]

   	    // Get the "vpp" number
   	    cJSON *vpp = cJSON_GetObjectItemCaseSensitive(awg_1_0, "vpp");
 8003eee:	492d      	ldr	r1, [pc, #180]	; (8003fa4 <process_message+0x23c>)
 8003ef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ef2:	f7ff f879 	bl	8002fe8 <cJSON_GetObjectItemCaseSensitive>
 8003ef6:	6138      	str	r0, [r7, #16]
   	    Vampli = cJSON_GetNumberValue(vpp);
 8003ef8:	6938      	ldr	r0, [r7, #16]
 8003efa:	f7fd f927 	bl	800114c <cJSON_GetNumberValue>
 8003efe:	ec53 2b10 	vmov	r2, r3, d0
 8003f02:	4610      	mov	r0, r2
 8003f04:	4619      	mov	r1, r3
 8003f06:	f7fc fe5f 	bl	8000bc8 <__aeabi_d2uiz>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	4b1b      	ldr	r3, [pc, #108]	; (8003f7c <process_message+0x214>)
 8003f10:	801a      	strh	r2, [r3, #0]

   	    // Get the "vOffset" number
   	    cJSON *vOffset = cJSON_GetObjectItemCaseSensitive(awg_1_0, "vOffset");
 8003f12:	4925      	ldr	r1, [pc, #148]	; (8003fa8 <process_message+0x240>)
 8003f14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f16:	f7ff f867 	bl	8002fe8 <cJSON_GetObjectItemCaseSensitive>
 8003f1a:	60f8      	str	r0, [r7, #12]
   	    Voffset = cJSON_GetNumberValue(vOffset);
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f7fd f915 	bl	800114c <cJSON_GetNumberValue>
 8003f22:	ec53 2b10 	vmov	r2, r3, d0
 8003f26:	4610      	mov	r0, r2
 8003f28:	4619      	mov	r1, r3
 8003f2a:	f7fc fe25 	bl	8000b78 <__aeabi_d2iz>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	4a13      	ldr	r2, [pc, #76]	; (8003f80 <process_message+0x218>)
 8003f32:	6013      	str	r3, [r2, #0]

    }

    // Clean up cJSON objects
    cJSON_Delete(root);
 8003f34:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003f36:	f7fd f9cf 	bl	80012d8 <cJSON_Delete>

}
 8003f3a:	bf00      	nop
 8003f3c:	3740      	adds	r7, #64	; 0x40
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	0800c61c 	.word	0x0800c61c
 8003f48:	0800c620 	.word	0x0800c620
 8003f4c:	0800c624 	.word	0x0800c624
 8003f50:	0800c674 	.word	0x0800c674
 8003f54:	2000049c 	.word	0x2000049c
 8003f58:	0800c684 	.word	0x0800c684
 8003f5c:	0800c68c 	.word	0x0800c68c
 8003f60:	2000049e 	.word	0x2000049e
 8003f64:	0800c694 	.word	0x0800c694
 8003f68:	0800c69c 	.word	0x0800c69c
 8003f6c:	0800c6a4 	.word	0x0800c6a4
 8003f70:	0800c6b0 	.word	0x0800c6b0
 8003f74:	0800c6bc 	.word	0x0800c6bc
 8003f78:	200004a4 	.word	0x200004a4
 8003f7c:	200004a0 	.word	0x200004a0
 8003f80:	200004a8 	.word	0x200004a8
 8003f84:	0800c6c0 	.word	0x0800c6c0
 8003f88:	0800c6c8 	.word	0x0800c6c8
 8003f8c:	0800c6dc 	.word	0x0800c6dc
 8003f90:	0800c6e8 	.word	0x0800c6e8
 8003f94:	0800c6f4 	.word	0x0800c6f4
 8003f98:	0800c704 	.word	0x0800c704
 8003f9c:	0800c714 	.word	0x0800c714
 8003fa0:	0800c72c 	.word	0x0800c72c
 8003fa4:	0800c738 	.word	0x0800c738
 8003fa8:	0800c73c 	.word	0x0800c73c

08003fac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a04      	ldr	r2, [pc, #16]	; (8003fcc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d101      	bne.n	8003fc2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003fbe:	f000 fbdd 	bl	800477c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */


  /* USER CODE END Callback 1 */
}
 8003fc2:	bf00      	nop
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	40012c00 	.word	0x40012c00

08003fd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003fd4:	b672      	cpsid	i
}
 8003fd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003fd8:	e7fe      	b.n	8003fd8 <Error_Handler+0x8>
	...

08003fdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fe2:	4b0f      	ldr	r3, [pc, #60]	; (8004020 <HAL_MspInit+0x44>)
 8003fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fe6:	4a0e      	ldr	r2, [pc, #56]	; (8004020 <HAL_MspInit+0x44>)
 8003fe8:	f043 0301 	orr.w	r3, r3, #1
 8003fec:	6613      	str	r3, [r2, #96]	; 0x60
 8003fee:	4b0c      	ldr	r3, [pc, #48]	; (8004020 <HAL_MspInit+0x44>)
 8003ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	607b      	str	r3, [r7, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ffa:	4b09      	ldr	r3, [pc, #36]	; (8004020 <HAL_MspInit+0x44>)
 8003ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffe:	4a08      	ldr	r2, [pc, #32]	; (8004020 <HAL_MspInit+0x44>)
 8004000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004004:	6593      	str	r3, [r2, #88]	; 0x58
 8004006:	4b06      	ldr	r3, [pc, #24]	; (8004020 <HAL_MspInit+0x44>)
 8004008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	40021000 	.word	0x40021000

08004024 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b08c      	sub	sp, #48	; 0x30
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800402c:	2300      	movs	r3, #0
 800402e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004032:	4b2e      	ldr	r3, [pc, #184]	; (80040ec <HAL_InitTick+0xc8>)
 8004034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004036:	4a2d      	ldr	r2, [pc, #180]	; (80040ec <HAL_InitTick+0xc8>)
 8004038:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800403c:	6613      	str	r3, [r2, #96]	; 0x60
 800403e:	4b2b      	ldr	r3, [pc, #172]	; (80040ec <HAL_InitTick+0xc8>)
 8004040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004042:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004046:	60bb      	str	r3, [r7, #8]
 8004048:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800404a:	f107 020c 	add.w	r2, r7, #12
 800404e:	f107 0310 	add.w	r3, r7, #16
 8004052:	4611      	mov	r1, r2
 8004054:	4618      	mov	r0, r3
 8004056:	f002 f983 	bl	8006360 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800405a:	f002 f96b 	bl	8006334 <HAL_RCC_GetPCLK2Freq>
 800405e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004062:	4a23      	ldr	r2, [pc, #140]	; (80040f0 <HAL_InitTick+0xcc>)
 8004064:	fba2 2303 	umull	r2, r3, r2, r3
 8004068:	0c9b      	lsrs	r3, r3, #18
 800406a:	3b01      	subs	r3, #1
 800406c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800406e:	4b21      	ldr	r3, [pc, #132]	; (80040f4 <HAL_InitTick+0xd0>)
 8004070:	4a21      	ldr	r2, [pc, #132]	; (80040f8 <HAL_InitTick+0xd4>)
 8004072:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8004074:	4b1f      	ldr	r3, [pc, #124]	; (80040f4 <HAL_InitTick+0xd0>)
 8004076:	f240 32e7 	movw	r2, #999	; 0x3e7
 800407a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800407c:	4a1d      	ldr	r2, [pc, #116]	; (80040f4 <HAL_InitTick+0xd0>)
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004082:	4b1c      	ldr	r3, [pc, #112]	; (80040f4 <HAL_InitTick+0xd0>)
 8004084:	2200      	movs	r2, #0
 8004086:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004088:	4b1a      	ldr	r3, [pc, #104]	; (80040f4 <HAL_InitTick+0xd0>)
 800408a:	2200      	movs	r2, #0
 800408c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800408e:	4b19      	ldr	r3, [pc, #100]	; (80040f4 <HAL_InitTick+0xd0>)
 8004090:	2200      	movs	r2, #0
 8004092:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8004094:	4817      	ldr	r0, [pc, #92]	; (80040f4 <HAL_InitTick+0xd0>)
 8004096:	f002 fcdd 	bl	8006a54 <HAL_TIM_Base_Init>
 800409a:	4603      	mov	r3, r0
 800409c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80040a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d11b      	bne.n	80040e0 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80040a8:	4812      	ldr	r0, [pc, #72]	; (80040f4 <HAL_InitTick+0xd0>)
 80040aa:	f002 fd77 	bl	8006b9c <HAL_TIM_Base_Start_IT>
 80040ae:	4603      	mov	r3, r0
 80040b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80040b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d111      	bne.n	80040e0 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80040bc:	2019      	movs	r0, #25
 80040be:	f000 fc75 	bl	80049ac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2b0f      	cmp	r3, #15
 80040c6:	d808      	bhi.n	80040da <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80040c8:	2200      	movs	r2, #0
 80040ca:	6879      	ldr	r1, [r7, #4]
 80040cc:	2019      	movs	r0, #25
 80040ce:	f000 fc51 	bl	8004974 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80040d2:	4a0a      	ldr	r2, [pc, #40]	; (80040fc <HAL_InitTick+0xd8>)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6013      	str	r3, [r2, #0]
 80040d8:	e002      	b.n	80040e0 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80040e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3730      	adds	r7, #48	; 0x30
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40021000 	.word	0x40021000
 80040f0:	431bde83 	.word	0x431bde83
 80040f4:	200004ac 	.word	0x200004ac
 80040f8:	40012c00 	.word	0x40012c00
 80040fc:	200000f4 	.word	0x200000f4

08004100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004104:	e7fe      	b.n	8004104 <NMI_Handler+0x4>

08004106 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004106:	b480      	push	{r7}
 8004108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800410a:	e7fe      	b.n	800410a <HardFault_Handler+0x4>

0800410c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004110:	e7fe      	b.n	8004110 <MemManage_Handler+0x4>

08004112 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004112:	b480      	push	{r7}
 8004114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004116:	e7fe      	b.n	8004116 <BusFault_Handler+0x4>

08004118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800411c:	e7fe      	b.n	800411c <UsageFault_Handler+0x4>

0800411e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800411e:	b480      	push	{r7}
 8004120:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004122:	bf00      	nop
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004130:	bf00      	nop
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800413a:	b480      	push	{r7}
 800413c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800413e:	bf00      	nop
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800414c:	bf00      	nop
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
	...

08004158 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 800415c:	4802      	ldr	r0, [pc, #8]	; (8004168 <DMA1_Channel3_IRQHandler+0x10>)
 800415e:	f001 f87a 	bl	8005256 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004162:	bf00      	nop
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	20000308 	.word	0x20000308

0800416c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 8004170:	4802      	ldr	r0, [pc, #8]	; (800417c <DMA1_Channel4_IRQHandler+0x10>)
 8004172:	f001 f870 	bl	8005256 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004176:	bf00      	nop
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	20000350 	.word	0x20000350

08004180 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004184:	4802      	ldr	r0, [pc, #8]	; (8004190 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8004186:	f002 fd5d 	bl	8006c44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800418a:	bf00      	nop
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	200004ac 	.word	0x200004ac

08004194 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004198:	4802      	ldr	r0, [pc, #8]	; (80041a4 <USART2_IRQHandler+0x10>)
 800419a:	f003 f9f7 	bl	800758c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800419e:	bf00      	nop
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20000548 	.word	0x20000548

080041a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
	return 1;
 80041ac:	2301      	movs	r3, #1
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <_kill>:

int _kill(int pid, int sig)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80041c2:	f004 fc55 	bl	8008a70 <__errno>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2216      	movs	r2, #22
 80041ca:	601a      	str	r2, [r3, #0]
	return -1;
 80041cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <_exit>:

void _exit (int status)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80041e0:	f04f 31ff 	mov.w	r1, #4294967295
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7ff ffe7 	bl	80041b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80041ea:	e7fe      	b.n	80041ea <_exit+0x12>

080041ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041f8:	2300      	movs	r3, #0
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	e00a      	b.n	8004214 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80041fe:	f3af 8000 	nop.w
 8004202:	4601      	mov	r1, r0
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	60ba      	str	r2, [r7, #8]
 800420a:	b2ca      	uxtb	r2, r1
 800420c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	3301      	adds	r3, #1
 8004212:	617b      	str	r3, [r7, #20]
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	429a      	cmp	r2, r3
 800421a:	dbf0      	blt.n	80041fe <_read+0x12>
	}

return len;
 800421c:	687b      	ldr	r3, [r7, #4]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3718      	adds	r7, #24
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b086      	sub	sp, #24
 800422a:	af00      	add	r7, sp, #0
 800422c:	60f8      	str	r0, [r7, #12]
 800422e:	60b9      	str	r1, [r7, #8]
 8004230:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004232:	2300      	movs	r3, #0
 8004234:	617b      	str	r3, [r7, #20]
 8004236:	e009      	b.n	800424c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	1c5a      	adds	r2, r3, #1
 800423c:	60ba      	str	r2, [r7, #8]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	4618      	mov	r0, r3
 8004242:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	3301      	adds	r3, #1
 800424a:	617b      	str	r3, [r7, #20]
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	429a      	cmp	r2, r3
 8004252:	dbf1      	blt.n	8004238 <_write+0x12>
	}
	return len;
 8004254:	687b      	ldr	r3, [r7, #4]
}
 8004256:	4618      	mov	r0, r3
 8004258:	3718      	adds	r7, #24
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <_close>:

int _close(int file)
{
 800425e:	b480      	push	{r7}
 8004260:	b083      	sub	sp, #12
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
	return -1;
 8004266:	f04f 33ff 	mov.w	r3, #4294967295
}
 800426a:	4618      	mov	r0, r3
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
 800427e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004286:	605a      	str	r2, [r3, #4]
	return 0;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <_isatty>:

int _isatty(int file)
{
 8004296:	b480      	push	{r7}
 8004298:	b083      	sub	sp, #12
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
	return 1;
 800429e:	2301      	movs	r3, #1
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
	return 0;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
	...

080042c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042d0:	4a14      	ldr	r2, [pc, #80]	; (8004324 <_sbrk+0x5c>)
 80042d2:	4b15      	ldr	r3, [pc, #84]	; (8004328 <_sbrk+0x60>)
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042dc:	4b13      	ldr	r3, [pc, #76]	; (800432c <_sbrk+0x64>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d102      	bne.n	80042ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042e4:	4b11      	ldr	r3, [pc, #68]	; (800432c <_sbrk+0x64>)
 80042e6:	4a12      	ldr	r2, [pc, #72]	; (8004330 <_sbrk+0x68>)
 80042e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042ea:	4b10      	ldr	r3, [pc, #64]	; (800432c <_sbrk+0x64>)
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4413      	add	r3, r2
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d207      	bcs.n	8004308 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042f8:	f004 fbba 	bl	8008a70 <__errno>
 80042fc:	4603      	mov	r3, r0
 80042fe:	220c      	movs	r2, #12
 8004300:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004302:	f04f 33ff 	mov.w	r3, #4294967295
 8004306:	e009      	b.n	800431c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004308:	4b08      	ldr	r3, [pc, #32]	; (800432c <_sbrk+0x64>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800430e:	4b07      	ldr	r3, [pc, #28]	; (800432c <_sbrk+0x64>)
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4413      	add	r3, r2
 8004316:	4a05      	ldr	r2, [pc, #20]	; (800432c <_sbrk+0x64>)
 8004318:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800431a:	68fb      	ldr	r3, [r7, #12]
}
 800431c:	4618      	mov	r0, r3
 800431e:	3718      	adds	r7, #24
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	20010000 	.word	0x20010000
 8004328:	00000400 	.word	0x00000400
 800432c:	200004f8 	.word	0x200004f8
 8004330:	200005e8 	.word	0x200005e8

08004334 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004338:	4b06      	ldr	r3, [pc, #24]	; (8004354 <SystemInit+0x20>)
 800433a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433e:	4a05      	ldr	r2, [pc, #20]	; (8004354 <SystemInit+0x20>)
 8004340:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004344:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004348:	bf00      	nop
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	e000ed00 	.word	0xe000ed00

08004358 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b088      	sub	sp, #32
 800435c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800435e:	f107 0310 	add.w	r3, r7, #16
 8004362:	2200      	movs	r2, #0
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	605a      	str	r2, [r3, #4]
 8004368:	609a      	str	r2, [r3, #8]
 800436a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800436c:	1d3b      	adds	r3, r7, #4
 800436e:	2200      	movs	r2, #0
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	605a      	str	r2, [r3, #4]
 8004374:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004376:	4b1d      	ldr	r3, [pc, #116]	; (80043ec <MX_TIM2_Init+0x94>)
 8004378:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800437c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800437e:	4b1b      	ldr	r3, [pc, #108]	; (80043ec <MX_TIM2_Init+0x94>)
 8004380:	2200      	movs	r2, #0
 8004382:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004384:	4b19      	ldr	r3, [pc, #100]	; (80043ec <MX_TIM2_Init+0x94>)
 8004386:	2200      	movs	r2, #0
 8004388:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 159;
 800438a:	4b18      	ldr	r3, [pc, #96]	; (80043ec <MX_TIM2_Init+0x94>)
 800438c:	229f      	movs	r2, #159	; 0x9f
 800438e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004390:	4b16      	ldr	r3, [pc, #88]	; (80043ec <MX_TIM2_Init+0x94>)
 8004392:	2200      	movs	r2, #0
 8004394:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004396:	4b15      	ldr	r3, [pc, #84]	; (80043ec <MX_TIM2_Init+0x94>)
 8004398:	2200      	movs	r2, #0
 800439a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800439c:	4813      	ldr	r0, [pc, #76]	; (80043ec <MX_TIM2_Init+0x94>)
 800439e:	f002 fb59 	bl	8006a54 <HAL_TIM_Base_Init>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d001      	beq.n	80043ac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80043a8:	f7ff fe12 	bl	8003fd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80043b2:	f107 0310 	add.w	r3, r7, #16
 80043b6:	4619      	mov	r1, r3
 80043b8:	480c      	ldr	r0, [pc, #48]	; (80043ec <MX_TIM2_Init+0x94>)
 80043ba:	f002 fd62 	bl	8006e82 <HAL_TIM_ConfigClockSource>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80043c4:	f7ff fe04 	bl	8003fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80043c8:	2320      	movs	r3, #32
 80043ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043cc:	2300      	movs	r3, #0
 80043ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80043d0:	1d3b      	adds	r3, r7, #4
 80043d2:	4619      	mov	r1, r3
 80043d4:	4805      	ldr	r0, [pc, #20]	; (80043ec <MX_TIM2_Init+0x94>)
 80043d6:	f002 ff43 	bl	8007260 <HAL_TIMEx_MasterConfigSynchronization>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80043e0:	f7ff fdf6 	bl	8003fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80043e4:	bf00      	nop
 80043e6:	3720      	adds	r7, #32
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	200004fc 	.word	0x200004fc

080043f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004400:	d10b      	bne.n	800441a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004402:	4b09      	ldr	r3, [pc, #36]	; (8004428 <HAL_TIM_Base_MspInit+0x38>)
 8004404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004406:	4a08      	ldr	r2, [pc, #32]	; (8004428 <HAL_TIM_Base_MspInit+0x38>)
 8004408:	f043 0301 	orr.w	r3, r3, #1
 800440c:	6593      	str	r3, [r2, #88]	; 0x58
 800440e:	4b06      	ldr	r3, [pc, #24]	; (8004428 <HAL_TIM_Base_MspInit+0x38>)
 8004410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800441a:	bf00      	nop
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	40021000 	.word	0x40021000

0800442c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004430:	4b14      	ldr	r3, [pc, #80]	; (8004484 <MX_USART2_UART_Init+0x58>)
 8004432:	4a15      	ldr	r2, [pc, #84]	; (8004488 <MX_USART2_UART_Init+0x5c>)
 8004434:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8004436:	4b13      	ldr	r3, [pc, #76]	; (8004484 <MX_USART2_UART_Init+0x58>)
 8004438:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800443c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800443e:	4b11      	ldr	r3, [pc, #68]	; (8004484 <MX_USART2_UART_Init+0x58>)
 8004440:	2200      	movs	r2, #0
 8004442:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004444:	4b0f      	ldr	r3, [pc, #60]	; (8004484 <MX_USART2_UART_Init+0x58>)
 8004446:	2200      	movs	r2, #0
 8004448:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800444a:	4b0e      	ldr	r3, [pc, #56]	; (8004484 <MX_USART2_UART_Init+0x58>)
 800444c:	2200      	movs	r2, #0
 800444e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004450:	4b0c      	ldr	r3, [pc, #48]	; (8004484 <MX_USART2_UART_Init+0x58>)
 8004452:	220c      	movs	r2, #12
 8004454:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004456:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <MX_USART2_UART_Init+0x58>)
 8004458:	2200      	movs	r2, #0
 800445a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800445c:	4b09      	ldr	r3, [pc, #36]	; (8004484 <MX_USART2_UART_Init+0x58>)
 800445e:	2200      	movs	r2, #0
 8004460:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004462:	4b08      	ldr	r3, [pc, #32]	; (8004484 <MX_USART2_UART_Init+0x58>)
 8004464:	2200      	movs	r2, #0
 8004466:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004468:	4b06      	ldr	r3, [pc, #24]	; (8004484 <MX_USART2_UART_Init+0x58>)
 800446a:	2200      	movs	r2, #0
 800446c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800446e:	4805      	ldr	r0, [pc, #20]	; (8004484 <MX_USART2_UART_Init+0x58>)
 8004470:	f002 ff7a 	bl	8007368 <HAL_UART_Init>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800447a:	f7ff fda9 	bl	8003fd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800447e:	bf00      	nop
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20000548 	.word	0x20000548
 8004488:	40004400 	.word	0x40004400

0800448c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b09e      	sub	sp, #120	; 0x78
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004494:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004498:	2200      	movs	r2, #0
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	605a      	str	r2, [r3, #4]
 800449e:	609a      	str	r2, [r3, #8]
 80044a0:	60da      	str	r2, [r3, #12]
 80044a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80044a4:	f107 0310 	add.w	r3, r7, #16
 80044a8:	2254      	movs	r2, #84	; 0x54
 80044aa:	2100      	movs	r1, #0
 80044ac:	4618      	mov	r0, r3
 80044ae:	f004 fb27 	bl	8008b00 <memset>
  if(uartHandle->Instance==USART2)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a2c      	ldr	r2, [pc, #176]	; (8004568 <HAL_UART_MspInit+0xdc>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d150      	bne.n	800455e <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80044bc:	2302      	movs	r3, #2
 80044be:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80044c0:	2300      	movs	r3, #0
 80044c2:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80044c4:	f107 0310 	add.w	r3, r7, #16
 80044c8:	4618      	mov	r0, r3
 80044ca:	f001 ffdb 	bl	8006484 <HAL_RCCEx_PeriphCLKConfig>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80044d4:	f7ff fd7c 	bl	8003fd0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80044d8:	4b24      	ldr	r3, [pc, #144]	; (800456c <HAL_UART_MspInit+0xe0>)
 80044da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044dc:	4a23      	ldr	r2, [pc, #140]	; (800456c <HAL_UART_MspInit+0xe0>)
 80044de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044e2:	6593      	str	r3, [r2, #88]	; 0x58
 80044e4:	4b21      	ldr	r3, [pc, #132]	; (800456c <HAL_UART_MspInit+0xe0>)
 80044e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ec:	60fb      	str	r3, [r7, #12]
 80044ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044f0:	4b1e      	ldr	r3, [pc, #120]	; (800456c <HAL_UART_MspInit+0xe0>)
 80044f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f4:	4a1d      	ldr	r2, [pc, #116]	; (800456c <HAL_UART_MspInit+0xe0>)
 80044f6:	f043 0301 	orr.w	r3, r3, #1
 80044fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044fc:	4b1b      	ldr	r3, [pc, #108]	; (800456c <HAL_UART_MspInit+0xe0>)
 80044fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	60bb      	str	r3, [r7, #8]
 8004506:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004508:	2304      	movs	r3, #4
 800450a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800450c:	2302      	movs	r3, #2
 800450e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004510:	2300      	movs	r3, #0
 8004512:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004514:	2303      	movs	r3, #3
 8004516:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004518:	2307      	movs	r3, #7
 800451a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800451c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004520:	4619      	mov	r1, r3
 8004522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004526:	f000 ff75 	bl	8005414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800452a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800452e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004530:	2302      	movs	r3, #2
 8004532:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004534:	2300      	movs	r3, #0
 8004536:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004538:	2303      	movs	r3, #3
 800453a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800453c:	2303      	movs	r3, #3
 800453e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004540:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004544:	4619      	mov	r1, r3
 8004546:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800454a:	f000 ff63 	bl	8005414 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800454e:	2200      	movs	r2, #0
 8004550:	2100      	movs	r1, #0
 8004552:	2026      	movs	r0, #38	; 0x26
 8004554:	f000 fa0e 	bl	8004974 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004558:	2026      	movs	r0, #38	; 0x26
 800455a:	f000 fa27 	bl	80049ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800455e:	bf00      	nop
 8004560:	3778      	adds	r7, #120	; 0x78
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	40004400 	.word	0x40004400
 800456c:	40021000 	.word	0x40021000

08004570 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004570:	f8df d034 	ldr.w	sp, [pc, #52]	; 80045a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004574:	f7ff fede 	bl	8004334 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004578:	480c      	ldr	r0, [pc, #48]	; (80045ac <LoopForever+0x6>)
  ldr r1, =_edata
 800457a:	490d      	ldr	r1, [pc, #52]	; (80045b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800457c:	4a0d      	ldr	r2, [pc, #52]	; (80045b4 <LoopForever+0xe>)
  movs r3, #0
 800457e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004580:	e002      	b.n	8004588 <LoopCopyDataInit>

08004582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004586:	3304      	adds	r3, #4

08004588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800458a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800458c:	d3f9      	bcc.n	8004582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800458e:	4a0a      	ldr	r2, [pc, #40]	; (80045b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004590:	4c0a      	ldr	r4, [pc, #40]	; (80045bc <LoopForever+0x16>)
  movs r3, #0
 8004592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004594:	e001      	b.n	800459a <LoopFillZerobss>

08004596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004598:	3204      	adds	r2, #4

0800459a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800459a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800459c:	d3fb      	bcc.n	8004596 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800459e:	f004 fa6d 	bl	8008a7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80045a2:	f7fe ffd9 	bl	8003558 <main>

080045a6 <LoopForever>:

LoopForever:
    b LoopForever
 80045a6:	e7fe      	b.n	80045a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80045a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80045ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045b0:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 80045b4:	0800cbf8 	.word	0x0800cbf8
  ldr r2, =_sbss
 80045b8:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 80045bc:	200005e8 	.word	0x200005e8

080045c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80045c0:	e7fe      	b.n	80045c0 <ADC1_IRQHandler>

080045c2 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b082      	sub	sp, #8
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d104      	bne.n	80045da <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80045d0:	b672      	cpsid	i
}
 80045d2:	bf00      	nop
 80045d4:	f7ff fcfc 	bl	8003fd0 <Error_Handler>
 80045d8:	e7fe      	b.n	80045d8 <stm32_lock_init+0x16>
  lock->flag = 0;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	701a      	strb	r2, [r3, #0]
  lock->counter = 0;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	705a      	strb	r2, [r3, #1]
}
 80045e6:	bf00      	nop
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b084      	sub	sp, #16
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045f6:	f3ef 8310 	mrs	r3, PRIMASK
 80045fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80045fc:	68bb      	ldr	r3, [r7, #8]
  uint8_t flag = (uint8_t)(__get_PRIMASK() & 0x1); /* PRIMASK.PM */
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8004606:	b672      	cpsid	i
}
 8004608:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800460a:	f3bf 8f4f 	dsb	sy
}
 800460e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004610:	f3bf 8f6f 	isb	sy
}
 8004614:	bf00      	nop
  __disable_irq();
  __DSB();
  __ISB();
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d104      	bne.n	8004626 <stm32_lock_acquire+0x38>
  __ASM volatile ("cpsid i" : : : "memory");
 800461c:	b672      	cpsid	i
}
 800461e:	bf00      	nop
 8004620:	f7ff fcd6 	bl	8003fd0 <Error_Handler>
 8004624:	e7fe      	b.n	8004624 <stm32_lock_acquire+0x36>
  if (lock->counter == 0)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	785b      	ldrb	r3, [r3, #1]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d103      	bne.n	8004636 <stm32_lock_acquire+0x48>
  {
    lock->flag = flag;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	7bfa      	ldrb	r2, [r7, #15]
 8004632:	701a      	strb	r2, [r3, #0]
 8004634:	e008      	b.n	8004648 <stm32_lock_acquire+0x5a>
  }
  else if (lock->counter == UINT8_MAX)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	785b      	ldrb	r3, [r3, #1]
 800463a:	2bff      	cmp	r3, #255	; 0xff
 800463c:	d104      	bne.n	8004648 <stm32_lock_acquire+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 800463e:	b672      	cpsid	i
}
 8004640:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8004642:	f7ff fcc5 	bl	8003fd0 <Error_Handler>
 8004646:	e7fe      	b.n	8004646 <stm32_lock_acquire+0x58>
  }
  lock->counter++;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	785b      	ldrb	r3, [r3, #1]
 800464c:	3301      	adds	r3, #1
 800464e:	b2da      	uxtb	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	705a      	strb	r2, [r3, #1]
}
 8004654:	bf00      	nop
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d104      	bne.n	8004674 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800466a:	b672      	cpsid	i
}
 800466c:	bf00      	nop
 800466e:	f7ff fcaf 	bl	8003fd0 <Error_Handler>
 8004672:	e7fe      	b.n	8004672 <stm32_lock_release+0x16>
  if (lock->counter == 0)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	785b      	ldrb	r3, [r3, #1]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d104      	bne.n	8004686 <stm32_lock_release+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 800467c:	b672      	cpsid	i
}
 800467e:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8004680:	f7ff fca6 	bl	8003fd0 <Error_Handler>
 8004684:	e7fe      	b.n	8004684 <stm32_lock_release+0x28>
  }
  lock->counter--;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	785b      	ldrb	r3, [r3, #1]
 800468a:	3b01      	subs	r3, #1
 800468c:	b2da      	uxtb	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	705a      	strb	r2, [r3, #1]
  if (lock->counter == 0 && lock->flag == 0)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	785b      	ldrb	r3, [r3, #1]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d105      	bne.n	80046a6 <stm32_lock_release+0x4a>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <stm32_lock_release+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
 80046a2:	b662      	cpsie	i
}
 80046a4:	bf00      	nop
  {
    __enable_irq();
  }
}
 80046a6:	bf00      	nop
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b082      	sub	sp, #8
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d105      	bne.n	80046c8 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 80046bc:	f004 f9d8 	bl	8008a70 <__errno>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2216      	movs	r2, #22
 80046c4:	601a      	str	r2, [r3, #0]
    return;
 80046c6:	e015      	b.n	80046f4 <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 80046c8:	2002      	movs	r0, #2
 80046ca:	f004 f9fb 	bl	8008ac4 <malloc>
 80046ce:	4603      	mov	r3, r0
 80046d0:	461a      	mov	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d005      	beq.n	80046ea <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff ff6d 	bl	80045c2 <stm32_lock_init>
    return;
 80046e8:	e004      	b.n	80046f4 <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 80046ea:	b672      	cpsid	i
}
 80046ec:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 80046ee:	f7ff fc6f 	bl	8003fd0 <Error_Handler>
 80046f2:	e7fe      	b.n	80046f2 <__retarget_lock_init_recursive+0x44>
}
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b082      	sub	sp, #8
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d104      	bne.n	8004712 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8004708:	b672      	cpsid	i
}
 800470a:	bf00      	nop
 800470c:	f7ff fc60 	bl	8003fd0 <Error_Handler>
 8004710:	e7fe      	b.n	8004710 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4618      	mov	r0, r3
 8004716:	f7ff ff6a 	bl	80045ee <stm32_lock_acquire>
}
 800471a:	bf00      	nop
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b082      	sub	sp, #8
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d104      	bne.n	800473a <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8004730:	b672      	cpsid	i
}
 8004732:	bf00      	nop
 8004734:	f7ff fc4c 	bl	8003fd0 <Error_Handler>
 8004738:	e7fe      	b.n	8004738 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4618      	mov	r0, r3
 800473e:	f7ff ff8d 	bl	800465c <stm32_lock_release>
}
 8004742:	bf00      	nop
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b082      	sub	sp, #8
 800474e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004750:	2300      	movs	r3, #0
 8004752:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004754:	2003      	movs	r0, #3
 8004756:	f000 f902 	bl	800495e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800475a:	200f      	movs	r0, #15
 800475c:	f7ff fc62 	bl	8004024 <HAL_InitTick>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d002      	beq.n	800476c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	71fb      	strb	r3, [r7, #7]
 800476a:	e001      	b.n	8004770 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800476c:	f7ff fc36 	bl	8003fdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004770:	79fb      	ldrb	r3, [r7, #7]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
	...

0800477c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004780:	4b06      	ldr	r3, [pc, #24]	; (800479c <HAL_IncTick+0x20>)
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	461a      	mov	r2, r3
 8004786:	4b06      	ldr	r3, [pc, #24]	; (80047a0 <HAL_IncTick+0x24>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4413      	add	r3, r2
 800478c:	4a04      	ldr	r2, [pc, #16]	; (80047a0 <HAL_IncTick+0x24>)
 800478e:	6013      	str	r3, [r2, #0]
}
 8004790:	bf00      	nop
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	200000f8 	.word	0x200000f8
 80047a0:	200005d8 	.word	0x200005d8

080047a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
  return uwTick;
 80047a8:	4b03      	ldr	r3, [pc, #12]	; (80047b8 <HAL_GetTick+0x14>)
 80047aa:	681b      	ldr	r3, [r3, #0]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	200005d8 	.word	0x200005d8

080047bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047c4:	f7ff ffee 	bl	80047a4 <HAL_GetTick>
 80047c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d4:	d005      	beq.n	80047e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80047d6:	4b0a      	ldr	r3, [pc, #40]	; (8004800 <HAL_Delay+0x44>)
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	461a      	mov	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4413      	add	r3, r2
 80047e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80047e2:	bf00      	nop
 80047e4:	f7ff ffde 	bl	80047a4 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d8f7      	bhi.n	80047e4 <HAL_Delay+0x28>
  {
  }
}
 80047f4:	bf00      	nop
 80047f6:	bf00      	nop
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	200000f8 	.word	0x200000f8

08004804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f003 0307 	and.w	r3, r3, #7
 8004812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004814:	4b0c      	ldr	r3, [pc, #48]	; (8004848 <__NVIC_SetPriorityGrouping+0x44>)
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004820:	4013      	ands	r3, r2
 8004822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800482c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004836:	4a04      	ldr	r2, [pc, #16]	; (8004848 <__NVIC_SetPriorityGrouping+0x44>)
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	60d3      	str	r3, [r2, #12]
}
 800483c:	bf00      	nop
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	e000ed00 	.word	0xe000ed00

0800484c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004850:	4b04      	ldr	r3, [pc, #16]	; (8004864 <__NVIC_GetPriorityGrouping+0x18>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	0a1b      	lsrs	r3, r3, #8
 8004856:	f003 0307 	and.w	r3, r3, #7
}
 800485a:	4618      	mov	r0, r3
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	e000ed00 	.word	0xe000ed00

08004868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	4603      	mov	r3, r0
 8004870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004876:	2b00      	cmp	r3, #0
 8004878:	db0b      	blt.n	8004892 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800487a:	79fb      	ldrb	r3, [r7, #7]
 800487c:	f003 021f 	and.w	r2, r3, #31
 8004880:	4907      	ldr	r1, [pc, #28]	; (80048a0 <__NVIC_EnableIRQ+0x38>)
 8004882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004886:	095b      	lsrs	r3, r3, #5
 8004888:	2001      	movs	r0, #1
 800488a:	fa00 f202 	lsl.w	r2, r0, r2
 800488e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	e000e100 	.word	0xe000e100

080048a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	4603      	mov	r3, r0
 80048ac:	6039      	str	r1, [r7, #0]
 80048ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	db0a      	blt.n	80048ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	490c      	ldr	r1, [pc, #48]	; (80048f0 <__NVIC_SetPriority+0x4c>)
 80048be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c2:	0112      	lsls	r2, r2, #4
 80048c4:	b2d2      	uxtb	r2, r2
 80048c6:	440b      	add	r3, r1
 80048c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048cc:	e00a      	b.n	80048e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	4908      	ldr	r1, [pc, #32]	; (80048f4 <__NVIC_SetPriority+0x50>)
 80048d4:	79fb      	ldrb	r3, [r7, #7]
 80048d6:	f003 030f 	and.w	r3, r3, #15
 80048da:	3b04      	subs	r3, #4
 80048dc:	0112      	lsls	r2, r2, #4
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	440b      	add	r3, r1
 80048e2:	761a      	strb	r2, [r3, #24]
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr
 80048f0:	e000e100 	.word	0xe000e100
 80048f4:	e000ed00 	.word	0xe000ed00

080048f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b089      	sub	sp, #36	; 0x24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f003 0307 	and.w	r3, r3, #7
 800490a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	f1c3 0307 	rsb	r3, r3, #7
 8004912:	2b04      	cmp	r3, #4
 8004914:	bf28      	it	cs
 8004916:	2304      	movcs	r3, #4
 8004918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	3304      	adds	r3, #4
 800491e:	2b06      	cmp	r3, #6
 8004920:	d902      	bls.n	8004928 <NVIC_EncodePriority+0x30>
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	3b03      	subs	r3, #3
 8004926:	e000      	b.n	800492a <NVIC_EncodePriority+0x32>
 8004928:	2300      	movs	r3, #0
 800492a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800492c:	f04f 32ff 	mov.w	r2, #4294967295
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	fa02 f303 	lsl.w	r3, r2, r3
 8004936:	43da      	mvns	r2, r3
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	401a      	ands	r2, r3
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004940:	f04f 31ff 	mov.w	r1, #4294967295
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	fa01 f303 	lsl.w	r3, r1, r3
 800494a:	43d9      	mvns	r1, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004950:	4313      	orrs	r3, r2
         );
}
 8004952:	4618      	mov	r0, r3
 8004954:	3724      	adds	r7, #36	; 0x24
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b082      	sub	sp, #8
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7ff ff4c 	bl	8004804 <__NVIC_SetPriorityGrouping>
}
 800496c:	bf00      	nop
 800496e:	3708      	adds	r7, #8
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	4603      	mov	r3, r0
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
 8004980:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004982:	2300      	movs	r3, #0
 8004984:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004986:	f7ff ff61 	bl	800484c <__NVIC_GetPriorityGrouping>
 800498a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	68b9      	ldr	r1, [r7, #8]
 8004990:	6978      	ldr	r0, [r7, #20]
 8004992:	f7ff ffb1 	bl	80048f8 <NVIC_EncodePriority>
 8004996:	4602      	mov	r2, r0
 8004998:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800499c:	4611      	mov	r1, r2
 800499e:	4618      	mov	r0, r3
 80049a0:	f7ff ff80 	bl	80048a4 <__NVIC_SetPriority>
}
 80049a4:	bf00      	nop
 80049a6:	3718      	adds	r7, #24
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	4603      	mov	r3, r0
 80049b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff ff54 	bl	8004868 <__NVIC_EnableIRQ>
}
 80049c0:	bf00      	nop
 80049c2:	3708      	adds	r7, #8
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e014      	b.n	8004a04 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	791b      	ldrb	r3, [r3, #4]
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d105      	bne.n	80049f0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7fe fcd8 	bl	80033a0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2202      	movs	r2, #2
 80049f4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
 8004a18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	795b      	ldrb	r3, [r3, #5]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d101      	bne.n	8004a2a <HAL_DAC_Start_DMA+0x1e>
 8004a26:	2302      	movs	r3, #2
 8004a28:	e0ab      	b.n	8004b82 <HAL_DAC_Start_DMA+0x176>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2202      	movs	r2, #2
 8004a34:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d12f      	bne.n	8004a9c <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	4a52      	ldr	r2, [pc, #328]	; (8004b8c <HAL_DAC_Start_DMA+0x180>)
 8004a42:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	4a51      	ldr	r2, [pc, #324]	; (8004b90 <HAL_DAC_Start_DMA+0x184>)
 8004a4a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	4a50      	ldr	r2, [pc, #320]	; (8004b94 <HAL_DAC_Start_DMA+0x188>)
 8004a52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a62:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004a64:	6a3b      	ldr	r3, [r7, #32]
 8004a66:	2b08      	cmp	r3, #8
 8004a68:	d013      	beq.n	8004a92 <HAL_DAC_Start_DMA+0x86>
 8004a6a:	6a3b      	ldr	r3, [r7, #32]
 8004a6c:	2b08      	cmp	r3, #8
 8004a6e:	d845      	bhi.n	8004afc <HAL_DAC_Start_DMA+0xf0>
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <HAL_DAC_Start_DMA+0x72>
 8004a76:	6a3b      	ldr	r3, [r7, #32]
 8004a78:	2b04      	cmp	r3, #4
 8004a7a:	d005      	beq.n	8004a88 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8004a7c:	e03e      	b.n	8004afc <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	3308      	adds	r3, #8
 8004a84:	613b      	str	r3, [r7, #16]
        break;
 8004a86:	e03c      	b.n	8004b02 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	330c      	adds	r3, #12
 8004a8e:	613b      	str	r3, [r7, #16]
        break;
 8004a90:	e037      	b.n	8004b02 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	3310      	adds	r3, #16
 8004a98:	613b      	str	r3, [r7, #16]
        break;
 8004a9a:	e032      	b.n	8004b02 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	4a3d      	ldr	r2, [pc, #244]	; (8004b98 <HAL_DAC_Start_DMA+0x18c>)
 8004aa2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	4a3c      	ldr	r2, [pc, #240]	; (8004b9c <HAL_DAC_Start_DMA+0x190>)
 8004aaa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	4a3b      	ldr	r2, [pc, #236]	; (8004ba0 <HAL_DAC_Start_DMA+0x194>)
 8004ab2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004ac2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	2b08      	cmp	r3, #8
 8004ac8:	d013      	beq.n	8004af2 <HAL_DAC_Start_DMA+0xe6>
 8004aca:	6a3b      	ldr	r3, [r7, #32]
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	d817      	bhi.n	8004b00 <HAL_DAC_Start_DMA+0xf4>
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <HAL_DAC_Start_DMA+0xd2>
 8004ad6:	6a3b      	ldr	r3, [r7, #32]
 8004ad8:	2b04      	cmp	r3, #4
 8004ada:	d005      	beq.n	8004ae8 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8004adc:	e010      	b.n	8004b00 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	3314      	adds	r3, #20
 8004ae4:	613b      	str	r3, [r7, #16]
        break;
 8004ae6:	e00c      	b.n	8004b02 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	3318      	adds	r3, #24
 8004aee:	613b      	str	r3, [r7, #16]
        break;
 8004af0:	e007      	b.n	8004b02 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	331c      	adds	r3, #28
 8004af8:	613b      	str	r3, [r7, #16]
        break;
 8004afa:	e002      	b.n	8004b02 <HAL_DAC_Start_DMA+0xf6>
        break;
 8004afc:	bf00      	nop
 8004afe:	e000      	b.n	8004b02 <HAL_DAC_Start_DMA+0xf6>
        break;
 8004b00:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d111      	bne.n	8004b2c <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b16:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6898      	ldr	r0, [r3, #8]
 8004b1c:	6879      	ldr	r1, [r7, #4]
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	f000 fab9 	bl	8005098 <HAL_DMA_Start_IT>
 8004b26:	4603      	mov	r3, r0
 8004b28:	75fb      	strb	r3, [r7, #23]
 8004b2a:	e010      	b.n	8004b4e <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004b3a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	68d8      	ldr	r0, [r3, #12]
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	f000 faa7 	bl	8005098 <HAL_DMA_Start_IT>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004b54:	7dfb      	ldrb	r3, [r7, #23]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10c      	bne.n	8004b74 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6819      	ldr	r1, [r3, #0]
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f003 0310 	and.w	r3, r3, #16
 8004b66:	2201      	movs	r2, #1
 8004b68:	409a      	lsls	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	601a      	str	r2, [r3, #0]
 8004b72:	e005      	b.n	8004b80 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	f043 0204 	orr.w	r2, r3, #4
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3718      	adds	r7, #24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	08004e15 	.word	0x08004e15
 8004b90:	08004e37 	.word	0x08004e37
 8004b94:	08004e53 	.word	0x08004e53
 8004b98:	08004ebd 	.word	0x08004ebd
 8004b9c:	08004edf 	.word	0x08004edf
 8004ba0:	08004efb 	.word	0x08004efb

08004ba4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b088      	sub	sp, #32
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	795b      	ldrb	r3, [r3, #5]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d101      	bne.n	8004bfc <HAL_DAC_ConfigChannel+0x1c>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	e107      	b.n	8004e0c <HAL_DAC_ConfigChannel+0x22c>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2202      	movs	r2, #2
 8004c06:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b04      	cmp	r3, #4
 8004c0e:	d174      	bne.n	8004cfa <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004c10:	f7ff fdc8 	bl	80047a4 <HAL_GetTick>
 8004c14:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d134      	bne.n	8004c86 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004c1c:	e011      	b.n	8004c42 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004c1e:	f7ff fdc1 	bl	80047a4 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d90a      	bls.n	8004c42 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	f043 0208 	orr.w	r2, r3, #8
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2203      	movs	r2, #3
 8004c3c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e0e4      	b.n	8004e0c <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1e6      	bne.n	8004c1e <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8004c50:	2001      	movs	r0, #1
 8004c52:	f7ff fdb3 	bl	80047bc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	6992      	ldr	r2, [r2, #24]
 8004c5e:	641a      	str	r2, [r3, #64]	; 0x40
 8004c60:	e01e      	b.n	8004ca0 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004c62:	f7ff fd9f 	bl	80047a4 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d90a      	bls.n	8004c86 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	f043 0208 	orr.w	r2, r3, #8
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2203      	movs	r2, #3
 8004c80:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e0c2      	b.n	8004e0c <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	dbe8      	blt.n	8004c62 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8004c90:	2001      	movs	r0, #1
 8004c92:	f7ff fd93 	bl	80047bc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	6992      	ldr	r2, [r2, #24]
 8004c9e:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f003 0310 	and.w	r3, r3, #16
 8004cac:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb4:	43db      	mvns	r3, r3
 8004cb6:	ea02 0103 	and.w	r1, r2, r3
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	69da      	ldr	r2, [r3, #28]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f003 0310 	and.w	r3, r3, #16
 8004cc4:	409a      	lsls	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f003 0310 	and.w	r3, r3, #16
 8004cda:	21ff      	movs	r1, #255	; 0xff
 8004cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce0:	43db      	mvns	r3, r3
 8004ce2:	ea02 0103 	and.w	r1, r2, r3
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	6a1a      	ldr	r2, [r3, #32]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f003 0310 	and.w	r3, r3, #16
 8004cf0:	409a      	lsls	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d11d      	bne.n	8004d3e <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d08:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f003 0310 	and.w	r3, r3, #16
 8004d10:	221f      	movs	r2, #31
 8004d12:	fa02 f303 	lsl.w	r3, r2, r3
 8004d16:	43db      	mvns	r3, r3
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f003 0310 	and.w	r3, r3, #16
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d44:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f003 0310 	and.w	r3, r3, #16
 8004d4c:	2207      	movs	r2, #7
 8004d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d52:	43db      	mvns	r3, r3
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	4013      	ands	r3, r2
 8004d58:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	431a      	orrs	r2, r3
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f003 0310 	and.w	r3, r3, #16
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	fa02 f303 	lsl.w	r3, r2, r3
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6819      	ldr	r1, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f003 0310 	and.w	r3, r3, #16
 8004d92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d96:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9a:	43da      	mvns	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	400a      	ands	r2, r1
 8004da2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f003 0310 	and.w	r3, r3, #16
 8004db2:	f640 72fc 	movw	r2, #4092	; 0xffc
 8004db6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dba:	43db      	mvns	r3, r3
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f003 0310 	and.w	r3, r3, #16
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6819      	ldr	r1, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f003 0310 	and.w	r3, r3, #16
 8004dee:	22c0      	movs	r2, #192	; 0xc0
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	43da      	mvns	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	400a      	ands	r2, r1
 8004dfc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2201      	movs	r2, #1
 8004e02:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3720      	adds	r7, #32
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e20:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f7ff febe 	bl	8004ba4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	711a      	strb	r2, [r3, #4]
}
 8004e2e:	bf00      	nop
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b084      	sub	sp, #16
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e42:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f7ff feb7 	bl	8004bb8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004e4a:	bf00      	nop
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b084      	sub	sp, #16
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	f043 0204 	orr.w	r2, r3, #4
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f7ff fead 	bl	8004bcc <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2201      	movs	r2, #1
 8004e76:	711a      	strb	r2, [r3, #4]
}
 8004e78:	bf00      	nop
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f7ff ffd8 	bl	8004e80 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	711a      	strb	r2, [r3, #4]
}
 8004ed6:	bf00      	nop
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b084      	sub	sp, #16
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eea:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f7ff ffd1 	bl	8004e94 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004ef2:	bf00      	nop
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b084      	sub	sp, #16
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	f043 0204 	orr.w	r2, r3, #4
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f7ff ffc7 	bl	8004ea8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	711a      	strb	r2, [r3, #4]
}
 8004f20:	bf00      	nop
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e098      	b.n	800506c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	4b4d      	ldr	r3, [pc, #308]	; (8005078 <HAL_DMA_Init+0x150>)
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d80f      	bhi.n	8004f66 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	4b4b      	ldr	r3, [pc, #300]	; (800507c <HAL_DMA_Init+0x154>)
 8004f4e:	4413      	add	r3, r2
 8004f50:	4a4b      	ldr	r2, [pc, #300]	; (8005080 <HAL_DMA_Init+0x158>)
 8004f52:	fba2 2303 	umull	r2, r3, r2, r3
 8004f56:	091b      	lsrs	r3, r3, #4
 8004f58:	009a      	lsls	r2, r3, #2
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a48      	ldr	r2, [pc, #288]	; (8005084 <HAL_DMA_Init+0x15c>)
 8004f62:	641a      	str	r2, [r3, #64]	; 0x40
 8004f64:	e00e      	b.n	8004f84 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	4b46      	ldr	r3, [pc, #280]	; (8005088 <HAL_DMA_Init+0x160>)
 8004f6e:	4413      	add	r3, r2
 8004f70:	4a43      	ldr	r2, [pc, #268]	; (8005080 <HAL_DMA_Init+0x158>)
 8004f72:	fba2 2303 	umull	r2, r3, r2, r3
 8004f76:	091b      	lsrs	r3, r3, #4
 8004f78:	009a      	lsls	r2, r3, #2
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a42      	ldr	r2, [pc, #264]	; (800508c <HAL_DMA_Init+0x164>)
 8004f82:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004fa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fde:	d039      	beq.n	8005054 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe4:	4a27      	ldr	r2, [pc, #156]	; (8005084 <HAL_DMA_Init+0x15c>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d11a      	bne.n	8005020 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004fea:	4b29      	ldr	r3, [pc, #164]	; (8005090 <HAL_DMA_Init+0x168>)
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff2:	f003 031c 	and.w	r3, r3, #28
 8004ff6:	210f      	movs	r1, #15
 8004ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ffc:	43db      	mvns	r3, r3
 8004ffe:	4924      	ldr	r1, [pc, #144]	; (8005090 <HAL_DMA_Init+0x168>)
 8005000:	4013      	ands	r3, r2
 8005002:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005004:	4b22      	ldr	r3, [pc, #136]	; (8005090 <HAL_DMA_Init+0x168>)
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6859      	ldr	r1, [r3, #4]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005010:	f003 031c 	and.w	r3, r3, #28
 8005014:	fa01 f303 	lsl.w	r3, r1, r3
 8005018:	491d      	ldr	r1, [pc, #116]	; (8005090 <HAL_DMA_Init+0x168>)
 800501a:	4313      	orrs	r3, r2
 800501c:	600b      	str	r3, [r1, #0]
 800501e:	e019      	b.n	8005054 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005020:	4b1c      	ldr	r3, [pc, #112]	; (8005094 <HAL_DMA_Init+0x16c>)
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005028:	f003 031c 	and.w	r3, r3, #28
 800502c:	210f      	movs	r1, #15
 800502e:	fa01 f303 	lsl.w	r3, r1, r3
 8005032:	43db      	mvns	r3, r3
 8005034:	4917      	ldr	r1, [pc, #92]	; (8005094 <HAL_DMA_Init+0x16c>)
 8005036:	4013      	ands	r3, r2
 8005038:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800503a:	4b16      	ldr	r3, [pc, #88]	; (8005094 <HAL_DMA_Init+0x16c>)
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6859      	ldr	r1, [r3, #4]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005046:	f003 031c 	and.w	r3, r3, #28
 800504a:	fa01 f303 	lsl.w	r3, r1, r3
 800504e:	4911      	ldr	r1, [pc, #68]	; (8005094 <HAL_DMA_Init+0x16c>)
 8005050:	4313      	orrs	r3, r2
 8005052:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3714      	adds	r7, #20
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	40020407 	.word	0x40020407
 800507c:	bffdfff8 	.word	0xbffdfff8
 8005080:	cccccccd 	.word	0xcccccccd
 8005084:	40020000 	.word	0x40020000
 8005088:	bffdfbf8 	.word	0xbffdfbf8
 800508c:	40020400 	.word	0x40020400
 8005090:	400200a8 	.word	0x400200a8
 8005094:	400204a8 	.word	0x400204a8

08005098 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
 80050a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050a6:	2300      	movs	r3, #0
 80050a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d101      	bne.n	80050b8 <HAL_DMA_Start_IT+0x20>
 80050b4:	2302      	movs	r3, #2
 80050b6:	e04b      	b.n	8005150 <HAL_DMA_Start_IT+0xb8>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d13a      	bne.n	8005142 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2202      	movs	r2, #2
 80050d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 0201 	bic.w	r2, r2, #1
 80050e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	68b9      	ldr	r1, [r7, #8]
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f000 f95f 	bl	80053b4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d008      	beq.n	8005110 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f042 020e 	orr.w	r2, r2, #14
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	e00f      	b.n	8005130 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f022 0204 	bic.w	r2, r2, #4
 800511e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f042 020a 	orr.w	r2, r2, #10
 800512e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f042 0201 	orr.w	r2, r2, #1
 800513e:	601a      	str	r2, [r3, #0]
 8005140:	e005      	b.n	800514e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800514a:	2302      	movs	r3, #2
 800514c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800514e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005150:	4618      	mov	r0, r3
 8005152:	3718      	adds	r7, #24
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005160:	2300      	movs	r3, #0
 8005162:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b02      	cmp	r3, #2
 800516e:	d008      	beq.n	8005182 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2204      	movs	r2, #4
 8005174:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e022      	b.n	80051c8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f022 020e 	bic.w	r2, r2, #14
 8005190:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 0201 	bic.w	r2, r2, #1
 80051a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a6:	f003 021c 	and.w	r2, r3, #28
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	2101      	movs	r1, #1
 80051b0:	fa01 f202 	lsl.w	r2, r1, r2
 80051b4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3714      	adds	r7, #20
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051dc:	2300      	movs	r3, #0
 80051de:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d005      	beq.n	80051f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2204      	movs	r2, #4
 80051f0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	73fb      	strb	r3, [r7, #15]
 80051f6:	e029      	b.n	800524c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f022 020e 	bic.w	r2, r2, #14
 8005206:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f022 0201 	bic.w	r2, r2, #1
 8005216:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521c:	f003 021c 	and.w	r2, r3, #28
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005224:	2101      	movs	r1, #1
 8005226:	fa01 f202 	lsl.w	r2, r1, r2
 800522a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005240:	2b00      	cmp	r3, #0
 8005242:	d003      	beq.n	800524c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	4798      	blx	r3
    }
  }
  return status;
 800524c:	7bfb      	ldrb	r3, [r7, #15]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b084      	sub	sp, #16
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005272:	f003 031c 	and.w	r3, r3, #28
 8005276:	2204      	movs	r2, #4
 8005278:	409a      	lsls	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	4013      	ands	r3, r2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d026      	beq.n	80052d0 <HAL_DMA_IRQHandler+0x7a>
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	2b00      	cmp	r3, #0
 800528a:	d021      	beq.n	80052d0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0320 	and.w	r3, r3, #32
 8005296:	2b00      	cmp	r3, #0
 8005298:	d107      	bne.n	80052aa <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 0204 	bic.w	r2, r2, #4
 80052a8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ae:	f003 021c 	and.w	r2, r3, #28
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b6:	2104      	movs	r1, #4
 80052b8:	fa01 f202 	lsl.w	r2, r1, r2
 80052bc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d071      	beq.n	80053aa <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80052ce:	e06c      	b.n	80053aa <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d4:	f003 031c 	and.w	r3, r3, #28
 80052d8:	2202      	movs	r2, #2
 80052da:	409a      	lsls	r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	4013      	ands	r3, r2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d02e      	beq.n	8005342 <HAL_DMA_IRQHandler+0xec>
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d029      	beq.n	8005342 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0320 	and.w	r3, r3, #32
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10b      	bne.n	8005314 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f022 020a 	bic.w	r2, r2, #10
 800530a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005318:	f003 021c 	and.w	r2, r3, #28
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005320:	2102      	movs	r1, #2
 8005322:	fa01 f202 	lsl.w	r2, r1, r2
 8005326:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005334:	2b00      	cmp	r3, #0
 8005336:	d038      	beq.n	80053aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005340:	e033      	b.n	80053aa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005346:	f003 031c 	and.w	r3, r3, #28
 800534a:	2208      	movs	r2, #8
 800534c:	409a      	lsls	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	4013      	ands	r3, r2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d02a      	beq.n	80053ac <HAL_DMA_IRQHandler+0x156>
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	f003 0308 	and.w	r3, r3, #8
 800535c:	2b00      	cmp	r3, #0
 800535e:	d025      	beq.n	80053ac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f022 020e 	bic.w	r2, r2, #14
 800536e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005374:	f003 021c 	and.w	r2, r3, #28
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537c:	2101      	movs	r1, #1
 800537e:	fa01 f202 	lsl.w	r2, r1, r2
 8005382:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d004      	beq.n	80053ac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80053aa:	bf00      	nop
 80053ac:	bf00      	nop
}
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
 80053c0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c6:	f003 021c 	and.w	r2, r3, #28
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	2101      	movs	r1, #1
 80053d0:	fa01 f202 	lsl.w	r2, r1, r2
 80053d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	2b10      	cmp	r3, #16
 80053e4:	d108      	bne.n	80053f8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80053f6:	e007      	b.n	8005408 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	60da      	str	r2, [r3, #12]
}
 8005408:	bf00      	nop
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005414:	b480      	push	{r7}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800541e:	2300      	movs	r3, #0
 8005420:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005422:	e148      	b.n	80056b6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	2101      	movs	r1, #1
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	fa01 f303 	lsl.w	r3, r1, r3
 8005430:	4013      	ands	r3, r2
 8005432:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	f000 813a 	beq.w	80056b0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f003 0303 	and.w	r3, r3, #3
 8005444:	2b01      	cmp	r3, #1
 8005446:	d005      	beq.n	8005454 <HAL_GPIO_Init+0x40>
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f003 0303 	and.w	r3, r3, #3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d130      	bne.n	80054b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	005b      	lsls	r3, r3, #1
 800545e:	2203      	movs	r2, #3
 8005460:	fa02 f303 	lsl.w	r3, r2, r3
 8005464:	43db      	mvns	r3, r3
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	4013      	ands	r3, r2
 800546a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	68da      	ldr	r2, [r3, #12]
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	005b      	lsls	r3, r3, #1
 8005474:	fa02 f303 	lsl.w	r3, r2, r3
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	4313      	orrs	r3, r2
 800547c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800548a:	2201      	movs	r2, #1
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	fa02 f303 	lsl.w	r3, r2, r3
 8005492:	43db      	mvns	r3, r3
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	4013      	ands	r3, r2
 8005498:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	091b      	lsrs	r3, r3, #4
 80054a0:	f003 0201 	and.w	r2, r3, #1
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	fa02 f303 	lsl.w	r3, r2, r3
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f003 0303 	and.w	r3, r3, #3
 80054be:	2b03      	cmp	r3, #3
 80054c0:	d017      	beq.n	80054f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	2203      	movs	r2, #3
 80054ce:	fa02 f303 	lsl.w	r3, r2, r3
 80054d2:	43db      	mvns	r3, r3
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	4013      	ands	r3, r2
 80054d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	689a      	ldr	r2, [r3, #8]
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	005b      	lsls	r3, r3, #1
 80054e2:	fa02 f303 	lsl.w	r3, r2, r3
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d123      	bne.n	8005546 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	08da      	lsrs	r2, r3, #3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	3208      	adds	r2, #8
 8005506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800550a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	f003 0307 	and.w	r3, r3, #7
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	220f      	movs	r2, #15
 8005516:	fa02 f303 	lsl.w	r3, r2, r3
 800551a:	43db      	mvns	r3, r3
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	4013      	ands	r3, r2
 8005520:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	691a      	ldr	r2, [r3, #16]
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f003 0307 	and.w	r3, r3, #7
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	fa02 f303 	lsl.w	r3, r2, r3
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	4313      	orrs	r3, r2
 8005536:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	08da      	lsrs	r2, r3, #3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	3208      	adds	r2, #8
 8005540:	6939      	ldr	r1, [r7, #16]
 8005542:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	005b      	lsls	r3, r3, #1
 8005550:	2203      	movs	r2, #3
 8005552:	fa02 f303 	lsl.w	r3, r2, r3
 8005556:	43db      	mvns	r3, r3
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	4013      	ands	r3, r2
 800555c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f003 0203 	and.w	r2, r3, #3
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	fa02 f303 	lsl.w	r3, r2, r3
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	4313      	orrs	r3, r2
 8005572:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005582:	2b00      	cmp	r3, #0
 8005584:	f000 8094 	beq.w	80056b0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005588:	4b52      	ldr	r3, [pc, #328]	; (80056d4 <HAL_GPIO_Init+0x2c0>)
 800558a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800558c:	4a51      	ldr	r2, [pc, #324]	; (80056d4 <HAL_GPIO_Init+0x2c0>)
 800558e:	f043 0301 	orr.w	r3, r3, #1
 8005592:	6613      	str	r3, [r2, #96]	; 0x60
 8005594:	4b4f      	ldr	r3, [pc, #316]	; (80056d4 <HAL_GPIO_Init+0x2c0>)
 8005596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	60bb      	str	r3, [r7, #8]
 800559e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80055a0:	4a4d      	ldr	r2, [pc, #308]	; (80056d8 <HAL_GPIO_Init+0x2c4>)
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	089b      	lsrs	r3, r3, #2
 80055a6:	3302      	adds	r3, #2
 80055a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f003 0303 	and.w	r3, r3, #3
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	220f      	movs	r2, #15
 80055b8:	fa02 f303 	lsl.w	r3, r2, r3
 80055bc:	43db      	mvns	r3, r3
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	4013      	ands	r3, r2
 80055c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80055ca:	d00d      	beq.n	80055e8 <HAL_GPIO_Init+0x1d4>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a43      	ldr	r2, [pc, #268]	; (80056dc <HAL_GPIO_Init+0x2c8>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d007      	beq.n	80055e4 <HAL_GPIO_Init+0x1d0>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a42      	ldr	r2, [pc, #264]	; (80056e0 <HAL_GPIO_Init+0x2cc>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d101      	bne.n	80055e0 <HAL_GPIO_Init+0x1cc>
 80055dc:	2302      	movs	r3, #2
 80055de:	e004      	b.n	80055ea <HAL_GPIO_Init+0x1d6>
 80055e0:	2307      	movs	r3, #7
 80055e2:	e002      	b.n	80055ea <HAL_GPIO_Init+0x1d6>
 80055e4:	2301      	movs	r3, #1
 80055e6:	e000      	b.n	80055ea <HAL_GPIO_Init+0x1d6>
 80055e8:	2300      	movs	r3, #0
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	f002 0203 	and.w	r2, r2, #3
 80055f0:	0092      	lsls	r2, r2, #2
 80055f2:	4093      	lsls	r3, r2
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80055fa:	4937      	ldr	r1, [pc, #220]	; (80056d8 <HAL_GPIO_Init+0x2c4>)
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	089b      	lsrs	r3, r3, #2
 8005600:	3302      	adds	r3, #2
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005608:	4b36      	ldr	r3, [pc, #216]	; (80056e4 <HAL_GPIO_Init+0x2d0>)
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	43db      	mvns	r3, r3
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	4013      	ands	r3, r2
 8005616:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d003      	beq.n	800562c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	4313      	orrs	r3, r2
 800562a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800562c:	4a2d      	ldr	r2, [pc, #180]	; (80056e4 <HAL_GPIO_Init+0x2d0>)
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005632:	4b2c      	ldr	r3, [pc, #176]	; (80056e4 <HAL_GPIO_Init+0x2d0>)
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	43db      	mvns	r3, r3
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	4013      	ands	r3, r2
 8005640:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4313      	orrs	r3, r2
 8005654:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005656:	4a23      	ldr	r2, [pc, #140]	; (80056e4 <HAL_GPIO_Init+0x2d0>)
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800565c:	4b21      	ldr	r3, [pc, #132]	; (80056e4 <HAL_GPIO_Init+0x2d0>)
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	43db      	mvns	r3, r3
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	4013      	ands	r3, r2
 800566a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	4313      	orrs	r3, r2
 800567e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005680:	4a18      	ldr	r2, [pc, #96]	; (80056e4 <HAL_GPIO_Init+0x2d0>)
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005686:	4b17      	ldr	r3, [pc, #92]	; (80056e4 <HAL_GPIO_Init+0x2d0>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	43db      	mvns	r3, r3
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	4013      	ands	r3, r2
 8005694:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80056aa:	4a0e      	ldr	r2, [pc, #56]	; (80056e4 <HAL_GPIO_Init+0x2d0>)
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	3301      	adds	r3, #1
 80056b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	fa22 f303 	lsr.w	r3, r2, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f47f aeaf 	bne.w	8005424 <HAL_GPIO_Init+0x10>
  }
}
 80056c6:	bf00      	nop
 80056c8:	bf00      	nop
 80056ca:	371c      	adds	r7, #28
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	40021000 	.word	0x40021000
 80056d8:	40010000 	.word	0x40010000
 80056dc:	48000400 	.word	0x48000400
 80056e0:	48000800 	.word	0x48000800
 80056e4:	40010400 	.word	0x40010400

080056e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80056e8:	b480      	push	{r7}
 80056ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80056ec:	4b04      	ldr	r3, [pc, #16]	; (8005700 <HAL_PWREx_GetVoltageRange+0x18>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	40007000 	.word	0x40007000

08005704 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005712:	d130      	bne.n	8005776 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005714:	4b23      	ldr	r3, [pc, #140]	; (80057a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800571c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005720:	d038      	beq.n	8005794 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005722:	4b20      	ldr	r3, [pc, #128]	; (80057a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800572a:	4a1e      	ldr	r2, [pc, #120]	; (80057a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800572c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005730:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005732:	4b1d      	ldr	r3, [pc, #116]	; (80057a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2232      	movs	r2, #50	; 0x32
 8005738:	fb02 f303 	mul.w	r3, r2, r3
 800573c:	4a1b      	ldr	r2, [pc, #108]	; (80057ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800573e:	fba2 2303 	umull	r2, r3, r2, r3
 8005742:	0c9b      	lsrs	r3, r3, #18
 8005744:	3301      	adds	r3, #1
 8005746:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005748:	e002      	b.n	8005750 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	3b01      	subs	r3, #1
 800574e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005750:	4b14      	ldr	r3, [pc, #80]	; (80057a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800575c:	d102      	bne.n	8005764 <HAL_PWREx_ControlVoltageScaling+0x60>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1f2      	bne.n	800574a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005764:	4b0f      	ldr	r3, [pc, #60]	; (80057a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800576c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005770:	d110      	bne.n	8005794 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e00f      	b.n	8005796 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005776:	4b0b      	ldr	r3, [pc, #44]	; (80057a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800577e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005782:	d007      	beq.n	8005794 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005784:	4b07      	ldr	r3, [pc, #28]	; (80057a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800578c:	4a05      	ldr	r2, [pc, #20]	; (80057a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800578e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005792:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	40007000 	.word	0x40007000
 80057a8:	200000f0 	.word	0x200000f0
 80057ac:	431bde83 	.word	0x431bde83

080057b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b088      	sub	sp, #32
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d102      	bne.n	80057c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	f000 bc02 	b.w	8005fc8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057c4:	4b96      	ldr	r3, [pc, #600]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f003 030c 	and.w	r3, r3, #12
 80057cc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057ce:	4b94      	ldr	r3, [pc, #592]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f003 0303 	and.w	r3, r3, #3
 80057d6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0310 	and.w	r3, r3, #16
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f000 80e4 	beq.w	80059ae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d007      	beq.n	80057fc <HAL_RCC_OscConfig+0x4c>
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	2b0c      	cmp	r3, #12
 80057f0:	f040 808b 	bne.w	800590a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	f040 8087 	bne.w	800590a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80057fc:	4b88      	ldr	r3, [pc, #544]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d005      	beq.n	8005814 <HAL_RCC_OscConfig+0x64>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e3d9      	b.n	8005fc8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a1a      	ldr	r2, [r3, #32]
 8005818:	4b81      	ldr	r3, [pc, #516]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0308 	and.w	r3, r3, #8
 8005820:	2b00      	cmp	r3, #0
 8005822:	d004      	beq.n	800582e <HAL_RCC_OscConfig+0x7e>
 8005824:	4b7e      	ldr	r3, [pc, #504]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800582c:	e005      	b.n	800583a <HAL_RCC_OscConfig+0x8a>
 800582e:	4b7c      	ldr	r3, [pc, #496]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005830:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005834:	091b      	lsrs	r3, r3, #4
 8005836:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800583a:	4293      	cmp	r3, r2
 800583c:	d223      	bcs.n	8005886 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	4618      	mov	r0, r3
 8005844:	f000 fdbe 	bl	80063c4 <RCC_SetFlashLatencyFromMSIRange>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d001      	beq.n	8005852 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e3ba      	b.n	8005fc8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005852:	4b73      	ldr	r3, [pc, #460]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a72      	ldr	r2, [pc, #456]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005858:	f043 0308 	orr.w	r3, r3, #8
 800585c:	6013      	str	r3, [r2, #0]
 800585e:	4b70      	ldr	r3, [pc, #448]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	496d      	ldr	r1, [pc, #436]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 800586c:	4313      	orrs	r3, r2
 800586e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005870:	4b6b      	ldr	r3, [pc, #428]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	69db      	ldr	r3, [r3, #28]
 800587c:	021b      	lsls	r3, r3, #8
 800587e:	4968      	ldr	r1, [pc, #416]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005880:	4313      	orrs	r3, r2
 8005882:	604b      	str	r3, [r1, #4]
 8005884:	e025      	b.n	80058d2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005886:	4b66      	ldr	r3, [pc, #408]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a65      	ldr	r2, [pc, #404]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 800588c:	f043 0308 	orr.w	r3, r3, #8
 8005890:	6013      	str	r3, [r2, #0]
 8005892:	4b63      	ldr	r3, [pc, #396]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	4960      	ldr	r1, [pc, #384]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058a4:	4b5e      	ldr	r3, [pc, #376]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	69db      	ldr	r3, [r3, #28]
 80058b0:	021b      	lsls	r3, r3, #8
 80058b2:	495b      	ldr	r1, [pc, #364]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d109      	bne.n	80058d2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 fd7e 	bl	80063c4 <RCC_SetFlashLatencyFromMSIRange>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e37a      	b.n	8005fc8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80058d2:	f000 fc81 	bl	80061d8 <HAL_RCC_GetSysClockFreq>
 80058d6:	4602      	mov	r2, r0
 80058d8:	4b51      	ldr	r3, [pc, #324]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	091b      	lsrs	r3, r3, #4
 80058de:	f003 030f 	and.w	r3, r3, #15
 80058e2:	4950      	ldr	r1, [pc, #320]	; (8005a24 <HAL_RCC_OscConfig+0x274>)
 80058e4:	5ccb      	ldrb	r3, [r1, r3]
 80058e6:	f003 031f 	and.w	r3, r3, #31
 80058ea:	fa22 f303 	lsr.w	r3, r2, r3
 80058ee:	4a4e      	ldr	r2, [pc, #312]	; (8005a28 <HAL_RCC_OscConfig+0x278>)
 80058f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80058f2:	4b4e      	ldr	r3, [pc, #312]	; (8005a2c <HAL_RCC_OscConfig+0x27c>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7fe fb94 	bl	8004024 <HAL_InitTick>
 80058fc:	4603      	mov	r3, r0
 80058fe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005900:	7bfb      	ldrb	r3, [r7, #15]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d052      	beq.n	80059ac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005906:	7bfb      	ldrb	r3, [r7, #15]
 8005908:	e35e      	b.n	8005fc8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d032      	beq.n	8005978 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005912:	4b43      	ldr	r3, [pc, #268]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a42      	ldr	r2, [pc, #264]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005918:	f043 0301 	orr.w	r3, r3, #1
 800591c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800591e:	f7fe ff41 	bl	80047a4 <HAL_GetTick>
 8005922:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005924:	e008      	b.n	8005938 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005926:	f7fe ff3d 	bl	80047a4 <HAL_GetTick>
 800592a:	4602      	mov	r2, r0
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	2b02      	cmp	r3, #2
 8005932:	d901      	bls.n	8005938 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e347      	b.n	8005fc8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005938:	4b39      	ldr	r3, [pc, #228]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0302 	and.w	r3, r3, #2
 8005940:	2b00      	cmp	r3, #0
 8005942:	d0f0      	beq.n	8005926 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005944:	4b36      	ldr	r3, [pc, #216]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a35      	ldr	r2, [pc, #212]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 800594a:	f043 0308 	orr.w	r3, r3, #8
 800594e:	6013      	str	r3, [r2, #0]
 8005950:	4b33      	ldr	r3, [pc, #204]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a1b      	ldr	r3, [r3, #32]
 800595c:	4930      	ldr	r1, [pc, #192]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 800595e:	4313      	orrs	r3, r2
 8005960:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005962:	4b2f      	ldr	r3, [pc, #188]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	021b      	lsls	r3, r3, #8
 8005970:	492b      	ldr	r1, [pc, #172]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005972:	4313      	orrs	r3, r2
 8005974:	604b      	str	r3, [r1, #4]
 8005976:	e01a      	b.n	80059ae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005978:	4b29      	ldr	r3, [pc, #164]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a28      	ldr	r2, [pc, #160]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 800597e:	f023 0301 	bic.w	r3, r3, #1
 8005982:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005984:	f7fe ff0e 	bl	80047a4 <HAL_GetTick>
 8005988:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800598a:	e008      	b.n	800599e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800598c:	f7fe ff0a 	bl	80047a4 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b02      	cmp	r3, #2
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e314      	b.n	8005fc8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800599e:	4b20      	ldr	r3, [pc, #128]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1f0      	bne.n	800598c <HAL_RCC_OscConfig+0x1dc>
 80059aa:	e000      	b.n	80059ae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80059ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d073      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	2b08      	cmp	r3, #8
 80059be:	d005      	beq.n	80059cc <HAL_RCC_OscConfig+0x21c>
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	2b0c      	cmp	r3, #12
 80059c4:	d10e      	bne.n	80059e4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	2b03      	cmp	r3, #3
 80059ca:	d10b      	bne.n	80059e4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059cc:	4b14      	ldr	r3, [pc, #80]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d063      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x2f0>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d15f      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e2f1      	b.n	8005fc8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059ec:	d106      	bne.n	80059fc <HAL_RCC_OscConfig+0x24c>
 80059ee:	4b0c      	ldr	r3, [pc, #48]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a0b      	ldr	r2, [pc, #44]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 80059f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059f8:	6013      	str	r3, [r2, #0]
 80059fa:	e025      	b.n	8005a48 <HAL_RCC_OscConfig+0x298>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a04:	d114      	bne.n	8005a30 <HAL_RCC_OscConfig+0x280>
 8005a06:	4b06      	ldr	r3, [pc, #24]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a05      	ldr	r2, [pc, #20]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a10:	6013      	str	r3, [r2, #0]
 8005a12:	4b03      	ldr	r3, [pc, #12]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a02      	ldr	r2, [pc, #8]	; (8005a20 <HAL_RCC_OscConfig+0x270>)
 8005a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a1c:	6013      	str	r3, [r2, #0]
 8005a1e:	e013      	b.n	8005a48 <HAL_RCC_OscConfig+0x298>
 8005a20:	40021000 	.word	0x40021000
 8005a24:	0800c754 	.word	0x0800c754
 8005a28:	200000f0 	.word	0x200000f0
 8005a2c:	200000f4 	.word	0x200000f4
 8005a30:	4ba0      	ldr	r3, [pc, #640]	; (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a9f      	ldr	r2, [pc, #636]	; (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a3a:	6013      	str	r3, [r2, #0]
 8005a3c:	4b9d      	ldr	r3, [pc, #628]	; (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a9c      	ldr	r2, [pc, #624]	; (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005a42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d013      	beq.n	8005a78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a50:	f7fe fea8 	bl	80047a4 <HAL_GetTick>
 8005a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a56:	e008      	b.n	8005a6a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a58:	f7fe fea4 	bl	80047a4 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	2b64      	cmp	r3, #100	; 0x64
 8005a64:	d901      	bls.n	8005a6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e2ae      	b.n	8005fc8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a6a:	4b92      	ldr	r3, [pc, #584]	; (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d0f0      	beq.n	8005a58 <HAL_RCC_OscConfig+0x2a8>
 8005a76:	e014      	b.n	8005aa2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a78:	f7fe fe94 	bl	80047a4 <HAL_GetTick>
 8005a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a7e:	e008      	b.n	8005a92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a80:	f7fe fe90 	bl	80047a4 <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	2b64      	cmp	r3, #100	; 0x64
 8005a8c:	d901      	bls.n	8005a92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e29a      	b.n	8005fc8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a92:	4b88      	ldr	r3, [pc, #544]	; (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1f0      	bne.n	8005a80 <HAL_RCC_OscConfig+0x2d0>
 8005a9e:	e000      	b.n	8005aa2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d060      	beq.n	8005b70 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	2b04      	cmp	r3, #4
 8005ab2:	d005      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x310>
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	2b0c      	cmp	r3, #12
 8005ab8:	d119      	bne.n	8005aee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d116      	bne.n	8005aee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ac0:	4b7c      	ldr	r3, [pc, #496]	; (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d005      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x328>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e277      	b.n	8005fc8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ad8:	4b76      	ldr	r3, [pc, #472]	; (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	061b      	lsls	r3, r3, #24
 8005ae6:	4973      	ldr	r1, [pc, #460]	; (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005aec:	e040      	b.n	8005b70 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d023      	beq.n	8005b3e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005af6:	4b6f      	ldr	r3, [pc, #444]	; (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a6e      	ldr	r2, [pc, #440]	; (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b02:	f7fe fe4f 	bl	80047a4 <HAL_GetTick>
 8005b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b08:	e008      	b.n	8005b1c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b0a:	f7fe fe4b 	bl	80047a4 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d901      	bls.n	8005b1c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e255      	b.n	8005fc8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b1c:	4b65      	ldr	r3, [pc, #404]	; (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d0f0      	beq.n	8005b0a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b28:	4b62      	ldr	r3, [pc, #392]	; (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	061b      	lsls	r3, r3, #24
 8005b36:	495f      	ldr	r1, [pc, #380]	; (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	604b      	str	r3, [r1, #4]
 8005b3c:	e018      	b.n	8005b70 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b3e:	4b5d      	ldr	r3, [pc, #372]	; (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a5c      	ldr	r2, [pc, #368]	; (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005b44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b4a:	f7fe fe2b 	bl	80047a4 <HAL_GetTick>
 8005b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b50:	e008      	b.n	8005b64 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b52:	f7fe fe27 	bl	80047a4 <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d901      	bls.n	8005b64 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e231      	b.n	8005fc8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b64:	4b53      	ldr	r3, [pc, #332]	; (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1f0      	bne.n	8005b52 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0308 	and.w	r3, r3, #8
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d03c      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d01c      	beq.n	8005bbe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b84:	4b4b      	ldr	r3, [pc, #300]	; (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b8a:	4a4a      	ldr	r2, [pc, #296]	; (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005b8c:	f043 0301 	orr.w	r3, r3, #1
 8005b90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b94:	f7fe fe06 	bl	80047a4 <HAL_GetTick>
 8005b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b9a:	e008      	b.n	8005bae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b9c:	f7fe fe02 	bl	80047a4 <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e20c      	b.n	8005fc8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bae:	4b41      	ldr	r3, [pc, #260]	; (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bb4:	f003 0302 	and.w	r3, r3, #2
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d0ef      	beq.n	8005b9c <HAL_RCC_OscConfig+0x3ec>
 8005bbc:	e01b      	b.n	8005bf6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bbe:	4b3d      	ldr	r3, [pc, #244]	; (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bc4:	4a3b      	ldr	r2, [pc, #236]	; (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005bc6:	f023 0301 	bic.w	r3, r3, #1
 8005bca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bce:	f7fe fde9 	bl	80047a4 <HAL_GetTick>
 8005bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005bd4:	e008      	b.n	8005be8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bd6:	f7fe fde5 	bl	80047a4 <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d901      	bls.n	8005be8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e1ef      	b.n	8005fc8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005be8:	4b32      	ldr	r3, [pc, #200]	; (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1ef      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0304 	and.w	r3, r3, #4
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f000 80a6 	beq.w	8005d50 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c04:	2300      	movs	r3, #0
 8005c06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005c08:	4b2a      	ldr	r3, [pc, #168]	; (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10d      	bne.n	8005c30 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c14:	4b27      	ldr	r3, [pc, #156]	; (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c18:	4a26      	ldr	r2, [pc, #152]	; (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c1e:	6593      	str	r3, [r2, #88]	; 0x58
 8005c20:	4b24      	ldr	r3, [pc, #144]	; (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c28:	60bb      	str	r3, [r7, #8]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c30:	4b21      	ldr	r3, [pc, #132]	; (8005cb8 <HAL_RCC_OscConfig+0x508>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d118      	bne.n	8005c6e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c3c:	4b1e      	ldr	r3, [pc, #120]	; (8005cb8 <HAL_RCC_OscConfig+0x508>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a1d      	ldr	r2, [pc, #116]	; (8005cb8 <HAL_RCC_OscConfig+0x508>)
 8005c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c48:	f7fe fdac 	bl	80047a4 <HAL_GetTick>
 8005c4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c4e:	e008      	b.n	8005c62 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c50:	f7fe fda8 	bl	80047a4 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d901      	bls.n	8005c62 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e1b2      	b.n	8005fc8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c62:	4b15      	ldr	r3, [pc, #84]	; (8005cb8 <HAL_RCC_OscConfig+0x508>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d0f0      	beq.n	8005c50 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d108      	bne.n	8005c88 <HAL_RCC_OscConfig+0x4d8>
 8005c76:	4b0f      	ldr	r3, [pc, #60]	; (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c7c:	4a0d      	ldr	r2, [pc, #52]	; (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005c7e:	f043 0301 	orr.w	r3, r3, #1
 8005c82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c86:	e029      	b.n	8005cdc <HAL_RCC_OscConfig+0x52c>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	2b05      	cmp	r3, #5
 8005c8e:	d115      	bne.n	8005cbc <HAL_RCC_OscConfig+0x50c>
 8005c90:	4b08      	ldr	r3, [pc, #32]	; (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c96:	4a07      	ldr	r2, [pc, #28]	; (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005c98:	f043 0304 	orr.w	r3, r3, #4
 8005c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ca0:	4b04      	ldr	r3, [pc, #16]	; (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca6:	4a03      	ldr	r2, [pc, #12]	; (8005cb4 <HAL_RCC_OscConfig+0x504>)
 8005ca8:	f043 0301 	orr.w	r3, r3, #1
 8005cac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cb0:	e014      	b.n	8005cdc <HAL_RCC_OscConfig+0x52c>
 8005cb2:	bf00      	nop
 8005cb4:	40021000 	.word	0x40021000
 8005cb8:	40007000 	.word	0x40007000
 8005cbc:	4b9a      	ldr	r3, [pc, #616]	; (8005f28 <HAL_RCC_OscConfig+0x778>)
 8005cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc2:	4a99      	ldr	r2, [pc, #612]	; (8005f28 <HAL_RCC_OscConfig+0x778>)
 8005cc4:	f023 0301 	bic.w	r3, r3, #1
 8005cc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ccc:	4b96      	ldr	r3, [pc, #600]	; (8005f28 <HAL_RCC_OscConfig+0x778>)
 8005cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd2:	4a95      	ldr	r2, [pc, #596]	; (8005f28 <HAL_RCC_OscConfig+0x778>)
 8005cd4:	f023 0304 	bic.w	r3, r3, #4
 8005cd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d016      	beq.n	8005d12 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ce4:	f7fe fd5e 	bl	80047a4 <HAL_GetTick>
 8005ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cea:	e00a      	b.n	8005d02 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cec:	f7fe fd5a 	bl	80047a4 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d901      	bls.n	8005d02 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e162      	b.n	8005fc8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d02:	4b89      	ldr	r3, [pc, #548]	; (8005f28 <HAL_RCC_OscConfig+0x778>)
 8005d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d08:	f003 0302 	and.w	r3, r3, #2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d0ed      	beq.n	8005cec <HAL_RCC_OscConfig+0x53c>
 8005d10:	e015      	b.n	8005d3e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d12:	f7fe fd47 	bl	80047a4 <HAL_GetTick>
 8005d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d18:	e00a      	b.n	8005d30 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d1a:	f7fe fd43 	bl	80047a4 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d901      	bls.n	8005d30 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e14b      	b.n	8005fc8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d30:	4b7d      	ldr	r3, [pc, #500]	; (8005f28 <HAL_RCC_OscConfig+0x778>)
 8005d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d36:	f003 0302 	and.w	r3, r3, #2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1ed      	bne.n	8005d1a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d3e:	7ffb      	ldrb	r3, [r7, #31]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d105      	bne.n	8005d50 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d44:	4b78      	ldr	r3, [pc, #480]	; (8005f28 <HAL_RCC_OscConfig+0x778>)
 8005d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d48:	4a77      	ldr	r2, [pc, #476]	; (8005f28 <HAL_RCC_OscConfig+0x778>)
 8005d4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d4e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0320 	and.w	r3, r3, #32
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d03c      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d01c      	beq.n	8005d9e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d64:	4b70      	ldr	r3, [pc, #448]	; (8005f28 <HAL_RCC_OscConfig+0x778>)
 8005d66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d6a:	4a6f      	ldr	r2, [pc, #444]	; (8005f28 <HAL_RCC_OscConfig+0x778>)
 8005d6c:	f043 0301 	orr.w	r3, r3, #1
 8005d70:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d74:	f7fe fd16 	bl	80047a4 <HAL_GetTick>
 8005d78:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d7a:	e008      	b.n	8005d8e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d7c:	f7fe fd12 	bl	80047a4 <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d901      	bls.n	8005d8e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e11c      	b.n	8005fc8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d8e:	4b66      	ldr	r3, [pc, #408]	; (8005f28 <HAL_RCC_OscConfig+0x778>)
 8005d90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d94:	f003 0302 	and.w	r3, r3, #2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d0ef      	beq.n	8005d7c <HAL_RCC_OscConfig+0x5cc>
 8005d9c:	e01b      	b.n	8005dd6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d9e:	4b62      	ldr	r3, [pc, #392]	; (8005f28 <HAL_RCC_OscConfig+0x778>)
 8005da0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005da4:	4a60      	ldr	r2, [pc, #384]	; (8005f28 <HAL_RCC_OscConfig+0x778>)
 8005da6:	f023 0301 	bic.w	r3, r3, #1
 8005daa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dae:	f7fe fcf9 	bl	80047a4 <HAL_GetTick>
 8005db2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005db4:	e008      	b.n	8005dc8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005db6:	f7fe fcf5 	bl	80047a4 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d901      	bls.n	8005dc8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e0ff      	b.n	8005fc8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005dc8:	4b57      	ldr	r3, [pc, #348]	; (8005f28 <HAL_RCC_OscConfig+0x778>)
 8005dca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1ef      	bne.n	8005db6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f000 80f3 	beq.w	8005fc6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	f040 80c9 	bne.w	8005f7c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005dea:	4b4f      	ldr	r3, [pc, #316]	; (8005f28 <HAL_RCC_OscConfig+0x778>)
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	f003 0203 	and.w	r2, r3, #3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d12c      	bne.n	8005e58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d123      	bne.n	8005e58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e1a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d11b      	bne.n	8005e58 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d113      	bne.n	8005e58 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e3a:	085b      	lsrs	r3, r3, #1
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d109      	bne.n	8005e58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4e:	085b      	lsrs	r3, r3, #1
 8005e50:	3b01      	subs	r3, #1
 8005e52:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d06b      	beq.n	8005f30 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	2b0c      	cmp	r3, #12
 8005e5c:	d062      	beq.n	8005f24 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005e5e:	4b32      	ldr	r3, [pc, #200]	; (8005f28 <HAL_RCC_OscConfig+0x778>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d001      	beq.n	8005e6e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e0ac      	b.n	8005fc8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005e6e:	4b2e      	ldr	r3, [pc, #184]	; (8005f28 <HAL_RCC_OscConfig+0x778>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a2d      	ldr	r2, [pc, #180]	; (8005f28 <HAL_RCC_OscConfig+0x778>)
 8005e74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e78:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e7a:	f7fe fc93 	bl	80047a4 <HAL_GetTick>
 8005e7e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e80:	e008      	b.n	8005e94 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e82:	f7fe fc8f 	bl	80047a4 <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d901      	bls.n	8005e94 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e099      	b.n	8005fc8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e94:	4b24      	ldr	r3, [pc, #144]	; (8005f28 <HAL_RCC_OscConfig+0x778>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1f0      	bne.n	8005e82 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ea0:	4b21      	ldr	r3, [pc, #132]	; (8005f28 <HAL_RCC_OscConfig+0x778>)
 8005ea2:	68da      	ldr	r2, [r3, #12]
 8005ea4:	4b21      	ldr	r3, [pc, #132]	; (8005f2c <HAL_RCC_OscConfig+0x77c>)
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005eb0:	3a01      	subs	r2, #1
 8005eb2:	0112      	lsls	r2, r2, #4
 8005eb4:	4311      	orrs	r1, r2
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005eba:	0212      	lsls	r2, r2, #8
 8005ebc:	4311      	orrs	r1, r2
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005ec2:	0852      	lsrs	r2, r2, #1
 8005ec4:	3a01      	subs	r2, #1
 8005ec6:	0552      	lsls	r2, r2, #21
 8005ec8:	4311      	orrs	r1, r2
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005ece:	0852      	lsrs	r2, r2, #1
 8005ed0:	3a01      	subs	r2, #1
 8005ed2:	0652      	lsls	r2, r2, #25
 8005ed4:	4311      	orrs	r1, r2
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005eda:	06d2      	lsls	r2, r2, #27
 8005edc:	430a      	orrs	r2, r1
 8005ede:	4912      	ldr	r1, [pc, #72]	; (8005f28 <HAL_RCC_OscConfig+0x778>)
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005ee4:	4b10      	ldr	r3, [pc, #64]	; (8005f28 <HAL_RCC_OscConfig+0x778>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a0f      	ldr	r2, [pc, #60]	; (8005f28 <HAL_RCC_OscConfig+0x778>)
 8005eea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005eee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ef0:	4b0d      	ldr	r3, [pc, #52]	; (8005f28 <HAL_RCC_OscConfig+0x778>)
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	4a0c      	ldr	r2, [pc, #48]	; (8005f28 <HAL_RCC_OscConfig+0x778>)
 8005ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005efa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005efc:	f7fe fc52 	bl	80047a4 <HAL_GetTick>
 8005f00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f02:	e008      	b.n	8005f16 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f04:	f7fe fc4e 	bl	80047a4 <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e058      	b.n	8005fc8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f16:	4b04      	ldr	r3, [pc, #16]	; (8005f28 <HAL_RCC_OscConfig+0x778>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d0f0      	beq.n	8005f04 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f22:	e050      	b.n	8005fc6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e04f      	b.n	8005fc8 <HAL_RCC_OscConfig+0x818>
 8005f28:	40021000 	.word	0x40021000
 8005f2c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f30:	4b27      	ldr	r3, [pc, #156]	; (8005fd0 <HAL_RCC_OscConfig+0x820>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d144      	bne.n	8005fc6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005f3c:	4b24      	ldr	r3, [pc, #144]	; (8005fd0 <HAL_RCC_OscConfig+0x820>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a23      	ldr	r2, [pc, #140]	; (8005fd0 <HAL_RCC_OscConfig+0x820>)
 8005f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f46:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f48:	4b21      	ldr	r3, [pc, #132]	; (8005fd0 <HAL_RCC_OscConfig+0x820>)
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	4a20      	ldr	r2, [pc, #128]	; (8005fd0 <HAL_RCC_OscConfig+0x820>)
 8005f4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f54:	f7fe fc26 	bl	80047a4 <HAL_GetTick>
 8005f58:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f5a:	e008      	b.n	8005f6e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f5c:	f7fe fc22 	bl	80047a4 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d901      	bls.n	8005f6e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e02c      	b.n	8005fc8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f6e:	4b18      	ldr	r3, [pc, #96]	; (8005fd0 <HAL_RCC_OscConfig+0x820>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d0f0      	beq.n	8005f5c <HAL_RCC_OscConfig+0x7ac>
 8005f7a:	e024      	b.n	8005fc6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	2b0c      	cmp	r3, #12
 8005f80:	d01f      	beq.n	8005fc2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f82:	4b13      	ldr	r3, [pc, #76]	; (8005fd0 <HAL_RCC_OscConfig+0x820>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a12      	ldr	r2, [pc, #72]	; (8005fd0 <HAL_RCC_OscConfig+0x820>)
 8005f88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f8e:	f7fe fc09 	bl	80047a4 <HAL_GetTick>
 8005f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f94:	e008      	b.n	8005fa8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f96:	f7fe fc05 	bl	80047a4 <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d901      	bls.n	8005fa8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e00f      	b.n	8005fc8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fa8:	4b09      	ldr	r3, [pc, #36]	; (8005fd0 <HAL_RCC_OscConfig+0x820>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1f0      	bne.n	8005f96 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005fb4:	4b06      	ldr	r3, [pc, #24]	; (8005fd0 <HAL_RCC_OscConfig+0x820>)
 8005fb6:	68da      	ldr	r2, [r3, #12]
 8005fb8:	4905      	ldr	r1, [pc, #20]	; (8005fd0 <HAL_RCC_OscConfig+0x820>)
 8005fba:	4b06      	ldr	r3, [pc, #24]	; (8005fd4 <HAL_RCC_OscConfig+0x824>)
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	60cb      	str	r3, [r1, #12]
 8005fc0:	e001      	b.n	8005fc6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e000      	b.n	8005fc8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3720      	adds	r7, #32
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	40021000 	.word	0x40021000
 8005fd4:	feeefffc 	.word	0xfeeefffc

08005fd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d101      	bne.n	8005fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e0e7      	b.n	80061bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fec:	4b75      	ldr	r3, [pc, #468]	; (80061c4 <HAL_RCC_ClockConfig+0x1ec>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0307 	and.w	r3, r3, #7
 8005ff4:	683a      	ldr	r2, [r7, #0]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d910      	bls.n	800601c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ffa:	4b72      	ldr	r3, [pc, #456]	; (80061c4 <HAL_RCC_ClockConfig+0x1ec>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f023 0207 	bic.w	r2, r3, #7
 8006002:	4970      	ldr	r1, [pc, #448]	; (80061c4 <HAL_RCC_ClockConfig+0x1ec>)
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	4313      	orrs	r3, r2
 8006008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800600a:	4b6e      	ldr	r3, [pc, #440]	; (80061c4 <HAL_RCC_ClockConfig+0x1ec>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0307 	and.w	r3, r3, #7
 8006012:	683a      	ldr	r2, [r7, #0]
 8006014:	429a      	cmp	r2, r3
 8006016:	d001      	beq.n	800601c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e0cf      	b.n	80061bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0302 	and.w	r3, r3, #2
 8006024:	2b00      	cmp	r3, #0
 8006026:	d010      	beq.n	800604a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	689a      	ldr	r2, [r3, #8]
 800602c:	4b66      	ldr	r3, [pc, #408]	; (80061c8 <HAL_RCC_ClockConfig+0x1f0>)
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006034:	429a      	cmp	r2, r3
 8006036:	d908      	bls.n	800604a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006038:	4b63      	ldr	r3, [pc, #396]	; (80061c8 <HAL_RCC_ClockConfig+0x1f0>)
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	4960      	ldr	r1, [pc, #384]	; (80061c8 <HAL_RCC_ClockConfig+0x1f0>)
 8006046:	4313      	orrs	r3, r2
 8006048:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	2b00      	cmp	r3, #0
 8006054:	d04c      	beq.n	80060f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	2b03      	cmp	r3, #3
 800605c:	d107      	bne.n	800606e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800605e:	4b5a      	ldr	r3, [pc, #360]	; (80061c8 <HAL_RCC_ClockConfig+0x1f0>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d121      	bne.n	80060ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e0a6      	b.n	80061bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	2b02      	cmp	r3, #2
 8006074:	d107      	bne.n	8006086 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006076:	4b54      	ldr	r3, [pc, #336]	; (80061c8 <HAL_RCC_ClockConfig+0x1f0>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d115      	bne.n	80060ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e09a      	b.n	80061bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d107      	bne.n	800609e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800608e:	4b4e      	ldr	r3, [pc, #312]	; (80061c8 <HAL_RCC_ClockConfig+0x1f0>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0302 	and.w	r3, r3, #2
 8006096:	2b00      	cmp	r3, #0
 8006098:	d109      	bne.n	80060ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e08e      	b.n	80061bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800609e:	4b4a      	ldr	r3, [pc, #296]	; (80061c8 <HAL_RCC_ClockConfig+0x1f0>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e086      	b.n	80061bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80060ae:	4b46      	ldr	r3, [pc, #280]	; (80061c8 <HAL_RCC_ClockConfig+0x1f0>)
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f023 0203 	bic.w	r2, r3, #3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	4943      	ldr	r1, [pc, #268]	; (80061c8 <HAL_RCC_ClockConfig+0x1f0>)
 80060bc:	4313      	orrs	r3, r2
 80060be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060c0:	f7fe fb70 	bl	80047a4 <HAL_GetTick>
 80060c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060c6:	e00a      	b.n	80060de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060c8:	f7fe fb6c 	bl	80047a4 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d901      	bls.n	80060de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e06e      	b.n	80061bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060de:	4b3a      	ldr	r3, [pc, #232]	; (80061c8 <HAL_RCC_ClockConfig+0x1f0>)
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	f003 020c 	and.w	r2, r3, #12
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d1eb      	bne.n	80060c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0302 	and.w	r3, r3, #2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d010      	beq.n	800611e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	689a      	ldr	r2, [r3, #8]
 8006100:	4b31      	ldr	r3, [pc, #196]	; (80061c8 <HAL_RCC_ClockConfig+0x1f0>)
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006108:	429a      	cmp	r2, r3
 800610a:	d208      	bcs.n	800611e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800610c:	4b2e      	ldr	r3, [pc, #184]	; (80061c8 <HAL_RCC_ClockConfig+0x1f0>)
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	492b      	ldr	r1, [pc, #172]	; (80061c8 <HAL_RCC_ClockConfig+0x1f0>)
 800611a:	4313      	orrs	r3, r2
 800611c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800611e:	4b29      	ldr	r3, [pc, #164]	; (80061c4 <HAL_RCC_ClockConfig+0x1ec>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0307 	and.w	r3, r3, #7
 8006126:	683a      	ldr	r2, [r7, #0]
 8006128:	429a      	cmp	r2, r3
 800612a:	d210      	bcs.n	800614e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800612c:	4b25      	ldr	r3, [pc, #148]	; (80061c4 <HAL_RCC_ClockConfig+0x1ec>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f023 0207 	bic.w	r2, r3, #7
 8006134:	4923      	ldr	r1, [pc, #140]	; (80061c4 <HAL_RCC_ClockConfig+0x1ec>)
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	4313      	orrs	r3, r2
 800613a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800613c:	4b21      	ldr	r3, [pc, #132]	; (80061c4 <HAL_RCC_ClockConfig+0x1ec>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0307 	and.w	r3, r3, #7
 8006144:	683a      	ldr	r2, [r7, #0]
 8006146:	429a      	cmp	r2, r3
 8006148:	d001      	beq.n	800614e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e036      	b.n	80061bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0304 	and.w	r3, r3, #4
 8006156:	2b00      	cmp	r3, #0
 8006158:	d008      	beq.n	800616c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800615a:	4b1b      	ldr	r3, [pc, #108]	; (80061c8 <HAL_RCC_ClockConfig+0x1f0>)
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	4918      	ldr	r1, [pc, #96]	; (80061c8 <HAL_RCC_ClockConfig+0x1f0>)
 8006168:	4313      	orrs	r3, r2
 800616a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0308 	and.w	r3, r3, #8
 8006174:	2b00      	cmp	r3, #0
 8006176:	d009      	beq.n	800618c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006178:	4b13      	ldr	r3, [pc, #76]	; (80061c8 <HAL_RCC_ClockConfig+0x1f0>)
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	00db      	lsls	r3, r3, #3
 8006186:	4910      	ldr	r1, [pc, #64]	; (80061c8 <HAL_RCC_ClockConfig+0x1f0>)
 8006188:	4313      	orrs	r3, r2
 800618a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800618c:	f000 f824 	bl	80061d8 <HAL_RCC_GetSysClockFreq>
 8006190:	4602      	mov	r2, r0
 8006192:	4b0d      	ldr	r3, [pc, #52]	; (80061c8 <HAL_RCC_ClockConfig+0x1f0>)
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	091b      	lsrs	r3, r3, #4
 8006198:	f003 030f 	and.w	r3, r3, #15
 800619c:	490b      	ldr	r1, [pc, #44]	; (80061cc <HAL_RCC_ClockConfig+0x1f4>)
 800619e:	5ccb      	ldrb	r3, [r1, r3]
 80061a0:	f003 031f 	and.w	r3, r3, #31
 80061a4:	fa22 f303 	lsr.w	r3, r2, r3
 80061a8:	4a09      	ldr	r2, [pc, #36]	; (80061d0 <HAL_RCC_ClockConfig+0x1f8>)
 80061aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80061ac:	4b09      	ldr	r3, [pc, #36]	; (80061d4 <HAL_RCC_ClockConfig+0x1fc>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7fd ff37 	bl	8004024 <HAL_InitTick>
 80061b6:	4603      	mov	r3, r0
 80061b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80061ba:	7afb      	ldrb	r3, [r7, #11]
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	40022000 	.word	0x40022000
 80061c8:	40021000 	.word	0x40021000
 80061cc:	0800c754 	.word	0x0800c754
 80061d0:	200000f0 	.word	0x200000f0
 80061d4:	200000f4 	.word	0x200000f4

080061d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061d8:	b480      	push	{r7}
 80061da:	b089      	sub	sp, #36	; 0x24
 80061dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80061de:	2300      	movs	r3, #0
 80061e0:	61fb      	str	r3, [r7, #28]
 80061e2:	2300      	movs	r3, #0
 80061e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061e6:	4b3e      	ldr	r3, [pc, #248]	; (80062e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f003 030c 	and.w	r3, r3, #12
 80061ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061f0:	4b3b      	ldr	r3, [pc, #236]	; (80062e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f003 0303 	and.w	r3, r3, #3
 80061f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d005      	beq.n	800620c <HAL_RCC_GetSysClockFreq+0x34>
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	2b0c      	cmp	r3, #12
 8006204:	d121      	bne.n	800624a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d11e      	bne.n	800624a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800620c:	4b34      	ldr	r3, [pc, #208]	; (80062e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0308 	and.w	r3, r3, #8
 8006214:	2b00      	cmp	r3, #0
 8006216:	d107      	bne.n	8006228 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006218:	4b31      	ldr	r3, [pc, #196]	; (80062e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800621a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800621e:	0a1b      	lsrs	r3, r3, #8
 8006220:	f003 030f 	and.w	r3, r3, #15
 8006224:	61fb      	str	r3, [r7, #28]
 8006226:	e005      	b.n	8006234 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006228:	4b2d      	ldr	r3, [pc, #180]	; (80062e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	091b      	lsrs	r3, r3, #4
 800622e:	f003 030f 	and.w	r3, r3, #15
 8006232:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006234:	4a2b      	ldr	r2, [pc, #172]	; (80062e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800623c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10d      	bne.n	8006260 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006248:	e00a      	b.n	8006260 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	2b04      	cmp	r3, #4
 800624e:	d102      	bne.n	8006256 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006250:	4b25      	ldr	r3, [pc, #148]	; (80062e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006252:	61bb      	str	r3, [r7, #24]
 8006254:	e004      	b.n	8006260 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	2b08      	cmp	r3, #8
 800625a:	d101      	bne.n	8006260 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800625c:	4b23      	ldr	r3, [pc, #140]	; (80062ec <HAL_RCC_GetSysClockFreq+0x114>)
 800625e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	2b0c      	cmp	r3, #12
 8006264:	d134      	bne.n	80062d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006266:	4b1e      	ldr	r3, [pc, #120]	; (80062e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	f003 0303 	and.w	r3, r3, #3
 800626e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	2b02      	cmp	r3, #2
 8006274:	d003      	beq.n	800627e <HAL_RCC_GetSysClockFreq+0xa6>
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	2b03      	cmp	r3, #3
 800627a:	d003      	beq.n	8006284 <HAL_RCC_GetSysClockFreq+0xac>
 800627c:	e005      	b.n	800628a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800627e:	4b1a      	ldr	r3, [pc, #104]	; (80062e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006280:	617b      	str	r3, [r7, #20]
      break;
 8006282:	e005      	b.n	8006290 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006284:	4b19      	ldr	r3, [pc, #100]	; (80062ec <HAL_RCC_GetSysClockFreq+0x114>)
 8006286:	617b      	str	r3, [r7, #20]
      break;
 8006288:	e002      	b.n	8006290 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	617b      	str	r3, [r7, #20]
      break;
 800628e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006290:	4b13      	ldr	r3, [pc, #76]	; (80062e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	091b      	lsrs	r3, r3, #4
 8006296:	f003 0307 	and.w	r3, r3, #7
 800629a:	3301      	adds	r3, #1
 800629c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800629e:	4b10      	ldr	r3, [pc, #64]	; (80062e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	0a1b      	lsrs	r3, r3, #8
 80062a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	fb03 f202 	mul.w	r2, r3, r2
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80062b6:	4b0a      	ldr	r3, [pc, #40]	; (80062e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	0e5b      	lsrs	r3, r3, #25
 80062bc:	f003 0303 	and.w	r3, r3, #3
 80062c0:	3301      	adds	r3, #1
 80062c2:	005b      	lsls	r3, r3, #1
 80062c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80062d0:	69bb      	ldr	r3, [r7, #24]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3724      	adds	r7, #36	; 0x24
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	40021000 	.word	0x40021000
 80062e4:	0800c76c 	.word	0x0800c76c
 80062e8:	00f42400 	.word	0x00f42400
 80062ec:	007a1200 	.word	0x007a1200

080062f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062f0:	b480      	push	{r7}
 80062f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062f4:	4b03      	ldr	r3, [pc, #12]	; (8006304 <HAL_RCC_GetHCLKFreq+0x14>)
 80062f6:	681b      	ldr	r3, [r3, #0]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	200000f0 	.word	0x200000f0

08006308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800630c:	f7ff fff0 	bl	80062f0 <HAL_RCC_GetHCLKFreq>
 8006310:	4602      	mov	r2, r0
 8006312:	4b06      	ldr	r3, [pc, #24]	; (800632c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	0a1b      	lsrs	r3, r3, #8
 8006318:	f003 0307 	and.w	r3, r3, #7
 800631c:	4904      	ldr	r1, [pc, #16]	; (8006330 <HAL_RCC_GetPCLK1Freq+0x28>)
 800631e:	5ccb      	ldrb	r3, [r1, r3]
 8006320:	f003 031f 	and.w	r3, r3, #31
 8006324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006328:	4618      	mov	r0, r3
 800632a:	bd80      	pop	{r7, pc}
 800632c:	40021000 	.word	0x40021000
 8006330:	0800c764 	.word	0x0800c764

08006334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006338:	f7ff ffda 	bl	80062f0 <HAL_RCC_GetHCLKFreq>
 800633c:	4602      	mov	r2, r0
 800633e:	4b06      	ldr	r3, [pc, #24]	; (8006358 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	0adb      	lsrs	r3, r3, #11
 8006344:	f003 0307 	and.w	r3, r3, #7
 8006348:	4904      	ldr	r1, [pc, #16]	; (800635c <HAL_RCC_GetPCLK2Freq+0x28>)
 800634a:	5ccb      	ldrb	r3, [r1, r3]
 800634c:	f003 031f 	and.w	r3, r3, #31
 8006350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006354:	4618      	mov	r0, r3
 8006356:	bd80      	pop	{r7, pc}
 8006358:	40021000 	.word	0x40021000
 800635c:	0800c764 	.word	0x0800c764

08006360 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	220f      	movs	r2, #15
 800636e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006370:	4b12      	ldr	r3, [pc, #72]	; (80063bc <HAL_RCC_GetClockConfig+0x5c>)
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f003 0203 	and.w	r2, r3, #3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800637c:	4b0f      	ldr	r3, [pc, #60]	; (80063bc <HAL_RCC_GetClockConfig+0x5c>)
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006388:	4b0c      	ldr	r3, [pc, #48]	; (80063bc <HAL_RCC_GetClockConfig+0x5c>)
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006394:	4b09      	ldr	r3, [pc, #36]	; (80063bc <HAL_RCC_GetClockConfig+0x5c>)
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	08db      	lsrs	r3, r3, #3
 800639a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80063a2:	4b07      	ldr	r3, [pc, #28]	; (80063c0 <HAL_RCC_GetClockConfig+0x60>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0207 	and.w	r2, r3, #7
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	601a      	str	r2, [r3, #0]
}
 80063ae:	bf00      	nop
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	40021000 	.word	0x40021000
 80063c0:	40022000 	.word	0x40022000

080063c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80063cc:	2300      	movs	r3, #0
 80063ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80063d0:	4b2a      	ldr	r3, [pc, #168]	; (800647c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d003      	beq.n	80063e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80063dc:	f7ff f984 	bl	80056e8 <HAL_PWREx_GetVoltageRange>
 80063e0:	6178      	str	r0, [r7, #20]
 80063e2:	e014      	b.n	800640e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80063e4:	4b25      	ldr	r3, [pc, #148]	; (800647c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e8:	4a24      	ldr	r2, [pc, #144]	; (800647c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063ee:	6593      	str	r3, [r2, #88]	; 0x58
 80063f0:	4b22      	ldr	r3, [pc, #136]	; (800647c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063f8:	60fb      	str	r3, [r7, #12]
 80063fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80063fc:	f7ff f974 	bl	80056e8 <HAL_PWREx_GetVoltageRange>
 8006400:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006402:	4b1e      	ldr	r3, [pc, #120]	; (800647c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006406:	4a1d      	ldr	r2, [pc, #116]	; (800647c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006408:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800640c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006414:	d10b      	bne.n	800642e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2b80      	cmp	r3, #128	; 0x80
 800641a:	d919      	bls.n	8006450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2ba0      	cmp	r3, #160	; 0xa0
 8006420:	d902      	bls.n	8006428 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006422:	2302      	movs	r3, #2
 8006424:	613b      	str	r3, [r7, #16]
 8006426:	e013      	b.n	8006450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006428:	2301      	movs	r3, #1
 800642a:	613b      	str	r3, [r7, #16]
 800642c:	e010      	b.n	8006450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2b80      	cmp	r3, #128	; 0x80
 8006432:	d902      	bls.n	800643a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006434:	2303      	movs	r3, #3
 8006436:	613b      	str	r3, [r7, #16]
 8006438:	e00a      	b.n	8006450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b80      	cmp	r3, #128	; 0x80
 800643e:	d102      	bne.n	8006446 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006440:	2302      	movs	r3, #2
 8006442:	613b      	str	r3, [r7, #16]
 8006444:	e004      	b.n	8006450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2b70      	cmp	r3, #112	; 0x70
 800644a:	d101      	bne.n	8006450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800644c:	2301      	movs	r3, #1
 800644e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006450:	4b0b      	ldr	r3, [pc, #44]	; (8006480 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f023 0207 	bic.w	r2, r3, #7
 8006458:	4909      	ldr	r1, [pc, #36]	; (8006480 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	4313      	orrs	r3, r2
 800645e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006460:	4b07      	ldr	r3, [pc, #28]	; (8006480 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0307 	and.w	r3, r3, #7
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	429a      	cmp	r2, r3
 800646c:	d001      	beq.n	8006472 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e000      	b.n	8006474 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3718      	adds	r7, #24
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}
 800647c:	40021000 	.word	0x40021000
 8006480:	40022000 	.word	0x40022000

08006484 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800648c:	2300      	movs	r3, #0
 800648e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006490:	2300      	movs	r3, #0
 8006492:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800649c:	2b00      	cmp	r3, #0
 800649e:	d031      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80064a8:	d01a      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80064aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80064ae:	d814      	bhi.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d009      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80064b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064b8:	d10f      	bne.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80064ba:	4b5d      	ldr	r3, [pc, #372]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	4a5c      	ldr	r2, [pc, #368]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064c4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80064c6:	e00c      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	3304      	adds	r3, #4
 80064cc:	2100      	movs	r1, #0
 80064ce:	4618      	mov	r0, r3
 80064d0:	f000 f9ce 	bl	8006870 <RCCEx_PLLSAI1_Config>
 80064d4:	4603      	mov	r3, r0
 80064d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80064d8:	e003      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	74fb      	strb	r3, [r7, #19]
      break;
 80064de:	e000      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80064e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064e2:	7cfb      	ldrb	r3, [r7, #19]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d10b      	bne.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064e8:	4b51      	ldr	r3, [pc, #324]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f6:	494e      	ldr	r1, [pc, #312]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80064f8:	4313      	orrs	r3, r2
 80064fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80064fe:	e001      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006500:	7cfb      	ldrb	r3, [r7, #19]
 8006502:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 809e 	beq.w	800664e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006512:	2300      	movs	r3, #0
 8006514:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006516:	4b46      	ldr	r3, [pc, #280]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800651a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006522:	2301      	movs	r3, #1
 8006524:	e000      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006526:	2300      	movs	r3, #0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00d      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800652c:	4b40      	ldr	r3, [pc, #256]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800652e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006530:	4a3f      	ldr	r2, [pc, #252]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006536:	6593      	str	r3, [r2, #88]	; 0x58
 8006538:	4b3d      	ldr	r3, [pc, #244]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800653a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800653c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006540:	60bb      	str	r3, [r7, #8]
 8006542:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006544:	2301      	movs	r3, #1
 8006546:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006548:	4b3a      	ldr	r3, [pc, #232]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a39      	ldr	r2, [pc, #228]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800654e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006552:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006554:	f7fe f926 	bl	80047a4 <HAL_GetTick>
 8006558:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800655a:	e009      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800655c:	f7fe f922 	bl	80047a4 <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	2b02      	cmp	r3, #2
 8006568:	d902      	bls.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	74fb      	strb	r3, [r7, #19]
        break;
 800656e:	e005      	b.n	800657c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006570:	4b30      	ldr	r3, [pc, #192]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006578:	2b00      	cmp	r3, #0
 800657a:	d0ef      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800657c:	7cfb      	ldrb	r3, [r7, #19]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d15a      	bne.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006582:	4b2b      	ldr	r3, [pc, #172]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006588:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800658c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d01e      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	429a      	cmp	r2, r3
 800659c:	d019      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800659e:	4b24      	ldr	r3, [pc, #144]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065a8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80065aa:	4b21      	ldr	r3, [pc, #132]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065b0:	4a1f      	ldr	r2, [pc, #124]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80065ba:	4b1d      	ldr	r3, [pc, #116]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065c0:	4a1b      	ldr	r2, [pc, #108]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80065ca:	4a19      	ldr	r2, [pc, #100]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d016      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065dc:	f7fe f8e2 	bl	80047a4 <HAL_GetTick>
 80065e0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065e2:	e00b      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065e4:	f7fe f8de 	bl	80047a4 <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d902      	bls.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	74fb      	strb	r3, [r7, #19]
            break;
 80065fa:	e006      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065fc:	4b0c      	ldr	r3, [pc, #48]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006602:	f003 0302 	and.w	r3, r3, #2
 8006606:	2b00      	cmp	r3, #0
 8006608:	d0ec      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800660a:	7cfb      	ldrb	r3, [r7, #19]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10b      	bne.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006610:	4b07      	ldr	r3, [pc, #28]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006616:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800661e:	4904      	ldr	r1, [pc, #16]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006620:	4313      	orrs	r3, r2
 8006622:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006626:	e009      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006628:	7cfb      	ldrb	r3, [r7, #19]
 800662a:	74bb      	strb	r3, [r7, #18]
 800662c:	e006      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800662e:	bf00      	nop
 8006630:	40021000 	.word	0x40021000
 8006634:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006638:	7cfb      	ldrb	r3, [r7, #19]
 800663a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800663c:	7c7b      	ldrb	r3, [r7, #17]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d105      	bne.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006642:	4b8a      	ldr	r3, [pc, #552]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006646:	4a89      	ldr	r2, [pc, #548]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006648:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800664c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00a      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800665a:	4b84      	ldr	r3, [pc, #528]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800665c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006660:	f023 0203 	bic.w	r2, r3, #3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	4980      	ldr	r1, [pc, #512]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800666a:	4313      	orrs	r3, r2
 800666c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0302 	and.w	r3, r3, #2
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00a      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800667c:	4b7b      	ldr	r3, [pc, #492]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800667e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006682:	f023 020c 	bic.w	r2, r3, #12
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668a:	4978      	ldr	r1, [pc, #480]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800668c:	4313      	orrs	r3, r2
 800668e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0320 	and.w	r3, r3, #32
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00a      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800669e:	4b73      	ldr	r3, [pc, #460]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ac:	496f      	ldr	r1, [pc, #444]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00a      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80066c0:	4b6a      	ldr	r3, [pc, #424]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066c6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ce:	4967      	ldr	r1, [pc, #412]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066d0:	4313      	orrs	r3, r2
 80066d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00a      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80066e2:	4b62      	ldr	r3, [pc, #392]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f0:	495e      	ldr	r1, [pc, #376]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00a      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006704:	4b59      	ldr	r3, [pc, #356]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800670a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006712:	4956      	ldr	r1, [pc, #344]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006714:	4313      	orrs	r3, r2
 8006716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00a      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006726:	4b51      	ldr	r3, [pc, #324]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800672c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006734:	494d      	ldr	r1, [pc, #308]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006736:	4313      	orrs	r3, r2
 8006738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d028      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006748:	4b48      	ldr	r3, [pc, #288]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800674a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800674e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006756:	4945      	ldr	r1, [pc, #276]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006758:	4313      	orrs	r3, r2
 800675a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006762:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006766:	d106      	bne.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006768:	4b40      	ldr	r3, [pc, #256]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	4a3f      	ldr	r2, [pc, #252]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800676e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006772:	60d3      	str	r3, [r2, #12]
 8006774:	e011      	b.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800677e:	d10c      	bne.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	3304      	adds	r3, #4
 8006784:	2101      	movs	r1, #1
 8006786:	4618      	mov	r0, r3
 8006788:	f000 f872 	bl	8006870 <RCCEx_PLLSAI1_Config>
 800678c:	4603      	mov	r3, r0
 800678e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006790:	7cfb      	ldrb	r3, [r7, #19]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d001      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8006796:	7cfb      	ldrb	r3, [r7, #19]
 8006798:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d028      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80067a6:	4b31      	ldr	r3, [pc, #196]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b4:	492d      	ldr	r1, [pc, #180]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067c4:	d106      	bne.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067c6:	4b29      	ldr	r3, [pc, #164]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	4a28      	ldr	r2, [pc, #160]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067d0:	60d3      	str	r3, [r2, #12]
 80067d2:	e011      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067dc:	d10c      	bne.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	3304      	adds	r3, #4
 80067e2:	2101      	movs	r1, #1
 80067e4:	4618      	mov	r0, r3
 80067e6:	f000 f843 	bl	8006870 <RCCEx_PLLSAI1_Config>
 80067ea:	4603      	mov	r3, r0
 80067ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80067ee:	7cfb      	ldrb	r3, [r7, #19]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d001      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80067f4:	7cfb      	ldrb	r3, [r7, #19]
 80067f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d01c      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006804:	4b19      	ldr	r3, [pc, #100]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800680a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006812:	4916      	ldr	r1, [pc, #88]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006814:	4313      	orrs	r3, r2
 8006816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800681e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006822:	d10c      	bne.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	3304      	adds	r3, #4
 8006828:	2102      	movs	r1, #2
 800682a:	4618      	mov	r0, r3
 800682c:	f000 f820 	bl	8006870 <RCCEx_PLLSAI1_Config>
 8006830:	4603      	mov	r3, r0
 8006832:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006834:	7cfb      	ldrb	r3, [r7, #19]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d001      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800683a:	7cfb      	ldrb	r3, [r7, #19]
 800683c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00a      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800684a:	4b08      	ldr	r3, [pc, #32]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800684c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006850:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006858:	4904      	ldr	r1, [pc, #16]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800685a:	4313      	orrs	r3, r2
 800685c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006860:	7cbb      	ldrb	r3, [r7, #18]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3718      	adds	r7, #24
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	40021000 	.word	0x40021000

08006870 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800687a:	2300      	movs	r3, #0
 800687c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800687e:	4b74      	ldr	r3, [pc, #464]	; (8006a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	f003 0303 	and.w	r3, r3, #3
 8006886:	2b00      	cmp	r3, #0
 8006888:	d018      	beq.n	80068bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800688a:	4b71      	ldr	r3, [pc, #452]	; (8006a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	f003 0203 	and.w	r2, r3, #3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	429a      	cmp	r2, r3
 8006898:	d10d      	bne.n	80068b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
       ||
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d009      	beq.n	80068b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80068a2:	4b6b      	ldr	r3, [pc, #428]	; (8006a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	091b      	lsrs	r3, r3, #4
 80068a8:	f003 0307 	and.w	r3, r3, #7
 80068ac:	1c5a      	adds	r2, r3, #1
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
       ||
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d047      	beq.n	8006946 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	73fb      	strb	r3, [r7, #15]
 80068ba:	e044      	b.n	8006946 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2b03      	cmp	r3, #3
 80068c2:	d018      	beq.n	80068f6 <RCCEx_PLLSAI1_Config+0x86>
 80068c4:	2b03      	cmp	r3, #3
 80068c6:	d825      	bhi.n	8006914 <RCCEx_PLLSAI1_Config+0xa4>
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d002      	beq.n	80068d2 <RCCEx_PLLSAI1_Config+0x62>
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d009      	beq.n	80068e4 <RCCEx_PLLSAI1_Config+0x74>
 80068d0:	e020      	b.n	8006914 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80068d2:	4b5f      	ldr	r3, [pc, #380]	; (8006a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0302 	and.w	r3, r3, #2
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d11d      	bne.n	800691a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068e2:	e01a      	b.n	800691a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80068e4:	4b5a      	ldr	r3, [pc, #360]	; (8006a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d116      	bne.n	800691e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068f4:	e013      	b.n	800691e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80068f6:	4b56      	ldr	r3, [pc, #344]	; (8006a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d10f      	bne.n	8006922 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006902:	4b53      	ldr	r3, [pc, #332]	; (8006a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d109      	bne.n	8006922 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006912:	e006      	b.n	8006922 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	73fb      	strb	r3, [r7, #15]
      break;
 8006918:	e004      	b.n	8006924 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800691a:	bf00      	nop
 800691c:	e002      	b.n	8006924 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800691e:	bf00      	nop
 8006920:	e000      	b.n	8006924 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006922:	bf00      	nop
    }

    if(status == HAL_OK)
 8006924:	7bfb      	ldrb	r3, [r7, #15]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10d      	bne.n	8006946 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800692a:	4b49      	ldr	r3, [pc, #292]	; (8006a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6819      	ldr	r1, [r3, #0]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	3b01      	subs	r3, #1
 800693c:	011b      	lsls	r3, r3, #4
 800693e:	430b      	orrs	r3, r1
 8006940:	4943      	ldr	r1, [pc, #268]	; (8006a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006942:	4313      	orrs	r3, r2
 8006944:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006946:	7bfb      	ldrb	r3, [r7, #15]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d17c      	bne.n	8006a46 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800694c:	4b40      	ldr	r3, [pc, #256]	; (8006a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a3f      	ldr	r2, [pc, #252]	; (8006a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006952:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006956:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006958:	f7fd ff24 	bl	80047a4 <HAL_GetTick>
 800695c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800695e:	e009      	b.n	8006974 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006960:	f7fd ff20 	bl	80047a4 <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	2b02      	cmp	r3, #2
 800696c:	d902      	bls.n	8006974 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	73fb      	strb	r3, [r7, #15]
        break;
 8006972:	e005      	b.n	8006980 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006974:	4b36      	ldr	r3, [pc, #216]	; (8006a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1ef      	bne.n	8006960 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006980:	7bfb      	ldrb	r3, [r7, #15]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d15f      	bne.n	8006a46 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d110      	bne.n	80069ae <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800698c:	4b30      	ldr	r3, [pc, #192]	; (8006a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006994:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	6892      	ldr	r2, [r2, #8]
 800699c:	0211      	lsls	r1, r2, #8
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	68d2      	ldr	r2, [r2, #12]
 80069a2:	06d2      	lsls	r2, r2, #27
 80069a4:	430a      	orrs	r2, r1
 80069a6:	492a      	ldr	r1, [pc, #168]	; (8006a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069a8:	4313      	orrs	r3, r2
 80069aa:	610b      	str	r3, [r1, #16]
 80069ac:	e027      	b.n	80069fe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d112      	bne.n	80069da <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80069b4:	4b26      	ldr	r3, [pc, #152]	; (8006a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80069bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	6892      	ldr	r2, [r2, #8]
 80069c4:	0211      	lsls	r1, r2, #8
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	6912      	ldr	r2, [r2, #16]
 80069ca:	0852      	lsrs	r2, r2, #1
 80069cc:	3a01      	subs	r2, #1
 80069ce:	0552      	lsls	r2, r2, #21
 80069d0:	430a      	orrs	r2, r1
 80069d2:	491f      	ldr	r1, [pc, #124]	; (8006a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	610b      	str	r3, [r1, #16]
 80069d8:	e011      	b.n	80069fe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80069da:	4b1d      	ldr	r3, [pc, #116]	; (8006a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80069e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	6892      	ldr	r2, [r2, #8]
 80069ea:	0211      	lsls	r1, r2, #8
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	6952      	ldr	r2, [r2, #20]
 80069f0:	0852      	lsrs	r2, r2, #1
 80069f2:	3a01      	subs	r2, #1
 80069f4:	0652      	lsls	r2, r2, #25
 80069f6:	430a      	orrs	r2, r1
 80069f8:	4915      	ldr	r1, [pc, #84]	; (8006a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 80069fa:	4313      	orrs	r3, r2
 80069fc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80069fe:	4b14      	ldr	r3, [pc, #80]	; (8006a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a13      	ldr	r2, [pc, #76]	; (8006a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a08:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a0a:	f7fd fecb 	bl	80047a4 <HAL_GetTick>
 8006a0e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006a10:	e009      	b.n	8006a26 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a12:	f7fd fec7 	bl	80047a4 <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d902      	bls.n	8006a26 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	73fb      	strb	r3, [r7, #15]
          break;
 8006a24:	e005      	b.n	8006a32 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006a26:	4b0a      	ldr	r3, [pc, #40]	; (8006a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d0ef      	beq.n	8006a12 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006a32:	7bfb      	ldrb	r3, [r7, #15]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d106      	bne.n	8006a46 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006a38:	4b05      	ldr	r3, [pc, #20]	; (8006a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a3a:	691a      	ldr	r2, [r3, #16]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	4903      	ldr	r1, [pc, #12]	; (8006a50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a42:	4313      	orrs	r3, r2
 8006a44:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	40021000 	.word	0x40021000

08006a54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d101      	bne.n	8006a66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e049      	b.n	8006afa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d106      	bne.n	8006a80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7fd fcb8 	bl	80043f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2202      	movs	r2, #2
 8006a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	3304      	adds	r3, #4
 8006a90:	4619      	mov	r1, r3
 8006a92:	4610      	mov	r0, r2
 8006a94:	f000 fae6 	bl	8007064 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
	...

08006b04 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d001      	beq.n	8006b1c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e033      	b.n	8006b84 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a19      	ldr	r2, [pc, #100]	; (8006b90 <HAL_TIM_Base_Start+0x8c>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d009      	beq.n	8006b42 <HAL_TIM_Base_Start+0x3e>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b36:	d004      	beq.n	8006b42 <HAL_TIM_Base_Start+0x3e>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a15      	ldr	r2, [pc, #84]	; (8006b94 <HAL_TIM_Base_Start+0x90>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d115      	bne.n	8006b6e <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	689a      	ldr	r2, [r3, #8]
 8006b48:	4b13      	ldr	r3, [pc, #76]	; (8006b98 <HAL_TIM_Base_Start+0x94>)
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2b06      	cmp	r3, #6
 8006b52:	d015      	beq.n	8006b80 <HAL_TIM_Base_Start+0x7c>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b5a:	d011      	beq.n	8006b80 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f042 0201 	orr.w	r2, r2, #1
 8006b6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b6c:	e008      	b.n	8006b80 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f042 0201 	orr.w	r2, r2, #1
 8006b7c:	601a      	str	r2, [r3, #0]
 8006b7e:	e000      	b.n	8006b82 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b80:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3714      	adds	r7, #20
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr
 8006b90:	40012c00 	.word	0x40012c00
 8006b94:	40014000 	.word	0x40014000
 8006b98:	00010007 	.word	0x00010007

08006b9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d001      	beq.n	8006bb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e03b      	b.n	8006c2c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68da      	ldr	r2, [r3, #12]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f042 0201 	orr.w	r2, r2, #1
 8006bca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a19      	ldr	r2, [pc, #100]	; (8006c38 <HAL_TIM_Base_Start_IT+0x9c>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d009      	beq.n	8006bea <HAL_TIM_Base_Start_IT+0x4e>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bde:	d004      	beq.n	8006bea <HAL_TIM_Base_Start_IT+0x4e>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a15      	ldr	r2, [pc, #84]	; (8006c3c <HAL_TIM_Base_Start_IT+0xa0>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d115      	bne.n	8006c16 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	689a      	ldr	r2, [r3, #8]
 8006bf0:	4b13      	ldr	r3, [pc, #76]	; (8006c40 <HAL_TIM_Base_Start_IT+0xa4>)
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2b06      	cmp	r3, #6
 8006bfa:	d015      	beq.n	8006c28 <HAL_TIM_Base_Start_IT+0x8c>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c02:	d011      	beq.n	8006c28 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f042 0201 	orr.w	r2, r2, #1
 8006c12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c14:	e008      	b.n	8006c28 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f042 0201 	orr.w	r2, r2, #1
 8006c24:	601a      	str	r2, [r3, #0]
 8006c26:	e000      	b.n	8006c2a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3714      	adds	r7, #20
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr
 8006c38:	40012c00 	.word	0x40012c00
 8006c3c:	40014000 	.word	0x40014000
 8006c40:	00010007 	.word	0x00010007

08006c44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d122      	bne.n	8006ca0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	f003 0302 	and.w	r3, r3, #2
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d11b      	bne.n	8006ca0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f06f 0202 	mvn.w	r2, #2
 8006c70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2201      	movs	r2, #1
 8006c76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	f003 0303 	and.w	r3, r3, #3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d003      	beq.n	8006c8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f9ce 	bl	8007028 <HAL_TIM_IC_CaptureCallback>
 8006c8c:	e005      	b.n	8006c9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f9c0 	bl	8007014 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f9d1 	bl	800703c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	f003 0304 	and.w	r3, r3, #4
 8006caa:	2b04      	cmp	r3, #4
 8006cac:	d122      	bne.n	8006cf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	f003 0304 	and.w	r3, r3, #4
 8006cb8:	2b04      	cmp	r3, #4
 8006cba:	d11b      	bne.n	8006cf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f06f 0204 	mvn.w	r2, #4
 8006cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2202      	movs	r2, #2
 8006cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d003      	beq.n	8006ce2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 f9a4 	bl	8007028 <HAL_TIM_IC_CaptureCallback>
 8006ce0:	e005      	b.n	8006cee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f996 	bl	8007014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 f9a7 	bl	800703c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	f003 0308 	and.w	r3, r3, #8
 8006cfe:	2b08      	cmp	r3, #8
 8006d00:	d122      	bne.n	8006d48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	f003 0308 	and.w	r3, r3, #8
 8006d0c:	2b08      	cmp	r3, #8
 8006d0e:	d11b      	bne.n	8006d48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f06f 0208 	mvn.w	r2, #8
 8006d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2204      	movs	r2, #4
 8006d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	f003 0303 	and.w	r3, r3, #3
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d003      	beq.n	8006d36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f97a 	bl	8007028 <HAL_TIM_IC_CaptureCallback>
 8006d34:	e005      	b.n	8006d42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f96c 	bl	8007014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 f97d 	bl	800703c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	f003 0310 	and.w	r3, r3, #16
 8006d52:	2b10      	cmp	r3, #16
 8006d54:	d122      	bne.n	8006d9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	f003 0310 	and.w	r3, r3, #16
 8006d60:	2b10      	cmp	r3, #16
 8006d62:	d11b      	bne.n	8006d9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f06f 0210 	mvn.w	r2, #16
 8006d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2208      	movs	r2, #8
 8006d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	69db      	ldr	r3, [r3, #28]
 8006d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d003      	beq.n	8006d8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f950 	bl	8007028 <HAL_TIM_IC_CaptureCallback>
 8006d88:	e005      	b.n	8006d96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f942 	bl	8007014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 f953 	bl	800703c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	f003 0301 	and.w	r3, r3, #1
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d10e      	bne.n	8006dc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	f003 0301 	and.w	r3, r3, #1
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d107      	bne.n	8006dc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f06f 0201 	mvn.w	r2, #1
 8006dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f7fd f8f2 	bl	8003fac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dd2:	2b80      	cmp	r3, #128	; 0x80
 8006dd4:	d10e      	bne.n	8006df4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006de0:	2b80      	cmp	r3, #128	; 0x80
 8006de2:	d107      	bne.n	8006df4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 faa6 	bl	8007340 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e02:	d10e      	bne.n	8006e22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e0e:	2b80      	cmp	r3, #128	; 0x80
 8006e10:	d107      	bne.n	8006e22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 fa99 	bl	8007354 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	691b      	ldr	r3, [r3, #16]
 8006e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e2c:	2b40      	cmp	r3, #64	; 0x40
 8006e2e:	d10e      	bne.n	8006e4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e3a:	2b40      	cmp	r3, #64	; 0x40
 8006e3c:	d107      	bne.n	8006e4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 f901 	bl	8007050 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	f003 0320 	and.w	r3, r3, #32
 8006e58:	2b20      	cmp	r3, #32
 8006e5a:	d10e      	bne.n	8006e7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	f003 0320 	and.w	r3, r3, #32
 8006e66:	2b20      	cmp	r3, #32
 8006e68:	d107      	bne.n	8006e7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f06f 0220 	mvn.w	r2, #32
 8006e72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 fa59 	bl	800732c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e7a:	bf00      	nop
 8006e7c:	3708      	adds	r7, #8
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b084      	sub	sp, #16
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
 8006e8a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d101      	bne.n	8006e9e <HAL_TIM_ConfigClockSource+0x1c>
 8006e9a:	2302      	movs	r3, #2
 8006e9c:	e0b6      	b.n	800700c <HAL_TIM_ConfigClockSource+0x18a>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2202      	movs	r2, #2
 8006eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ebc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ec0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ec8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eda:	d03e      	beq.n	8006f5a <HAL_TIM_ConfigClockSource+0xd8>
 8006edc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ee0:	f200 8087 	bhi.w	8006ff2 <HAL_TIM_ConfigClockSource+0x170>
 8006ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ee8:	f000 8086 	beq.w	8006ff8 <HAL_TIM_ConfigClockSource+0x176>
 8006eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ef0:	d87f      	bhi.n	8006ff2 <HAL_TIM_ConfigClockSource+0x170>
 8006ef2:	2b70      	cmp	r3, #112	; 0x70
 8006ef4:	d01a      	beq.n	8006f2c <HAL_TIM_ConfigClockSource+0xaa>
 8006ef6:	2b70      	cmp	r3, #112	; 0x70
 8006ef8:	d87b      	bhi.n	8006ff2 <HAL_TIM_ConfigClockSource+0x170>
 8006efa:	2b60      	cmp	r3, #96	; 0x60
 8006efc:	d050      	beq.n	8006fa0 <HAL_TIM_ConfigClockSource+0x11e>
 8006efe:	2b60      	cmp	r3, #96	; 0x60
 8006f00:	d877      	bhi.n	8006ff2 <HAL_TIM_ConfigClockSource+0x170>
 8006f02:	2b50      	cmp	r3, #80	; 0x50
 8006f04:	d03c      	beq.n	8006f80 <HAL_TIM_ConfigClockSource+0xfe>
 8006f06:	2b50      	cmp	r3, #80	; 0x50
 8006f08:	d873      	bhi.n	8006ff2 <HAL_TIM_ConfigClockSource+0x170>
 8006f0a:	2b40      	cmp	r3, #64	; 0x40
 8006f0c:	d058      	beq.n	8006fc0 <HAL_TIM_ConfigClockSource+0x13e>
 8006f0e:	2b40      	cmp	r3, #64	; 0x40
 8006f10:	d86f      	bhi.n	8006ff2 <HAL_TIM_ConfigClockSource+0x170>
 8006f12:	2b30      	cmp	r3, #48	; 0x30
 8006f14:	d064      	beq.n	8006fe0 <HAL_TIM_ConfigClockSource+0x15e>
 8006f16:	2b30      	cmp	r3, #48	; 0x30
 8006f18:	d86b      	bhi.n	8006ff2 <HAL_TIM_ConfigClockSource+0x170>
 8006f1a:	2b20      	cmp	r3, #32
 8006f1c:	d060      	beq.n	8006fe0 <HAL_TIM_ConfigClockSource+0x15e>
 8006f1e:	2b20      	cmp	r3, #32
 8006f20:	d867      	bhi.n	8006ff2 <HAL_TIM_ConfigClockSource+0x170>
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d05c      	beq.n	8006fe0 <HAL_TIM_ConfigClockSource+0x15e>
 8006f26:	2b10      	cmp	r3, #16
 8006f28:	d05a      	beq.n	8006fe0 <HAL_TIM_ConfigClockSource+0x15e>
 8006f2a:	e062      	b.n	8006ff2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6818      	ldr	r0, [r3, #0]
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	6899      	ldr	r1, [r3, #8]
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	685a      	ldr	r2, [r3, #4]
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	f000 f970 	bl	8007220 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f4e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	609a      	str	r2, [r3, #8]
      break;
 8006f58:	e04f      	b.n	8006ffa <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6818      	ldr	r0, [r3, #0]
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	6899      	ldr	r1, [r3, #8]
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	685a      	ldr	r2, [r3, #4]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	f000 f959 	bl	8007220 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	689a      	ldr	r2, [r3, #8]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f7c:	609a      	str	r2, [r3, #8]
      break;
 8006f7e:	e03c      	b.n	8006ffa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6818      	ldr	r0, [r3, #0]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	6859      	ldr	r1, [r3, #4]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	f000 f8cd 	bl	800712c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2150      	movs	r1, #80	; 0x50
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f000 f926 	bl	80071ea <TIM_ITRx_SetConfig>
      break;
 8006f9e:	e02c      	b.n	8006ffa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6818      	ldr	r0, [r3, #0]
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	6859      	ldr	r1, [r3, #4]
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	461a      	mov	r2, r3
 8006fae:	f000 f8ec 	bl	800718a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2160      	movs	r1, #96	; 0x60
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f000 f916 	bl	80071ea <TIM_ITRx_SetConfig>
      break;
 8006fbe:	e01c      	b.n	8006ffa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6818      	ldr	r0, [r3, #0]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	6859      	ldr	r1, [r3, #4]
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	461a      	mov	r2, r3
 8006fce:	f000 f8ad 	bl	800712c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2140      	movs	r1, #64	; 0x40
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f000 f906 	bl	80071ea <TIM_ITRx_SetConfig>
      break;
 8006fde:	e00c      	b.n	8006ffa <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4619      	mov	r1, r3
 8006fea:	4610      	mov	r0, r2
 8006fec:	f000 f8fd 	bl	80071ea <TIM_ITRx_SetConfig>
      break;
 8006ff0:	e003      	b.n	8006ffa <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	73fb      	strb	r3, [r7, #15]
      break;
 8006ff6:	e000      	b.n	8006ffa <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006ff8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800700a:	7bfb      	ldrb	r3, [r7, #15]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007030:	bf00      	nop
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007044:	bf00      	nop
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007058:	bf00      	nop
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a2a      	ldr	r2, [pc, #168]	; (8007120 <TIM_Base_SetConfig+0xbc>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d003      	beq.n	8007084 <TIM_Base_SetConfig+0x20>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007082:	d108      	bne.n	8007096 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800708a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	4313      	orrs	r3, r2
 8007094:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a21      	ldr	r2, [pc, #132]	; (8007120 <TIM_Base_SetConfig+0xbc>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d00b      	beq.n	80070b6 <TIM_Base_SetConfig+0x52>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070a4:	d007      	beq.n	80070b6 <TIM_Base_SetConfig+0x52>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a1e      	ldr	r2, [pc, #120]	; (8007124 <TIM_Base_SetConfig+0xc0>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d003      	beq.n	80070b6 <TIM_Base_SetConfig+0x52>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a1d      	ldr	r2, [pc, #116]	; (8007128 <TIM_Base_SetConfig+0xc4>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d108      	bne.n	80070c8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	695b      	ldr	r3, [r3, #20]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	689a      	ldr	r2, [r3, #8]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a0c      	ldr	r2, [pc, #48]	; (8007120 <TIM_Base_SetConfig+0xbc>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d007      	beq.n	8007104 <TIM_Base_SetConfig+0xa0>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a0b      	ldr	r2, [pc, #44]	; (8007124 <TIM_Base_SetConfig+0xc0>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d003      	beq.n	8007104 <TIM_Base_SetConfig+0xa0>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a0a      	ldr	r2, [pc, #40]	; (8007128 <TIM_Base_SetConfig+0xc4>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d103      	bne.n	800710c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	691a      	ldr	r2, [r3, #16]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	615a      	str	r2, [r3, #20]
}
 8007112:	bf00      	nop
 8007114:	3714      	adds	r7, #20
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	40012c00 	.word	0x40012c00
 8007124:	40014000 	.word	0x40014000
 8007128:	40014400 	.word	0x40014400

0800712c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800712c:	b480      	push	{r7}
 800712e:	b087      	sub	sp, #28
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6a1b      	ldr	r3, [r3, #32]
 800713c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6a1b      	ldr	r3, [r3, #32]
 8007142:	f023 0201 	bic.w	r2, r3, #1
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	011b      	lsls	r3, r3, #4
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	4313      	orrs	r3, r2
 8007160:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	f023 030a 	bic.w	r3, r3, #10
 8007168:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	4313      	orrs	r3, r2
 8007170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	693a      	ldr	r2, [r7, #16]
 8007176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	621a      	str	r2, [r3, #32]
}
 800717e:	bf00      	nop
 8007180:	371c      	adds	r7, #28
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr

0800718a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800718a:	b480      	push	{r7}
 800718c:	b087      	sub	sp, #28
 800718e:	af00      	add	r7, sp, #0
 8007190:	60f8      	str	r0, [r7, #12]
 8007192:	60b9      	str	r1, [r7, #8]
 8007194:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	f023 0210 	bic.w	r2, r3, #16
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6a1b      	ldr	r3, [r3, #32]
 80071ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	031b      	lsls	r3, r3, #12
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	4313      	orrs	r3, r2
 80071be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80071c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	011b      	lsls	r3, r3, #4
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	693a      	ldr	r2, [r7, #16]
 80071dc:	621a      	str	r2, [r3, #32]
}
 80071de:	bf00      	nop
 80071e0:	371c      	adds	r7, #28
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071ea:	b480      	push	{r7}
 80071ec:	b085      	sub	sp, #20
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
 80071f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007200:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	4313      	orrs	r3, r2
 8007208:	f043 0307 	orr.w	r3, r3, #7
 800720c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	609a      	str	r2, [r3, #8]
}
 8007214:	bf00      	nop
 8007216:	3714      	adds	r7, #20
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007220:	b480      	push	{r7}
 8007222:	b087      	sub	sp, #28
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
 800722c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800723a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	021a      	lsls	r2, r3, #8
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	431a      	orrs	r2, r3
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	4313      	orrs	r3, r2
 8007248:	697a      	ldr	r2, [r7, #20]
 800724a:	4313      	orrs	r3, r2
 800724c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	697a      	ldr	r2, [r7, #20]
 8007252:	609a      	str	r2, [r3, #8]
}
 8007254:	bf00      	nop
 8007256:	371c      	adds	r7, #28
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007270:	2b01      	cmp	r3, #1
 8007272:	d101      	bne.n	8007278 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007274:	2302      	movs	r3, #2
 8007276:	e04f      	b.n	8007318 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2202      	movs	r2, #2
 8007284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a21      	ldr	r2, [pc, #132]	; (8007324 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d108      	bne.n	80072b4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80072a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68fa      	ldr	r2, [r7, #12]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a14      	ldr	r2, [pc, #80]	; (8007324 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d009      	beq.n	80072ec <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072e0:	d004      	beq.n	80072ec <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a10      	ldr	r2, [pc, #64]	; (8007328 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d10c      	bne.n	8007306 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3714      	adds	r7, #20
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr
 8007324:	40012c00 	.word	0x40012c00
 8007328:	40014000 	.word	0x40014000

0800732c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007334:	bf00      	nop
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007348:	bf00      	nop
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800735c:	bf00      	nop
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d101      	bne.n	800737a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	e040      	b.n	80073fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800737e:	2b00      	cmp	r3, #0
 8007380:	d106      	bne.n	8007390 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7fd f87e 	bl	800448c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2224      	movs	r2, #36	; 0x24
 8007394:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f022 0201 	bic.w	r2, r2, #1
 80073a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fbf2 	bl	8007b90 <UART_SetConfig>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d101      	bne.n	80073b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	e022      	b.n	80073fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d002      	beq.n	80073c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fe12 	bl	8007fe8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	685a      	ldr	r2, [r3, #4]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	689a      	ldr	r2, [r3, #8]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f042 0201 	orr.w	r2, r2, #1
 80073f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 fe99 	bl	800812c <UART_CheckIdleState>
 80073fa:	4603      	mov	r3, r0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3708      	adds	r7, #8
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007404:	b480      	push	{r7}
 8007406:	b08b      	sub	sp, #44	; 0x2c
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	4613      	mov	r3, r2
 8007410:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007416:	2b20      	cmp	r3, #32
 8007418:	d156      	bne.n	80074c8 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d002      	beq.n	8007426 <HAL_UART_Transmit_IT+0x22>
 8007420:	88fb      	ldrh	r3, [r7, #6]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d101      	bne.n	800742a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e04f      	b.n	80074ca <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007430:	2b01      	cmp	r3, #1
 8007432:	d101      	bne.n	8007438 <HAL_UART_Transmit_IT+0x34>
 8007434:	2302      	movs	r3, #2
 8007436:	e048      	b.n	80074ca <HAL_UART_Transmit_IT+0xc6>
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	68ba      	ldr	r2, [r7, #8]
 8007444:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	88fa      	ldrh	r2, [r7, #6]
 800744a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	88fa      	ldrh	r2, [r7, #6]
 8007452:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2221      	movs	r2, #33	; 0x21
 8007468:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007472:	d107      	bne.n	8007484 <HAL_UART_Transmit_IT+0x80>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d103      	bne.n	8007484 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	4a16      	ldr	r2, [pc, #88]	; (80074d8 <HAL_UART_Transmit_IT+0xd4>)
 8007480:	669a      	str	r2, [r3, #104]	; 0x68
 8007482:	e002      	b.n	800748a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	4a15      	ldr	r2, [pc, #84]	; (80074dc <HAL_UART_Transmit_IT+0xd8>)
 8007488:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	e853 3f00 	ldrex	r3, [r3]
 800749e:	613b      	str	r3, [r7, #16]
   return(result);
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074a6:	627b      	str	r3, [r7, #36]	; 0x24
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	461a      	mov	r2, r3
 80074ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b0:	623b      	str	r3, [r7, #32]
 80074b2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b4:	69f9      	ldr	r1, [r7, #28]
 80074b6:	6a3a      	ldr	r2, [r7, #32]
 80074b8:	e841 2300 	strex	r3, r2, [r1]
 80074bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1e6      	bne.n	8007492 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80074c4:	2300      	movs	r3, #0
 80074c6:	e000      	b.n	80074ca <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80074c8:	2302      	movs	r3, #2
  }
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	372c      	adds	r7, #44	; 0x2c
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop
 80074d8:	08008687 	.word	0x08008687
 80074dc:	080085cf 	.word	0x080085cf

080074e0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b08a      	sub	sp, #40	; 0x28
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	4613      	mov	r3, r2
 80074ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074f2:	2b20      	cmp	r3, #32
 80074f4:	d142      	bne.n	800757c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d002      	beq.n	8007502 <HAL_UART_Receive_IT+0x22>
 80074fc:	88fb      	ldrh	r3, [r7, #6]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d101      	bne.n	8007506 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e03b      	b.n	800757e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800750c:	2b01      	cmp	r3, #1
 800750e:	d101      	bne.n	8007514 <HAL_UART_Receive_IT+0x34>
 8007510:	2302      	movs	r3, #2
 8007512:	e034      	b.n	800757e <HAL_UART_Receive_IT+0x9e>
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a18      	ldr	r2, [pc, #96]	; (8007588 <HAL_UART_Receive_IT+0xa8>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d01f      	beq.n	800756c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007536:	2b00      	cmp	r3, #0
 8007538:	d018      	beq.n	800756c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	e853 3f00 	ldrex	r3, [r3]
 8007546:	613b      	str	r3, [r7, #16]
   return(result);
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800754e:	627b      	str	r3, [r7, #36]	; 0x24
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	461a      	mov	r2, r3
 8007556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007558:	623b      	str	r3, [r7, #32]
 800755a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755c:	69f9      	ldr	r1, [r7, #28]
 800755e:	6a3a      	ldr	r2, [r7, #32]
 8007560:	e841 2300 	strex	r3, r2, [r1]
 8007564:	61bb      	str	r3, [r7, #24]
   return(result);
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1e6      	bne.n	800753a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800756c:	88fb      	ldrh	r3, [r7, #6]
 800756e:	461a      	mov	r2, r3
 8007570:	68b9      	ldr	r1, [r7, #8]
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f000 fee8 	bl	8008348 <UART_Start_Receive_IT>
 8007578:	4603      	mov	r3, r0
 800757a:	e000      	b.n	800757e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800757c:	2302      	movs	r3, #2
  }
}
 800757e:	4618      	mov	r0, r3
 8007580:	3728      	adds	r7, #40	; 0x28
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	40008000 	.word	0x40008000

0800758c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b0ba      	sub	sp, #232	; 0xe8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	69db      	ldr	r3, [r3, #28]
 800759a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80075b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80075b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80075ba:	4013      	ands	r3, r2
 80075bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80075c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d115      	bne.n	80075f4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80075c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075cc:	f003 0320 	and.w	r3, r3, #32
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d00f      	beq.n	80075f4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80075d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075d8:	f003 0320 	and.w	r3, r3, #32
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d009      	beq.n	80075f4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f000 82a6 	beq.w	8007b36 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	4798      	blx	r3
      }
      return;
 80075f2:	e2a0      	b.n	8007b36 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80075f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f000 8117 	beq.w	800782c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80075fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007602:	f003 0301 	and.w	r3, r3, #1
 8007606:	2b00      	cmp	r3, #0
 8007608:	d106      	bne.n	8007618 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800760a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800760e:	4b85      	ldr	r3, [pc, #532]	; (8007824 <HAL_UART_IRQHandler+0x298>)
 8007610:	4013      	ands	r3, r2
 8007612:	2b00      	cmp	r3, #0
 8007614:	f000 810a 	beq.w	800782c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800761c:	f003 0301 	and.w	r3, r3, #1
 8007620:	2b00      	cmp	r3, #0
 8007622:	d011      	beq.n	8007648 <HAL_UART_IRQHandler+0xbc>
 8007624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00b      	beq.n	8007648 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2201      	movs	r2, #1
 8007636:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800763e:	f043 0201 	orr.w	r2, r3, #1
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800764c:	f003 0302 	and.w	r3, r3, #2
 8007650:	2b00      	cmp	r3, #0
 8007652:	d011      	beq.n	8007678 <HAL_UART_IRQHandler+0xec>
 8007654:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007658:	f003 0301 	and.w	r3, r3, #1
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00b      	beq.n	8007678 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2202      	movs	r2, #2
 8007666:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800766e:	f043 0204 	orr.w	r2, r3, #4
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800767c:	f003 0304 	and.w	r3, r3, #4
 8007680:	2b00      	cmp	r3, #0
 8007682:	d011      	beq.n	80076a8 <HAL_UART_IRQHandler+0x11c>
 8007684:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007688:	f003 0301 	and.w	r3, r3, #1
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00b      	beq.n	80076a8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2204      	movs	r2, #4
 8007696:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800769e:	f043 0202 	orr.w	r2, r3, #2
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80076a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ac:	f003 0308 	and.w	r3, r3, #8
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d017      	beq.n	80076e4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80076b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076b8:	f003 0320 	and.w	r3, r3, #32
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d105      	bne.n	80076cc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80076c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076c4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d00b      	beq.n	80076e4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2208      	movs	r2, #8
 80076d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076da:	f043 0208 	orr.w	r2, r3, #8
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80076e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d012      	beq.n	8007716 <HAL_UART_IRQHandler+0x18a>
 80076f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00c      	beq.n	8007716 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007704:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800770c:	f043 0220 	orr.w	r2, r3, #32
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800771c:	2b00      	cmp	r3, #0
 800771e:	f000 820c 	beq.w	8007b3a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007726:	f003 0320 	and.w	r3, r3, #32
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00d      	beq.n	800774a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800772e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007732:	f003 0320 	and.w	r3, r3, #32
 8007736:	2b00      	cmp	r3, #0
 8007738:	d007      	beq.n	800774a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800773e:	2b00      	cmp	r3, #0
 8007740:	d003      	beq.n	800774a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007750:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800775e:	2b40      	cmp	r3, #64	; 0x40
 8007760:	d005      	beq.n	800776e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007762:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007766:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800776a:	2b00      	cmp	r3, #0
 800776c:	d04f      	beq.n	800780e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 feb4 	bl	80084dc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800777e:	2b40      	cmp	r3, #64	; 0x40
 8007780:	d141      	bne.n	8007806 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	3308      	adds	r3, #8
 8007788:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800778c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007790:	e853 3f00 	ldrex	r3, [r3]
 8007794:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007798:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800779c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	3308      	adds	r3, #8
 80077aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80077ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80077b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80077ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80077be:	e841 2300 	strex	r3, r2, [r1]
 80077c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80077c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d1d9      	bne.n	8007782 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d013      	beq.n	80077fe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077da:	4a13      	ldr	r2, [pc, #76]	; (8007828 <HAL_UART_IRQHandler+0x29c>)
 80077dc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7fd fcf6 	bl	80051d4 <HAL_DMA_Abort_IT>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d017      	beq.n	800781e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80077f8:	4610      	mov	r0, r2
 80077fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077fc:	e00f      	b.n	800781e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 f9b0 	bl	8007b64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007804:	e00b      	b.n	800781e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 f9ac 	bl	8007b64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800780c:	e007      	b.n	800781e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f9a8 	bl	8007b64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800781c:	e18d      	b.n	8007b3a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800781e:	bf00      	nop
    return;
 8007820:	e18b      	b.n	8007b3a <HAL_UART_IRQHandler+0x5ae>
 8007822:	bf00      	nop
 8007824:	04000120 	.word	0x04000120
 8007828:	080085a3 	.word	0x080085a3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007830:	2b01      	cmp	r3, #1
 8007832:	f040 8146 	bne.w	8007ac2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800783a:	f003 0310 	and.w	r3, r3, #16
 800783e:	2b00      	cmp	r3, #0
 8007840:	f000 813f 	beq.w	8007ac2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007848:	f003 0310 	and.w	r3, r3, #16
 800784c:	2b00      	cmp	r3, #0
 800784e:	f000 8138 	beq.w	8007ac2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2210      	movs	r2, #16
 8007858:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007864:	2b40      	cmp	r3, #64	; 0x40
 8007866:	f040 80b4 	bne.w	80079d2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007876:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800787a:	2b00      	cmp	r3, #0
 800787c:	f000 815f 	beq.w	8007b3e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007886:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800788a:	429a      	cmp	r2, r3
 800788c:	f080 8157 	bcs.w	8007b3e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007896:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0320 	and.w	r3, r3, #32
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	f040 8085 	bne.w	80079b6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078b8:	e853 3f00 	ldrex	r3, [r3]
 80078bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80078c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	461a      	mov	r2, r3
 80078d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80078d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80078da:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80078e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80078e6:	e841 2300 	strex	r3, r2, [r1]
 80078ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80078ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1da      	bne.n	80078ac <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	3308      	adds	r3, #8
 80078fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007900:	e853 3f00 	ldrex	r3, [r3]
 8007904:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007906:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007908:	f023 0301 	bic.w	r3, r3, #1
 800790c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	3308      	adds	r3, #8
 8007916:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800791a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800791e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007920:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007922:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007926:	e841 2300 	strex	r3, r2, [r1]
 800792a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800792c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1e1      	bne.n	80078f6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	3308      	adds	r3, #8
 8007938:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800793c:	e853 3f00 	ldrex	r3, [r3]
 8007940:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007942:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007944:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007948:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	3308      	adds	r3, #8
 8007952:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007956:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007958:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800795c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800795e:	e841 2300 	strex	r3, r2, [r1]
 8007962:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007964:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1e3      	bne.n	8007932 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2220      	movs	r2, #32
 800796e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800797e:	e853 3f00 	ldrex	r3, [r3]
 8007982:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007986:	f023 0310 	bic.w	r3, r3, #16
 800798a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	461a      	mov	r2, r3
 8007994:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007998:	65bb      	str	r3, [r7, #88]	; 0x58
 800799a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800799e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079a0:	e841 2300 	strex	r3, r2, [r1]
 80079a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80079a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1e4      	bne.n	8007976 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7fd fbd1 	bl	8005158 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	4619      	mov	r1, r3
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 f8d4 	bl	8007b78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80079d0:	e0b5      	b.n	8007b3e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079de:	b29b      	uxth	r3, r3
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f000 80a7 	beq.w	8007b42 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80079f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f000 80a2 	beq.w	8007b42 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a06:	e853 3f00 	ldrex	r3, [r3]
 8007a0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a20:	647b      	str	r3, [r7, #68]	; 0x44
 8007a22:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a28:	e841 2300 	strex	r3, r2, [r1]
 8007a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d1e4      	bne.n	80079fe <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	3308      	adds	r3, #8
 8007a3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3e:	e853 3f00 	ldrex	r3, [r3]
 8007a42:	623b      	str	r3, [r7, #32]
   return(result);
 8007a44:	6a3b      	ldr	r3, [r7, #32]
 8007a46:	f023 0301 	bic.w	r3, r3, #1
 8007a4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	3308      	adds	r3, #8
 8007a54:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a58:	633a      	str	r2, [r7, #48]	; 0x30
 8007a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a60:	e841 2300 	strex	r3, r2, [r1]
 8007a64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d1e3      	bne.n	8007a34 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2220      	movs	r2, #32
 8007a70:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	e853 3f00 	ldrex	r3, [r3]
 8007a8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f023 0310 	bic.w	r3, r3, #16
 8007a92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007aa0:	61fb      	str	r3, [r7, #28]
 8007aa2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa4:	69b9      	ldr	r1, [r7, #24]
 8007aa6:	69fa      	ldr	r2, [r7, #28]
 8007aa8:	e841 2300 	strex	r3, r2, [r1]
 8007aac:	617b      	str	r3, [r7, #20]
   return(result);
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1e4      	bne.n	8007a7e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ab4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ab8:	4619      	mov	r1, r3
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 f85c 	bl	8007b78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ac0:	e03f      	b.n	8007b42 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00e      	beq.n	8007aec <HAL_UART_IRQHandler+0x560>
 8007ace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d008      	beq.n	8007aec <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007ae2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 ffb8 	bl	8008a5a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007aea:	e02d      	b.n	8007b48 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00e      	beq.n	8007b16 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d008      	beq.n	8007b16 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d01c      	beq.n	8007b46 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	4798      	blx	r3
    }
    return;
 8007b14:	e017      	b.n	8007b46 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d012      	beq.n	8007b48 <HAL_UART_IRQHandler+0x5bc>
 8007b22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00c      	beq.n	8007b48 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 fe09 	bl	8008746 <UART_EndTransmit_IT>
    return;
 8007b34:	e008      	b.n	8007b48 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007b36:	bf00      	nop
 8007b38:	e006      	b.n	8007b48 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007b3a:	bf00      	nop
 8007b3c:	e004      	b.n	8007b48 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007b3e:	bf00      	nop
 8007b40:	e002      	b.n	8007b48 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007b42:	bf00      	nop
 8007b44:	e000      	b.n	8007b48 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007b46:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007b48:	37e8      	adds	r7, #232	; 0xe8
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop

08007b50 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007b58:	bf00      	nop
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	460b      	mov	r3, r1
 8007b82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b84:	bf00      	nop
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b94:	b08a      	sub	sp, #40	; 0x28
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	689a      	ldr	r2, [r3, #8]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	431a      	orrs	r2, r3
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	431a      	orrs	r2, r3
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	69db      	ldr	r3, [r3, #28]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	4bb4      	ldr	r3, [pc, #720]	; (8007e90 <UART_SetConfig+0x300>)
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	6812      	ldr	r2, [r2, #0]
 8007bc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007bc8:	430b      	orrs	r3, r1
 8007bca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	68da      	ldr	r2, [r3, #12]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	430a      	orrs	r2, r1
 8007be0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	699b      	ldr	r3, [r3, #24]
 8007be6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4aa9      	ldr	r2, [pc, #676]	; (8007e94 <UART_SetConfig+0x304>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d004      	beq.n	8007bfc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c0c:	430a      	orrs	r2, r1
 8007c0e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4aa0      	ldr	r2, [pc, #640]	; (8007e98 <UART_SetConfig+0x308>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d126      	bne.n	8007c68 <UART_SetConfig+0xd8>
 8007c1a:	4ba0      	ldr	r3, [pc, #640]	; (8007e9c <UART_SetConfig+0x30c>)
 8007c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c20:	f003 0303 	and.w	r3, r3, #3
 8007c24:	2b03      	cmp	r3, #3
 8007c26:	d81b      	bhi.n	8007c60 <UART_SetConfig+0xd0>
 8007c28:	a201      	add	r2, pc, #4	; (adr r2, 8007c30 <UART_SetConfig+0xa0>)
 8007c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c2e:	bf00      	nop
 8007c30:	08007c41 	.word	0x08007c41
 8007c34:	08007c51 	.word	0x08007c51
 8007c38:	08007c49 	.word	0x08007c49
 8007c3c:	08007c59 	.word	0x08007c59
 8007c40:	2301      	movs	r3, #1
 8007c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c46:	e080      	b.n	8007d4a <UART_SetConfig+0x1ba>
 8007c48:	2302      	movs	r3, #2
 8007c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c4e:	e07c      	b.n	8007d4a <UART_SetConfig+0x1ba>
 8007c50:	2304      	movs	r3, #4
 8007c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c56:	e078      	b.n	8007d4a <UART_SetConfig+0x1ba>
 8007c58:	2308      	movs	r3, #8
 8007c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c5e:	e074      	b.n	8007d4a <UART_SetConfig+0x1ba>
 8007c60:	2310      	movs	r3, #16
 8007c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c66:	e070      	b.n	8007d4a <UART_SetConfig+0x1ba>
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a8c      	ldr	r2, [pc, #560]	; (8007ea0 <UART_SetConfig+0x310>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d138      	bne.n	8007ce4 <UART_SetConfig+0x154>
 8007c72:	4b8a      	ldr	r3, [pc, #552]	; (8007e9c <UART_SetConfig+0x30c>)
 8007c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c78:	f003 030c 	and.w	r3, r3, #12
 8007c7c:	2b0c      	cmp	r3, #12
 8007c7e:	d82d      	bhi.n	8007cdc <UART_SetConfig+0x14c>
 8007c80:	a201      	add	r2, pc, #4	; (adr r2, 8007c88 <UART_SetConfig+0xf8>)
 8007c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c86:	bf00      	nop
 8007c88:	08007cbd 	.word	0x08007cbd
 8007c8c:	08007cdd 	.word	0x08007cdd
 8007c90:	08007cdd 	.word	0x08007cdd
 8007c94:	08007cdd 	.word	0x08007cdd
 8007c98:	08007ccd 	.word	0x08007ccd
 8007c9c:	08007cdd 	.word	0x08007cdd
 8007ca0:	08007cdd 	.word	0x08007cdd
 8007ca4:	08007cdd 	.word	0x08007cdd
 8007ca8:	08007cc5 	.word	0x08007cc5
 8007cac:	08007cdd 	.word	0x08007cdd
 8007cb0:	08007cdd 	.word	0x08007cdd
 8007cb4:	08007cdd 	.word	0x08007cdd
 8007cb8:	08007cd5 	.word	0x08007cd5
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cc2:	e042      	b.n	8007d4a <UART_SetConfig+0x1ba>
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cca:	e03e      	b.n	8007d4a <UART_SetConfig+0x1ba>
 8007ccc:	2304      	movs	r3, #4
 8007cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cd2:	e03a      	b.n	8007d4a <UART_SetConfig+0x1ba>
 8007cd4:	2308      	movs	r3, #8
 8007cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cda:	e036      	b.n	8007d4a <UART_SetConfig+0x1ba>
 8007cdc:	2310      	movs	r3, #16
 8007cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ce2:	e032      	b.n	8007d4a <UART_SetConfig+0x1ba>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a6a      	ldr	r2, [pc, #424]	; (8007e94 <UART_SetConfig+0x304>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d12a      	bne.n	8007d44 <UART_SetConfig+0x1b4>
 8007cee:	4b6b      	ldr	r3, [pc, #428]	; (8007e9c <UART_SetConfig+0x30c>)
 8007cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cf4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007cf8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007cfc:	d01a      	beq.n	8007d34 <UART_SetConfig+0x1a4>
 8007cfe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d02:	d81b      	bhi.n	8007d3c <UART_SetConfig+0x1ac>
 8007d04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d08:	d00c      	beq.n	8007d24 <UART_SetConfig+0x194>
 8007d0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d0e:	d815      	bhi.n	8007d3c <UART_SetConfig+0x1ac>
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d003      	beq.n	8007d1c <UART_SetConfig+0x18c>
 8007d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d18:	d008      	beq.n	8007d2c <UART_SetConfig+0x19c>
 8007d1a:	e00f      	b.n	8007d3c <UART_SetConfig+0x1ac>
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d22:	e012      	b.n	8007d4a <UART_SetConfig+0x1ba>
 8007d24:	2302      	movs	r3, #2
 8007d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d2a:	e00e      	b.n	8007d4a <UART_SetConfig+0x1ba>
 8007d2c:	2304      	movs	r3, #4
 8007d2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d32:	e00a      	b.n	8007d4a <UART_SetConfig+0x1ba>
 8007d34:	2308      	movs	r3, #8
 8007d36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d3a:	e006      	b.n	8007d4a <UART_SetConfig+0x1ba>
 8007d3c:	2310      	movs	r3, #16
 8007d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d42:	e002      	b.n	8007d4a <UART_SetConfig+0x1ba>
 8007d44:	2310      	movs	r3, #16
 8007d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a51      	ldr	r2, [pc, #324]	; (8007e94 <UART_SetConfig+0x304>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d17a      	bne.n	8007e4a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d58:	2b08      	cmp	r3, #8
 8007d5a:	d824      	bhi.n	8007da6 <UART_SetConfig+0x216>
 8007d5c:	a201      	add	r2, pc, #4	; (adr r2, 8007d64 <UART_SetConfig+0x1d4>)
 8007d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d62:	bf00      	nop
 8007d64:	08007d89 	.word	0x08007d89
 8007d68:	08007da7 	.word	0x08007da7
 8007d6c:	08007d91 	.word	0x08007d91
 8007d70:	08007da7 	.word	0x08007da7
 8007d74:	08007d97 	.word	0x08007d97
 8007d78:	08007da7 	.word	0x08007da7
 8007d7c:	08007da7 	.word	0x08007da7
 8007d80:	08007da7 	.word	0x08007da7
 8007d84:	08007d9f 	.word	0x08007d9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d88:	f7fe fabe 	bl	8006308 <HAL_RCC_GetPCLK1Freq>
 8007d8c:	61f8      	str	r0, [r7, #28]
        break;
 8007d8e:	e010      	b.n	8007db2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d90:	4b44      	ldr	r3, [pc, #272]	; (8007ea4 <UART_SetConfig+0x314>)
 8007d92:	61fb      	str	r3, [r7, #28]
        break;
 8007d94:	e00d      	b.n	8007db2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d96:	f7fe fa1f 	bl	80061d8 <HAL_RCC_GetSysClockFreq>
 8007d9a:	61f8      	str	r0, [r7, #28]
        break;
 8007d9c:	e009      	b.n	8007db2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007da2:	61fb      	str	r3, [r7, #28]
        break;
 8007da4:	e005      	b.n	8007db2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8007da6:	2300      	movs	r3, #0
 8007da8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007db0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f000 8107 	beq.w	8007fc8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	685a      	ldr	r2, [r3, #4]
 8007dbe:	4613      	mov	r3, r2
 8007dc0:	005b      	lsls	r3, r3, #1
 8007dc2:	4413      	add	r3, r2
 8007dc4:	69fa      	ldr	r2, [r7, #28]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d305      	bcc.n	8007dd6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007dd0:	69fa      	ldr	r2, [r7, #28]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d903      	bls.n	8007dde <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007ddc:	e0f4      	b.n	8007fc8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	2200      	movs	r2, #0
 8007de2:	461c      	mov	r4, r3
 8007de4:	4615      	mov	r5, r2
 8007de6:	f04f 0200 	mov.w	r2, #0
 8007dea:	f04f 0300 	mov.w	r3, #0
 8007dee:	022b      	lsls	r3, r5, #8
 8007df0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007df4:	0222      	lsls	r2, r4, #8
 8007df6:	68f9      	ldr	r1, [r7, #12]
 8007df8:	6849      	ldr	r1, [r1, #4]
 8007dfa:	0849      	lsrs	r1, r1, #1
 8007dfc:	2000      	movs	r0, #0
 8007dfe:	4688      	mov	r8, r1
 8007e00:	4681      	mov	r9, r0
 8007e02:	eb12 0a08 	adds.w	sl, r2, r8
 8007e06:	eb43 0b09 	adc.w	fp, r3, r9
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	603b      	str	r3, [r7, #0]
 8007e12:	607a      	str	r2, [r7, #4]
 8007e14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e18:	4650      	mov	r0, sl
 8007e1a:	4659      	mov	r1, fp
 8007e1c:	f7f8 ff44 	bl	8000ca8 <__aeabi_uldivmod>
 8007e20:	4602      	mov	r2, r0
 8007e22:	460b      	mov	r3, r1
 8007e24:	4613      	mov	r3, r2
 8007e26:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e2e:	d308      	bcc.n	8007e42 <UART_SetConfig+0x2b2>
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e36:	d204      	bcs.n	8007e42 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	69ba      	ldr	r2, [r7, #24]
 8007e3e:	60da      	str	r2, [r3, #12]
 8007e40:	e0c2      	b.n	8007fc8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007e48:	e0be      	b.n	8007fc8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	69db      	ldr	r3, [r3, #28]
 8007e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e52:	d16a      	bne.n	8007f2a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8007e54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e58:	2b08      	cmp	r3, #8
 8007e5a:	d834      	bhi.n	8007ec6 <UART_SetConfig+0x336>
 8007e5c:	a201      	add	r2, pc, #4	; (adr r2, 8007e64 <UART_SetConfig+0x2d4>)
 8007e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e62:	bf00      	nop
 8007e64:	08007e89 	.word	0x08007e89
 8007e68:	08007ea9 	.word	0x08007ea9
 8007e6c:	08007eb1 	.word	0x08007eb1
 8007e70:	08007ec7 	.word	0x08007ec7
 8007e74:	08007eb7 	.word	0x08007eb7
 8007e78:	08007ec7 	.word	0x08007ec7
 8007e7c:	08007ec7 	.word	0x08007ec7
 8007e80:	08007ec7 	.word	0x08007ec7
 8007e84:	08007ebf 	.word	0x08007ebf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e88:	f7fe fa3e 	bl	8006308 <HAL_RCC_GetPCLK1Freq>
 8007e8c:	61f8      	str	r0, [r7, #28]
        break;
 8007e8e:	e020      	b.n	8007ed2 <UART_SetConfig+0x342>
 8007e90:	efff69f3 	.word	0xefff69f3
 8007e94:	40008000 	.word	0x40008000
 8007e98:	40013800 	.word	0x40013800
 8007e9c:	40021000 	.word	0x40021000
 8007ea0:	40004400 	.word	0x40004400
 8007ea4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ea8:	f7fe fa44 	bl	8006334 <HAL_RCC_GetPCLK2Freq>
 8007eac:	61f8      	str	r0, [r7, #28]
        break;
 8007eae:	e010      	b.n	8007ed2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007eb0:	4b4c      	ldr	r3, [pc, #304]	; (8007fe4 <UART_SetConfig+0x454>)
 8007eb2:	61fb      	str	r3, [r7, #28]
        break;
 8007eb4:	e00d      	b.n	8007ed2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007eb6:	f7fe f98f 	bl	80061d8 <HAL_RCC_GetSysClockFreq>
 8007eba:	61f8      	str	r0, [r7, #28]
        break;
 8007ebc:	e009      	b.n	8007ed2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ec2:	61fb      	str	r3, [r7, #28]
        break;
 8007ec4:	e005      	b.n	8007ed2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007ed0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d077      	beq.n	8007fc8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	005a      	lsls	r2, r3, #1
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	085b      	lsrs	r3, r3, #1
 8007ee2:	441a      	add	r2, r3
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	2b0f      	cmp	r3, #15
 8007ef2:	d916      	bls.n	8007f22 <UART_SetConfig+0x392>
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007efa:	d212      	bcs.n	8007f22 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	f023 030f 	bic.w	r3, r3, #15
 8007f04:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	085b      	lsrs	r3, r3, #1
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	f003 0307 	and.w	r3, r3, #7
 8007f10:	b29a      	uxth	r2, r3
 8007f12:	8afb      	ldrh	r3, [r7, #22]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	8afa      	ldrh	r2, [r7, #22]
 8007f1e:	60da      	str	r2, [r3, #12]
 8007f20:	e052      	b.n	8007fc8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007f28:	e04e      	b.n	8007fc8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f2e:	2b08      	cmp	r3, #8
 8007f30:	d827      	bhi.n	8007f82 <UART_SetConfig+0x3f2>
 8007f32:	a201      	add	r2, pc, #4	; (adr r2, 8007f38 <UART_SetConfig+0x3a8>)
 8007f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f38:	08007f5d 	.word	0x08007f5d
 8007f3c:	08007f65 	.word	0x08007f65
 8007f40:	08007f6d 	.word	0x08007f6d
 8007f44:	08007f83 	.word	0x08007f83
 8007f48:	08007f73 	.word	0x08007f73
 8007f4c:	08007f83 	.word	0x08007f83
 8007f50:	08007f83 	.word	0x08007f83
 8007f54:	08007f83 	.word	0x08007f83
 8007f58:	08007f7b 	.word	0x08007f7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f5c:	f7fe f9d4 	bl	8006308 <HAL_RCC_GetPCLK1Freq>
 8007f60:	61f8      	str	r0, [r7, #28]
        break;
 8007f62:	e014      	b.n	8007f8e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f64:	f7fe f9e6 	bl	8006334 <HAL_RCC_GetPCLK2Freq>
 8007f68:	61f8      	str	r0, [r7, #28]
        break;
 8007f6a:	e010      	b.n	8007f8e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f6c:	4b1d      	ldr	r3, [pc, #116]	; (8007fe4 <UART_SetConfig+0x454>)
 8007f6e:	61fb      	str	r3, [r7, #28]
        break;
 8007f70:	e00d      	b.n	8007f8e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f72:	f7fe f931 	bl	80061d8 <HAL_RCC_GetSysClockFreq>
 8007f76:	61f8      	str	r0, [r7, #28]
        break;
 8007f78:	e009      	b.n	8007f8e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f7e:	61fb      	str	r3, [r7, #28]
        break;
 8007f80:	e005      	b.n	8007f8e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8007f82:	2300      	movs	r3, #0
 8007f84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007f8c:	bf00      	nop
    }

    if (pclk != 0U)
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d019      	beq.n	8007fc8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	085a      	lsrs	r2, r3, #1
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	441a      	add	r2, r3
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fa6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	2b0f      	cmp	r3, #15
 8007fac:	d909      	bls.n	8007fc2 <UART_SetConfig+0x432>
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fb4:	d205      	bcs.n	8007fc2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	b29a      	uxth	r2, r3
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	60da      	str	r2, [r3, #12]
 8007fc0:	e002      	b.n	8007fc8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007fd4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3728      	adds	r7, #40	; 0x28
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fe2:	bf00      	nop
 8007fe4:	00f42400 	.word	0x00f42400

08007fe8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff4:	f003 0301 	and.w	r3, r3, #1
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d00a      	beq.n	8008012 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	430a      	orrs	r2, r1
 8008010:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008016:	f003 0302 	and.w	r3, r3, #2
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00a      	beq.n	8008034 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	430a      	orrs	r2, r1
 8008032:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008038:	f003 0304 	and.w	r3, r3, #4
 800803c:	2b00      	cmp	r3, #0
 800803e:	d00a      	beq.n	8008056 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	430a      	orrs	r2, r1
 8008054:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805a:	f003 0308 	and.w	r3, r3, #8
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00a      	beq.n	8008078 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	430a      	orrs	r2, r1
 8008076:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807c:	f003 0310 	and.w	r3, r3, #16
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00a      	beq.n	800809a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	430a      	orrs	r2, r1
 8008098:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809e:	f003 0320 	and.w	r3, r3, #32
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00a      	beq.n	80080bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	430a      	orrs	r2, r1
 80080ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d01a      	beq.n	80080fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	430a      	orrs	r2, r1
 80080dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080e6:	d10a      	bne.n	80080fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	430a      	orrs	r2, r1
 80080fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00a      	beq.n	8008120 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	430a      	orrs	r2, r1
 800811e:	605a      	str	r2, [r3, #4]
  }
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b086      	sub	sp, #24
 8008130:	af02      	add	r7, sp, #8
 8008132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800813c:	f7fc fb32 	bl	80047a4 <HAL_GetTick>
 8008140:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 0308 	and.w	r3, r3, #8
 800814c:	2b08      	cmp	r3, #8
 800814e:	d10e      	bne.n	800816e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008150:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008154:	9300      	str	r3, [sp, #0]
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 f82d 	bl	80081be <UART_WaitOnFlagUntilTimeout>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d001      	beq.n	800816e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800816a:	2303      	movs	r3, #3
 800816c:	e023      	b.n	80081b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f003 0304 	and.w	r3, r3, #4
 8008178:	2b04      	cmp	r3, #4
 800817a:	d10e      	bne.n	800819a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800817c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008180:	9300      	str	r3, [sp, #0]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2200      	movs	r2, #0
 8008186:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f817 	bl	80081be <UART_WaitOnFlagUntilTimeout>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d001      	beq.n	800819a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008196:	2303      	movs	r3, #3
 8008198:	e00d      	b.n	80081b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2220      	movs	r2, #32
 800819e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2220      	movs	r2, #32
 80081a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b09c      	sub	sp, #112	; 0x70
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	60f8      	str	r0, [r7, #12]
 80081c6:	60b9      	str	r1, [r7, #8]
 80081c8:	603b      	str	r3, [r7, #0]
 80081ca:	4613      	mov	r3, r2
 80081cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081ce:	e0a5      	b.n	800831c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d6:	f000 80a1 	beq.w	800831c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081da:	f7fc fae3 	bl	80047a4 <HAL_GetTick>
 80081de:	4602      	mov	r2, r0
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d302      	bcc.n	80081f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80081ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d13e      	bne.n	800826e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081f8:	e853 3f00 	ldrex	r3, [r3]
 80081fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80081fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008200:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008204:	667b      	str	r3, [r7, #100]	; 0x64
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	461a      	mov	r2, r3
 800820c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800820e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008210:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008212:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008214:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008216:	e841 2300 	strex	r3, r2, [r1]
 800821a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800821c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1e6      	bne.n	80081f0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	3308      	adds	r3, #8
 8008228:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800822c:	e853 3f00 	ldrex	r3, [r3]
 8008230:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008234:	f023 0301 	bic.w	r3, r3, #1
 8008238:	663b      	str	r3, [r7, #96]	; 0x60
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	3308      	adds	r3, #8
 8008240:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008242:	64ba      	str	r2, [r7, #72]	; 0x48
 8008244:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008246:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008248:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800824a:	e841 2300 	strex	r3, r2, [r1]
 800824e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1e5      	bne.n	8008222 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2220      	movs	r2, #32
 800825a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2220      	movs	r2, #32
 8008260:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800826a:	2303      	movs	r3, #3
 800826c:	e067      	b.n	800833e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 0304 	and.w	r3, r3, #4
 8008278:	2b00      	cmp	r3, #0
 800827a:	d04f      	beq.n	800831c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	69db      	ldr	r3, [r3, #28]
 8008282:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008286:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800828a:	d147      	bne.n	800831c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008294:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829e:	e853 3f00 	ldrex	r3, [r3]
 80082a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80082aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	461a      	mov	r2, r3
 80082b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082b4:	637b      	str	r3, [r7, #52]	; 0x34
 80082b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082bc:	e841 2300 	strex	r3, r2, [r1]
 80082c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80082c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d1e6      	bne.n	8008296 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	3308      	adds	r3, #8
 80082ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	e853 3f00 	ldrex	r3, [r3]
 80082d6:	613b      	str	r3, [r7, #16]
   return(result);
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	f023 0301 	bic.w	r3, r3, #1
 80082de:	66bb      	str	r3, [r7, #104]	; 0x68
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	3308      	adds	r3, #8
 80082e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80082e8:	623a      	str	r2, [r7, #32]
 80082ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ec:	69f9      	ldr	r1, [r7, #28]
 80082ee:	6a3a      	ldr	r2, [r7, #32]
 80082f0:	e841 2300 	strex	r3, r2, [r1]
 80082f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1e5      	bne.n	80082c8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2220      	movs	r2, #32
 8008300:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2220      	movs	r2, #32
 8008306:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2220      	movs	r2, #32
 800830c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008318:	2303      	movs	r3, #3
 800831a:	e010      	b.n	800833e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	69da      	ldr	r2, [r3, #28]
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	4013      	ands	r3, r2
 8008326:	68ba      	ldr	r2, [r7, #8]
 8008328:	429a      	cmp	r2, r3
 800832a:	bf0c      	ite	eq
 800832c:	2301      	moveq	r3, #1
 800832e:	2300      	movne	r3, #0
 8008330:	b2db      	uxtb	r3, r3
 8008332:	461a      	mov	r2, r3
 8008334:	79fb      	ldrb	r3, [r7, #7]
 8008336:	429a      	cmp	r2, r3
 8008338:	f43f af4a 	beq.w	80081d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3770      	adds	r7, #112	; 0x70
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
	...

08008348 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008348:	b480      	push	{r7}
 800834a:	b097      	sub	sp, #92	; 0x5c
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	4613      	mov	r3, r2
 8008354:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	68ba      	ldr	r2, [r7, #8]
 800835a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	88fa      	ldrh	r2, [r7, #6]
 8008360:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	88fa      	ldrh	r2, [r7, #6]
 8008368:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2200      	movs	r2, #0
 8008370:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800837a:	d10e      	bne.n	800839a <UART_Start_Receive_IT+0x52>
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d105      	bne.n	8008390 <UART_Start_Receive_IT+0x48>
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f240 12ff 	movw	r2, #511	; 0x1ff
 800838a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800838e:	e02d      	b.n	80083ec <UART_Start_Receive_IT+0xa4>
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	22ff      	movs	r2, #255	; 0xff
 8008394:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008398:	e028      	b.n	80083ec <UART_Start_Receive_IT+0xa4>
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d10d      	bne.n	80083be <UART_Start_Receive_IT+0x76>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d104      	bne.n	80083b4 <UART_Start_Receive_IT+0x6c>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	22ff      	movs	r2, #255	; 0xff
 80083ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083b2:	e01b      	b.n	80083ec <UART_Start_Receive_IT+0xa4>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	227f      	movs	r2, #127	; 0x7f
 80083b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083bc:	e016      	b.n	80083ec <UART_Start_Receive_IT+0xa4>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083c6:	d10d      	bne.n	80083e4 <UART_Start_Receive_IT+0x9c>
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d104      	bne.n	80083da <UART_Start_Receive_IT+0x92>
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	227f      	movs	r2, #127	; 0x7f
 80083d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083d8:	e008      	b.n	80083ec <UART_Start_Receive_IT+0xa4>
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	223f      	movs	r2, #63	; 0x3f
 80083de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083e2:	e003      	b.n	80083ec <UART_Start_Receive_IT+0xa4>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2200      	movs	r2, #0
 80083e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2222      	movs	r2, #34	; 0x22
 80083f8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	3308      	adds	r3, #8
 8008400:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008404:	e853 3f00 	ldrex	r3, [r3]
 8008408:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800840a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840c:	f043 0301 	orr.w	r3, r3, #1
 8008410:	657b      	str	r3, [r7, #84]	; 0x54
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	3308      	adds	r3, #8
 8008418:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800841a:	64ba      	str	r2, [r7, #72]	; 0x48
 800841c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008420:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008422:	e841 2300 	strex	r3, r2, [r1]
 8008426:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1e5      	bne.n	80083fa <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008436:	d107      	bne.n	8008448 <UART_Start_Receive_IT+0x100>
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	691b      	ldr	r3, [r3, #16]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d103      	bne.n	8008448 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	4a24      	ldr	r2, [pc, #144]	; (80084d4 <UART_Start_Receive_IT+0x18c>)
 8008444:	665a      	str	r2, [r3, #100]	; 0x64
 8008446:	e002      	b.n	800844e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	4a23      	ldr	r2, [pc, #140]	; (80084d8 <UART_Start_Receive_IT+0x190>)
 800844c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2200      	movs	r2, #0
 8008452:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d019      	beq.n	8008492 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008466:	e853 3f00 	ldrex	r3, [r3]
 800846a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800846c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008472:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	461a      	mov	r2, r3
 800847a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800847c:	637b      	str	r3, [r7, #52]	; 0x34
 800847e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008480:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008482:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008484:	e841 2300 	strex	r3, r2, [r1]
 8008488:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800848a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1e6      	bne.n	800845e <UART_Start_Receive_IT+0x116>
 8008490:	e018      	b.n	80084c4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	e853 3f00 	ldrex	r3, [r3]
 800849e:	613b      	str	r3, [r7, #16]
   return(result);
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	f043 0320 	orr.w	r3, r3, #32
 80084a6:	653b      	str	r3, [r7, #80]	; 0x50
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	461a      	mov	r2, r3
 80084ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084b0:	623b      	str	r3, [r7, #32]
 80084b2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b4:	69f9      	ldr	r1, [r7, #28]
 80084b6:	6a3a      	ldr	r2, [r7, #32]
 80084b8:	e841 2300 	strex	r3, r2, [r1]
 80084bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d1e6      	bne.n	8008492 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	375c      	adds	r7, #92	; 0x5c
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop
 80084d4:	080088fb 	.word	0x080088fb
 80084d8:	0800879b 	.word	0x0800879b

080084dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084dc:	b480      	push	{r7}
 80084de:	b095      	sub	sp, #84	; 0x54
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ec:	e853 3f00 	ldrex	r3, [r3]
 80084f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80084f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	461a      	mov	r2, r3
 8008500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008502:	643b      	str	r3, [r7, #64]	; 0x40
 8008504:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008506:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008508:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800850a:	e841 2300 	strex	r3, r2, [r1]
 800850e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008512:	2b00      	cmp	r3, #0
 8008514:	d1e6      	bne.n	80084e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	3308      	adds	r3, #8
 800851c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800851e:	6a3b      	ldr	r3, [r7, #32]
 8008520:	e853 3f00 	ldrex	r3, [r3]
 8008524:	61fb      	str	r3, [r7, #28]
   return(result);
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	f023 0301 	bic.w	r3, r3, #1
 800852c:	64bb      	str	r3, [r7, #72]	; 0x48
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	3308      	adds	r3, #8
 8008534:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008536:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008538:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800853a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800853c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800853e:	e841 2300 	strex	r3, r2, [r1]
 8008542:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1e5      	bne.n	8008516 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800854e:	2b01      	cmp	r3, #1
 8008550:	d118      	bne.n	8008584 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	e853 3f00 	ldrex	r3, [r3]
 800855e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	f023 0310 	bic.w	r3, r3, #16
 8008566:	647b      	str	r3, [r7, #68]	; 0x44
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	461a      	mov	r2, r3
 800856e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008570:	61bb      	str	r3, [r7, #24]
 8008572:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008574:	6979      	ldr	r1, [r7, #20]
 8008576:	69ba      	ldr	r2, [r7, #24]
 8008578:	e841 2300 	strex	r3, r2, [r1]
 800857c:	613b      	str	r3, [r7, #16]
   return(result);
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1e6      	bne.n	8008552 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2220      	movs	r2, #32
 8008588:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008596:	bf00      	nop
 8008598:	3754      	adds	r7, #84	; 0x54
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr

080085a2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b084      	sub	sp, #16
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f7ff facf 	bl	8007b64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085c6:	bf00      	nop
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80085ce:	b480      	push	{r7}
 80085d0:	b08f      	sub	sp, #60	; 0x3c
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085da:	2b21      	cmp	r3, #33	; 0x21
 80085dc:	d14d      	bne.n	800867a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d132      	bne.n	8008650 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f0:	6a3b      	ldr	r3, [r7, #32]
 80085f2:	e853 3f00 	ldrex	r3, [r3]
 80085f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085fe:	637b      	str	r3, [r7, #52]	; 0x34
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	461a      	mov	r2, r3
 8008606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008608:	62fb      	str	r3, [r7, #44]	; 0x2c
 800860a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800860e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008610:	e841 2300 	strex	r3, r2, [r1]
 8008614:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1e6      	bne.n	80085ea <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	e853 3f00 	ldrex	r3, [r3]
 8008628:	60bb      	str	r3, [r7, #8]
   return(result);
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008630:	633b      	str	r3, [r7, #48]	; 0x30
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	461a      	mov	r2, r3
 8008638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863a:	61bb      	str	r3, [r7, #24]
 800863c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863e:	6979      	ldr	r1, [r7, #20]
 8008640:	69ba      	ldr	r2, [r7, #24]
 8008642:	e841 2300 	strex	r3, r2, [r1]
 8008646:	613b      	str	r3, [r7, #16]
   return(result);
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d1e6      	bne.n	800861c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800864e:	e014      	b.n	800867a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008654:	781a      	ldrb	r2, [r3, #0]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	b292      	uxth	r2, r2
 800865c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008662:	1c5a      	adds	r2, r3, #1
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800866e:	b29b      	uxth	r3, r3
 8008670:	3b01      	subs	r3, #1
 8008672:	b29a      	uxth	r2, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800867a:	bf00      	nop
 800867c:	373c      	adds	r7, #60	; 0x3c
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr

08008686 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008686:	b480      	push	{r7}
 8008688:	b091      	sub	sp, #68	; 0x44
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008692:	2b21      	cmp	r3, #33	; 0x21
 8008694:	d151      	bne.n	800873a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800869c:	b29b      	uxth	r3, r3
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d132      	bne.n	8008708 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086aa:	e853 3f00 	ldrex	r3, [r3]
 80086ae:	623b      	str	r3, [r7, #32]
   return(result);
 80086b0:	6a3b      	ldr	r3, [r7, #32]
 80086b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	461a      	mov	r2, r3
 80086be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c0:	633b      	str	r3, [r7, #48]	; 0x30
 80086c2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086c8:	e841 2300 	strex	r3, r2, [r1]
 80086cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d1e6      	bne.n	80086a2 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	e853 3f00 	ldrex	r3, [r3]
 80086e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086e8:	637b      	str	r3, [r7, #52]	; 0x34
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	461a      	mov	r2, r3
 80086f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f2:	61fb      	str	r3, [r7, #28]
 80086f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f6:	69b9      	ldr	r1, [r7, #24]
 80086f8:	69fa      	ldr	r2, [r7, #28]
 80086fa:	e841 2300 	strex	r3, r2, [r1]
 80086fe:	617b      	str	r3, [r7, #20]
   return(result);
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1e6      	bne.n	80086d4 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008706:	e018      	b.n	800873a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800870c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800870e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008710:	881a      	ldrh	r2, [r3, #0]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800871a:	b292      	uxth	r2, r2
 800871c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008722:	1c9a      	adds	r2, r3, #2
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800872e:	b29b      	uxth	r3, r3
 8008730:	3b01      	subs	r3, #1
 8008732:	b29a      	uxth	r2, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800873a:	bf00      	nop
 800873c:	3744      	adds	r7, #68	; 0x44
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr

08008746 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008746:	b580      	push	{r7, lr}
 8008748:	b088      	sub	sp, #32
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	e853 3f00 	ldrex	r3, [r3]
 800875a:	60bb      	str	r3, [r7, #8]
   return(result);
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008762:	61fb      	str	r3, [r7, #28]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	461a      	mov	r2, r3
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	61bb      	str	r3, [r7, #24]
 800876e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008770:	6979      	ldr	r1, [r7, #20]
 8008772:	69ba      	ldr	r2, [r7, #24]
 8008774:	e841 2300 	strex	r3, r2, [r1]
 8008778:	613b      	str	r3, [r7, #16]
   return(result);
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d1e6      	bne.n	800874e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2220      	movs	r2, #32
 8008784:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f7ff f9df 	bl	8007b50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008792:	bf00      	nop
 8008794:	3720      	adds	r7, #32
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b096      	sub	sp, #88	; 0x58
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80087a8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087b0:	2b22      	cmp	r3, #34	; 0x22
 80087b2:	f040 8094 	bne.w	80088de <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80087bc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80087c0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80087c4:	b2d9      	uxtb	r1, r3
 80087c6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80087ca:	b2da      	uxtb	r2, r3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087d0:	400a      	ands	r2, r1
 80087d2:	b2d2      	uxtb	r2, r2
 80087d4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087da:	1c5a      	adds	r2, r3, #1
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	3b01      	subs	r3, #1
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d179      	bne.n	80088f2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008806:	e853 3f00 	ldrex	r3, [r3]
 800880a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800880c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800880e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008812:	653b      	str	r3, [r7, #80]	; 0x50
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	461a      	mov	r2, r3
 800881a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800881c:	647b      	str	r3, [r7, #68]	; 0x44
 800881e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008820:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008822:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008824:	e841 2300 	strex	r3, r2, [r1]
 8008828:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800882a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800882c:	2b00      	cmp	r3, #0
 800882e:	d1e6      	bne.n	80087fe <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	3308      	adds	r3, #8
 8008836:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883a:	e853 3f00 	ldrex	r3, [r3]
 800883e:	623b      	str	r3, [r7, #32]
   return(result);
 8008840:	6a3b      	ldr	r3, [r7, #32]
 8008842:	f023 0301 	bic.w	r3, r3, #1
 8008846:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	3308      	adds	r3, #8
 800884e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008850:	633a      	str	r2, [r7, #48]	; 0x30
 8008852:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008854:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008856:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008858:	e841 2300 	strex	r3, r2, [r1]
 800885c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800885e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008860:	2b00      	cmp	r3, #0
 8008862:	d1e5      	bne.n	8008830 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2220      	movs	r2, #32
 8008868:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008874:	2b01      	cmp	r3, #1
 8008876:	d12e      	bne.n	80088d6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	e853 3f00 	ldrex	r3, [r3]
 800888a:	60fb      	str	r3, [r7, #12]
   return(result);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f023 0310 	bic.w	r3, r3, #16
 8008892:	64bb      	str	r3, [r7, #72]	; 0x48
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	461a      	mov	r2, r3
 800889a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800889c:	61fb      	str	r3, [r7, #28]
 800889e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a0:	69b9      	ldr	r1, [r7, #24]
 80088a2:	69fa      	ldr	r2, [r7, #28]
 80088a4:	e841 2300 	strex	r3, r2, [r1]
 80088a8:	617b      	str	r3, [r7, #20]
   return(result);
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d1e6      	bne.n	800887e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	69db      	ldr	r3, [r3, #28]
 80088b6:	f003 0310 	and.w	r3, r3, #16
 80088ba:	2b10      	cmp	r3, #16
 80088bc:	d103      	bne.n	80088c6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2210      	movs	r2, #16
 80088c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80088cc:	4619      	mov	r1, r3
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7ff f952 	bl	8007b78 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80088d4:	e00d      	b.n	80088f2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f7fb fa04 	bl	8003ce4 <HAL_UART_RxCpltCallback>
}
 80088dc:	e009      	b.n	80088f2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	8b1b      	ldrh	r3, [r3, #24]
 80088e4:	b29a      	uxth	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f042 0208 	orr.w	r2, r2, #8
 80088ee:	b292      	uxth	r2, r2
 80088f0:	831a      	strh	r2, [r3, #24]
}
 80088f2:	bf00      	nop
 80088f4:	3758      	adds	r7, #88	; 0x58
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b096      	sub	sp, #88	; 0x58
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008908:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008910:	2b22      	cmp	r3, #34	; 0x22
 8008912:	f040 8094 	bne.w	8008a3e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800891c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008924:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008926:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800892a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800892e:	4013      	ands	r3, r2
 8008930:	b29a      	uxth	r2, r3
 8008932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008934:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800893a:	1c9a      	adds	r2, r3, #2
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008946:	b29b      	uxth	r3, r3
 8008948:	3b01      	subs	r3, #1
 800894a:	b29a      	uxth	r2, r3
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008958:	b29b      	uxth	r3, r3
 800895a:	2b00      	cmp	r3, #0
 800895c:	d179      	bne.n	8008a52 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008966:	e853 3f00 	ldrex	r3, [r3]
 800896a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800896c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008972:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	461a      	mov	r2, r3
 800897a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800897c:	643b      	str	r3, [r7, #64]	; 0x40
 800897e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008980:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008982:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008984:	e841 2300 	strex	r3, r2, [r1]
 8008988:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800898a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898c:	2b00      	cmp	r3, #0
 800898e:	d1e6      	bne.n	800895e <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	3308      	adds	r3, #8
 8008996:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008998:	6a3b      	ldr	r3, [r7, #32]
 800899a:	e853 3f00 	ldrex	r3, [r3]
 800899e:	61fb      	str	r3, [r7, #28]
   return(result);
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	f023 0301 	bic.w	r3, r3, #1
 80089a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	3308      	adds	r3, #8
 80089ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80089b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089b8:	e841 2300 	strex	r3, r2, [r1]
 80089bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d1e5      	bne.n	8008990 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2220      	movs	r2, #32
 80089c8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d12e      	bne.n	8008a36 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	e853 3f00 	ldrex	r3, [r3]
 80089ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	f023 0310 	bic.w	r3, r3, #16
 80089f2:	647b      	str	r3, [r7, #68]	; 0x44
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	461a      	mov	r2, r3
 80089fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089fc:	61bb      	str	r3, [r7, #24]
 80089fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a00:	6979      	ldr	r1, [r7, #20]
 8008a02:	69ba      	ldr	r2, [r7, #24]
 8008a04:	e841 2300 	strex	r3, r2, [r1]
 8008a08:	613b      	str	r3, [r7, #16]
   return(result);
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d1e6      	bne.n	80089de <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	69db      	ldr	r3, [r3, #28]
 8008a16:	f003 0310 	and.w	r3, r3, #16
 8008a1a:	2b10      	cmp	r3, #16
 8008a1c:	d103      	bne.n	8008a26 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2210      	movs	r2, #16
 8008a24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f7ff f8a2 	bl	8007b78 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a34:	e00d      	b.n	8008a52 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f7fb f954 	bl	8003ce4 <HAL_UART_RxCpltCallback>
}
 8008a3c:	e009      	b.n	8008a52 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	8b1b      	ldrh	r3, [r3, #24]
 8008a44:	b29a      	uxth	r2, r3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f042 0208 	orr.w	r2, r2, #8
 8008a4e:	b292      	uxth	r2, r2
 8008a50:	831a      	strh	r2, [r3, #24]
}
 8008a52:	bf00      	nop
 8008a54:	3758      	adds	r7, #88	; 0x58
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008a5a:	b480      	push	{r7}
 8008a5c:	b083      	sub	sp, #12
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008a62:	bf00      	nop
 8008a64:	370c      	adds	r7, #12
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
	...

08008a70 <__errno>:
 8008a70:	4b01      	ldr	r3, [pc, #4]	; (8008a78 <__errno+0x8>)
 8008a72:	6818      	ldr	r0, [r3, #0]
 8008a74:	4770      	bx	lr
 8008a76:	bf00      	nop
 8008a78:	200000fc 	.word	0x200000fc

08008a7c <__libc_init_array>:
 8008a7c:	b570      	push	{r4, r5, r6, lr}
 8008a7e:	4d0d      	ldr	r5, [pc, #52]	; (8008ab4 <__libc_init_array+0x38>)
 8008a80:	4c0d      	ldr	r4, [pc, #52]	; (8008ab8 <__libc_init_array+0x3c>)
 8008a82:	1b64      	subs	r4, r4, r5
 8008a84:	10a4      	asrs	r4, r4, #2
 8008a86:	2600      	movs	r6, #0
 8008a88:	42a6      	cmp	r6, r4
 8008a8a:	d109      	bne.n	8008aa0 <__libc_init_array+0x24>
 8008a8c:	4d0b      	ldr	r5, [pc, #44]	; (8008abc <__libc_init_array+0x40>)
 8008a8e:	4c0c      	ldr	r4, [pc, #48]	; (8008ac0 <__libc_init_array+0x44>)
 8008a90:	f003 fd92 	bl	800c5b8 <_init>
 8008a94:	1b64      	subs	r4, r4, r5
 8008a96:	10a4      	asrs	r4, r4, #2
 8008a98:	2600      	movs	r6, #0
 8008a9a:	42a6      	cmp	r6, r4
 8008a9c:	d105      	bne.n	8008aaa <__libc_init_array+0x2e>
 8008a9e:	bd70      	pop	{r4, r5, r6, pc}
 8008aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008aa4:	4798      	blx	r3
 8008aa6:	3601      	adds	r6, #1
 8008aa8:	e7ee      	b.n	8008a88 <__libc_init_array+0xc>
 8008aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8008aae:	4798      	blx	r3
 8008ab0:	3601      	adds	r6, #1
 8008ab2:	e7f2      	b.n	8008a9a <__libc_init_array+0x1e>
 8008ab4:	0800cbf0 	.word	0x0800cbf0
 8008ab8:	0800cbf0 	.word	0x0800cbf0
 8008abc:	0800cbf0 	.word	0x0800cbf0
 8008ac0:	0800cbf4 	.word	0x0800cbf4

08008ac4 <malloc>:
 8008ac4:	4b02      	ldr	r3, [pc, #8]	; (8008ad0 <malloc+0xc>)
 8008ac6:	4601      	mov	r1, r0
 8008ac8:	6818      	ldr	r0, [r3, #0]
 8008aca:	f000 b88d 	b.w	8008be8 <_malloc_r>
 8008ace:	bf00      	nop
 8008ad0:	200000fc 	.word	0x200000fc

08008ad4 <free>:
 8008ad4:	4b02      	ldr	r3, [pc, #8]	; (8008ae0 <free+0xc>)
 8008ad6:	4601      	mov	r1, r0
 8008ad8:	6818      	ldr	r0, [r3, #0]
 8008ada:	f000 b819 	b.w	8008b10 <_free_r>
 8008ade:	bf00      	nop
 8008ae0:	200000fc 	.word	0x200000fc

08008ae4 <memcpy>:
 8008ae4:	440a      	add	r2, r1
 8008ae6:	4291      	cmp	r1, r2
 8008ae8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008aec:	d100      	bne.n	8008af0 <memcpy+0xc>
 8008aee:	4770      	bx	lr
 8008af0:	b510      	push	{r4, lr}
 8008af2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008af6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008afa:	4291      	cmp	r1, r2
 8008afc:	d1f9      	bne.n	8008af2 <memcpy+0xe>
 8008afe:	bd10      	pop	{r4, pc}

08008b00 <memset>:
 8008b00:	4402      	add	r2, r0
 8008b02:	4603      	mov	r3, r0
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d100      	bne.n	8008b0a <memset+0xa>
 8008b08:	4770      	bx	lr
 8008b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b0e:	e7f9      	b.n	8008b04 <memset+0x4>

08008b10 <_free_r>:
 8008b10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b12:	2900      	cmp	r1, #0
 8008b14:	d044      	beq.n	8008ba0 <_free_r+0x90>
 8008b16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b1a:	9001      	str	r0, [sp, #4]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	f1a1 0404 	sub.w	r4, r1, #4
 8008b22:	bfb8      	it	lt
 8008b24:	18e4      	addlt	r4, r4, r3
 8008b26:	f001 fb77 	bl	800a218 <__malloc_lock>
 8008b2a:	4a1e      	ldr	r2, [pc, #120]	; (8008ba4 <_free_r+0x94>)
 8008b2c:	9801      	ldr	r0, [sp, #4]
 8008b2e:	6813      	ldr	r3, [r2, #0]
 8008b30:	b933      	cbnz	r3, 8008b40 <_free_r+0x30>
 8008b32:	6063      	str	r3, [r4, #4]
 8008b34:	6014      	str	r4, [r2, #0]
 8008b36:	b003      	add	sp, #12
 8008b38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b3c:	f001 bb72 	b.w	800a224 <__malloc_unlock>
 8008b40:	42a3      	cmp	r3, r4
 8008b42:	d908      	bls.n	8008b56 <_free_r+0x46>
 8008b44:	6825      	ldr	r5, [r4, #0]
 8008b46:	1961      	adds	r1, r4, r5
 8008b48:	428b      	cmp	r3, r1
 8008b4a:	bf01      	itttt	eq
 8008b4c:	6819      	ldreq	r1, [r3, #0]
 8008b4e:	685b      	ldreq	r3, [r3, #4]
 8008b50:	1949      	addeq	r1, r1, r5
 8008b52:	6021      	streq	r1, [r4, #0]
 8008b54:	e7ed      	b.n	8008b32 <_free_r+0x22>
 8008b56:	461a      	mov	r2, r3
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	b10b      	cbz	r3, 8008b60 <_free_r+0x50>
 8008b5c:	42a3      	cmp	r3, r4
 8008b5e:	d9fa      	bls.n	8008b56 <_free_r+0x46>
 8008b60:	6811      	ldr	r1, [r2, #0]
 8008b62:	1855      	adds	r5, r2, r1
 8008b64:	42a5      	cmp	r5, r4
 8008b66:	d10b      	bne.n	8008b80 <_free_r+0x70>
 8008b68:	6824      	ldr	r4, [r4, #0]
 8008b6a:	4421      	add	r1, r4
 8008b6c:	1854      	adds	r4, r2, r1
 8008b6e:	42a3      	cmp	r3, r4
 8008b70:	6011      	str	r1, [r2, #0]
 8008b72:	d1e0      	bne.n	8008b36 <_free_r+0x26>
 8008b74:	681c      	ldr	r4, [r3, #0]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	6053      	str	r3, [r2, #4]
 8008b7a:	4421      	add	r1, r4
 8008b7c:	6011      	str	r1, [r2, #0]
 8008b7e:	e7da      	b.n	8008b36 <_free_r+0x26>
 8008b80:	d902      	bls.n	8008b88 <_free_r+0x78>
 8008b82:	230c      	movs	r3, #12
 8008b84:	6003      	str	r3, [r0, #0]
 8008b86:	e7d6      	b.n	8008b36 <_free_r+0x26>
 8008b88:	6825      	ldr	r5, [r4, #0]
 8008b8a:	1961      	adds	r1, r4, r5
 8008b8c:	428b      	cmp	r3, r1
 8008b8e:	bf04      	itt	eq
 8008b90:	6819      	ldreq	r1, [r3, #0]
 8008b92:	685b      	ldreq	r3, [r3, #4]
 8008b94:	6063      	str	r3, [r4, #4]
 8008b96:	bf04      	itt	eq
 8008b98:	1949      	addeq	r1, r1, r5
 8008b9a:	6021      	streq	r1, [r4, #0]
 8008b9c:	6054      	str	r4, [r2, #4]
 8008b9e:	e7ca      	b.n	8008b36 <_free_r+0x26>
 8008ba0:	b003      	add	sp, #12
 8008ba2:	bd30      	pop	{r4, r5, pc}
 8008ba4:	200005dc 	.word	0x200005dc

08008ba8 <sbrk_aligned>:
 8008ba8:	b570      	push	{r4, r5, r6, lr}
 8008baa:	4e0e      	ldr	r6, [pc, #56]	; (8008be4 <sbrk_aligned+0x3c>)
 8008bac:	460c      	mov	r4, r1
 8008bae:	6831      	ldr	r1, [r6, #0]
 8008bb0:	4605      	mov	r5, r0
 8008bb2:	b911      	cbnz	r1, 8008bba <sbrk_aligned+0x12>
 8008bb4:	f000 f894 	bl	8008ce0 <_sbrk_r>
 8008bb8:	6030      	str	r0, [r6, #0]
 8008bba:	4621      	mov	r1, r4
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	f000 f88f 	bl	8008ce0 <_sbrk_r>
 8008bc2:	1c43      	adds	r3, r0, #1
 8008bc4:	d00a      	beq.n	8008bdc <sbrk_aligned+0x34>
 8008bc6:	1cc4      	adds	r4, r0, #3
 8008bc8:	f024 0403 	bic.w	r4, r4, #3
 8008bcc:	42a0      	cmp	r0, r4
 8008bce:	d007      	beq.n	8008be0 <sbrk_aligned+0x38>
 8008bd0:	1a21      	subs	r1, r4, r0
 8008bd2:	4628      	mov	r0, r5
 8008bd4:	f000 f884 	bl	8008ce0 <_sbrk_r>
 8008bd8:	3001      	adds	r0, #1
 8008bda:	d101      	bne.n	8008be0 <sbrk_aligned+0x38>
 8008bdc:	f04f 34ff 	mov.w	r4, #4294967295
 8008be0:	4620      	mov	r0, r4
 8008be2:	bd70      	pop	{r4, r5, r6, pc}
 8008be4:	200005e0 	.word	0x200005e0

08008be8 <_malloc_r>:
 8008be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bec:	1ccd      	adds	r5, r1, #3
 8008bee:	f025 0503 	bic.w	r5, r5, #3
 8008bf2:	3508      	adds	r5, #8
 8008bf4:	2d0c      	cmp	r5, #12
 8008bf6:	bf38      	it	cc
 8008bf8:	250c      	movcc	r5, #12
 8008bfa:	2d00      	cmp	r5, #0
 8008bfc:	4607      	mov	r7, r0
 8008bfe:	db01      	blt.n	8008c04 <_malloc_r+0x1c>
 8008c00:	42a9      	cmp	r1, r5
 8008c02:	d905      	bls.n	8008c10 <_malloc_r+0x28>
 8008c04:	230c      	movs	r3, #12
 8008c06:	603b      	str	r3, [r7, #0]
 8008c08:	2600      	movs	r6, #0
 8008c0a:	4630      	mov	r0, r6
 8008c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c10:	4e2e      	ldr	r6, [pc, #184]	; (8008ccc <_malloc_r+0xe4>)
 8008c12:	f001 fb01 	bl	800a218 <__malloc_lock>
 8008c16:	6833      	ldr	r3, [r6, #0]
 8008c18:	461c      	mov	r4, r3
 8008c1a:	bb34      	cbnz	r4, 8008c6a <_malloc_r+0x82>
 8008c1c:	4629      	mov	r1, r5
 8008c1e:	4638      	mov	r0, r7
 8008c20:	f7ff ffc2 	bl	8008ba8 <sbrk_aligned>
 8008c24:	1c43      	adds	r3, r0, #1
 8008c26:	4604      	mov	r4, r0
 8008c28:	d14d      	bne.n	8008cc6 <_malloc_r+0xde>
 8008c2a:	6834      	ldr	r4, [r6, #0]
 8008c2c:	4626      	mov	r6, r4
 8008c2e:	2e00      	cmp	r6, #0
 8008c30:	d140      	bne.n	8008cb4 <_malloc_r+0xcc>
 8008c32:	6823      	ldr	r3, [r4, #0]
 8008c34:	4631      	mov	r1, r6
 8008c36:	4638      	mov	r0, r7
 8008c38:	eb04 0803 	add.w	r8, r4, r3
 8008c3c:	f000 f850 	bl	8008ce0 <_sbrk_r>
 8008c40:	4580      	cmp	r8, r0
 8008c42:	d13a      	bne.n	8008cba <_malloc_r+0xd2>
 8008c44:	6821      	ldr	r1, [r4, #0]
 8008c46:	3503      	adds	r5, #3
 8008c48:	1a6d      	subs	r5, r5, r1
 8008c4a:	f025 0503 	bic.w	r5, r5, #3
 8008c4e:	3508      	adds	r5, #8
 8008c50:	2d0c      	cmp	r5, #12
 8008c52:	bf38      	it	cc
 8008c54:	250c      	movcc	r5, #12
 8008c56:	4629      	mov	r1, r5
 8008c58:	4638      	mov	r0, r7
 8008c5a:	f7ff ffa5 	bl	8008ba8 <sbrk_aligned>
 8008c5e:	3001      	adds	r0, #1
 8008c60:	d02b      	beq.n	8008cba <_malloc_r+0xd2>
 8008c62:	6823      	ldr	r3, [r4, #0]
 8008c64:	442b      	add	r3, r5
 8008c66:	6023      	str	r3, [r4, #0]
 8008c68:	e00e      	b.n	8008c88 <_malloc_r+0xa0>
 8008c6a:	6822      	ldr	r2, [r4, #0]
 8008c6c:	1b52      	subs	r2, r2, r5
 8008c6e:	d41e      	bmi.n	8008cae <_malloc_r+0xc6>
 8008c70:	2a0b      	cmp	r2, #11
 8008c72:	d916      	bls.n	8008ca2 <_malloc_r+0xba>
 8008c74:	1961      	adds	r1, r4, r5
 8008c76:	42a3      	cmp	r3, r4
 8008c78:	6025      	str	r5, [r4, #0]
 8008c7a:	bf18      	it	ne
 8008c7c:	6059      	strne	r1, [r3, #4]
 8008c7e:	6863      	ldr	r3, [r4, #4]
 8008c80:	bf08      	it	eq
 8008c82:	6031      	streq	r1, [r6, #0]
 8008c84:	5162      	str	r2, [r4, r5]
 8008c86:	604b      	str	r3, [r1, #4]
 8008c88:	4638      	mov	r0, r7
 8008c8a:	f104 060b 	add.w	r6, r4, #11
 8008c8e:	f001 fac9 	bl	800a224 <__malloc_unlock>
 8008c92:	f026 0607 	bic.w	r6, r6, #7
 8008c96:	1d23      	adds	r3, r4, #4
 8008c98:	1af2      	subs	r2, r6, r3
 8008c9a:	d0b6      	beq.n	8008c0a <_malloc_r+0x22>
 8008c9c:	1b9b      	subs	r3, r3, r6
 8008c9e:	50a3      	str	r3, [r4, r2]
 8008ca0:	e7b3      	b.n	8008c0a <_malloc_r+0x22>
 8008ca2:	6862      	ldr	r2, [r4, #4]
 8008ca4:	42a3      	cmp	r3, r4
 8008ca6:	bf0c      	ite	eq
 8008ca8:	6032      	streq	r2, [r6, #0]
 8008caa:	605a      	strne	r2, [r3, #4]
 8008cac:	e7ec      	b.n	8008c88 <_malloc_r+0xa0>
 8008cae:	4623      	mov	r3, r4
 8008cb0:	6864      	ldr	r4, [r4, #4]
 8008cb2:	e7b2      	b.n	8008c1a <_malloc_r+0x32>
 8008cb4:	4634      	mov	r4, r6
 8008cb6:	6876      	ldr	r6, [r6, #4]
 8008cb8:	e7b9      	b.n	8008c2e <_malloc_r+0x46>
 8008cba:	230c      	movs	r3, #12
 8008cbc:	603b      	str	r3, [r7, #0]
 8008cbe:	4638      	mov	r0, r7
 8008cc0:	f001 fab0 	bl	800a224 <__malloc_unlock>
 8008cc4:	e7a1      	b.n	8008c0a <_malloc_r+0x22>
 8008cc6:	6025      	str	r5, [r4, #0]
 8008cc8:	e7de      	b.n	8008c88 <_malloc_r+0xa0>
 8008cca:	bf00      	nop
 8008ccc:	200005dc 	.word	0x200005dc

08008cd0 <realloc>:
 8008cd0:	4b02      	ldr	r3, [pc, #8]	; (8008cdc <realloc+0xc>)
 8008cd2:	460a      	mov	r2, r1
 8008cd4:	4601      	mov	r1, r0
 8008cd6:	6818      	ldr	r0, [r3, #0]
 8008cd8:	f001 bf81 	b.w	800abde <_realloc_r>
 8008cdc:	200000fc 	.word	0x200000fc

08008ce0 <_sbrk_r>:
 8008ce0:	b538      	push	{r3, r4, r5, lr}
 8008ce2:	4d06      	ldr	r5, [pc, #24]	; (8008cfc <_sbrk_r+0x1c>)
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	4604      	mov	r4, r0
 8008ce8:	4608      	mov	r0, r1
 8008cea:	602b      	str	r3, [r5, #0]
 8008cec:	f7fb faec 	bl	80042c8 <_sbrk>
 8008cf0:	1c43      	adds	r3, r0, #1
 8008cf2:	d102      	bne.n	8008cfa <_sbrk_r+0x1a>
 8008cf4:	682b      	ldr	r3, [r5, #0]
 8008cf6:	b103      	cbz	r3, 8008cfa <_sbrk_r+0x1a>
 8008cf8:	6023      	str	r3, [r4, #0]
 8008cfa:	bd38      	pop	{r3, r4, r5, pc}
 8008cfc:	200005e4 	.word	0x200005e4

08008d00 <siprintf>:
 8008d00:	b40e      	push	{r1, r2, r3}
 8008d02:	b500      	push	{lr}
 8008d04:	b09c      	sub	sp, #112	; 0x70
 8008d06:	ab1d      	add	r3, sp, #116	; 0x74
 8008d08:	9002      	str	r0, [sp, #8]
 8008d0a:	9006      	str	r0, [sp, #24]
 8008d0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d10:	4809      	ldr	r0, [pc, #36]	; (8008d38 <siprintf+0x38>)
 8008d12:	9107      	str	r1, [sp, #28]
 8008d14:	9104      	str	r1, [sp, #16]
 8008d16:	4909      	ldr	r1, [pc, #36]	; (8008d3c <siprintf+0x3c>)
 8008d18:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d1c:	9105      	str	r1, [sp, #20]
 8008d1e:	6800      	ldr	r0, [r0, #0]
 8008d20:	9301      	str	r3, [sp, #4]
 8008d22:	a902      	add	r1, sp, #8
 8008d24:	f001 ffe6 	bl	800acf4 <_svfiprintf_r>
 8008d28:	9b02      	ldr	r3, [sp, #8]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	701a      	strb	r2, [r3, #0]
 8008d2e:	b01c      	add	sp, #112	; 0x70
 8008d30:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d34:	b003      	add	sp, #12
 8008d36:	4770      	bx	lr
 8008d38:	200000fc 	.word	0x200000fc
 8008d3c:	ffff0208 	.word	0xffff0208

08008d40 <siscanf>:
 8008d40:	b40e      	push	{r1, r2, r3}
 8008d42:	b510      	push	{r4, lr}
 8008d44:	b09f      	sub	sp, #124	; 0x7c
 8008d46:	ac21      	add	r4, sp, #132	; 0x84
 8008d48:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008d4c:	f854 2b04 	ldr.w	r2, [r4], #4
 8008d50:	9201      	str	r2, [sp, #4]
 8008d52:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008d56:	9004      	str	r0, [sp, #16]
 8008d58:	9008      	str	r0, [sp, #32]
 8008d5a:	f7f7 fa43 	bl	80001e4 <strlen>
 8008d5e:	4b0c      	ldr	r3, [pc, #48]	; (8008d90 <siscanf+0x50>)
 8008d60:	9005      	str	r0, [sp, #20]
 8008d62:	9009      	str	r0, [sp, #36]	; 0x24
 8008d64:	930d      	str	r3, [sp, #52]	; 0x34
 8008d66:	480b      	ldr	r0, [pc, #44]	; (8008d94 <siscanf+0x54>)
 8008d68:	9a01      	ldr	r2, [sp, #4]
 8008d6a:	6800      	ldr	r0, [r0, #0]
 8008d6c:	9403      	str	r4, [sp, #12]
 8008d6e:	2300      	movs	r3, #0
 8008d70:	9311      	str	r3, [sp, #68]	; 0x44
 8008d72:	9316      	str	r3, [sp, #88]	; 0x58
 8008d74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d78:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008d7c:	a904      	add	r1, sp, #16
 8008d7e:	4623      	mov	r3, r4
 8008d80:	f002 f912 	bl	800afa8 <__ssvfiscanf_r>
 8008d84:	b01f      	add	sp, #124	; 0x7c
 8008d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d8a:	b003      	add	sp, #12
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	08008dbb 	.word	0x08008dbb
 8008d94:	200000fc 	.word	0x200000fc

08008d98 <__sread>:
 8008d98:	b510      	push	{r4, lr}
 8008d9a:	460c      	mov	r4, r1
 8008d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008da0:	f002 fd60 	bl	800b864 <_read_r>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	bfab      	itete	ge
 8008da8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008daa:	89a3      	ldrhlt	r3, [r4, #12]
 8008dac:	181b      	addge	r3, r3, r0
 8008dae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008db2:	bfac      	ite	ge
 8008db4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008db6:	81a3      	strhlt	r3, [r4, #12]
 8008db8:	bd10      	pop	{r4, pc}

08008dba <__seofread>:
 8008dba:	2000      	movs	r0, #0
 8008dbc:	4770      	bx	lr

08008dbe <__swrite>:
 8008dbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dc2:	461f      	mov	r7, r3
 8008dc4:	898b      	ldrh	r3, [r1, #12]
 8008dc6:	05db      	lsls	r3, r3, #23
 8008dc8:	4605      	mov	r5, r0
 8008dca:	460c      	mov	r4, r1
 8008dcc:	4616      	mov	r6, r2
 8008dce:	d505      	bpl.n	8008ddc <__swrite+0x1e>
 8008dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dd4:	2302      	movs	r3, #2
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f001 f9fa 	bl	800a1d0 <_lseek_r>
 8008ddc:	89a3      	ldrh	r3, [r4, #12]
 8008dde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008de2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008de6:	81a3      	strh	r3, [r4, #12]
 8008de8:	4632      	mov	r2, r6
 8008dea:	463b      	mov	r3, r7
 8008dec:	4628      	mov	r0, r5
 8008dee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008df2:	f000 be5b 	b.w	8009aac <_write_r>

08008df6 <__sseek>:
 8008df6:	b510      	push	{r4, lr}
 8008df8:	460c      	mov	r4, r1
 8008dfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dfe:	f001 f9e7 	bl	800a1d0 <_lseek_r>
 8008e02:	1c43      	adds	r3, r0, #1
 8008e04:	89a3      	ldrh	r3, [r4, #12]
 8008e06:	bf15      	itete	ne
 8008e08:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e12:	81a3      	strheq	r3, [r4, #12]
 8008e14:	bf18      	it	ne
 8008e16:	81a3      	strhne	r3, [r4, #12]
 8008e18:	bd10      	pop	{r4, pc}

08008e1a <__sclose>:
 8008e1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e1e:	f000 be57 	b.w	8009ad0 <_close_r>

08008e22 <strncmp>:
 8008e22:	b510      	push	{r4, lr}
 8008e24:	b17a      	cbz	r2, 8008e46 <strncmp+0x24>
 8008e26:	4603      	mov	r3, r0
 8008e28:	3901      	subs	r1, #1
 8008e2a:	1884      	adds	r4, r0, r2
 8008e2c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008e30:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008e34:	4290      	cmp	r0, r2
 8008e36:	d101      	bne.n	8008e3c <strncmp+0x1a>
 8008e38:	42a3      	cmp	r3, r4
 8008e3a:	d101      	bne.n	8008e40 <strncmp+0x1e>
 8008e3c:	1a80      	subs	r0, r0, r2
 8008e3e:	bd10      	pop	{r4, pc}
 8008e40:	2800      	cmp	r0, #0
 8008e42:	d1f3      	bne.n	8008e2c <strncmp+0xa>
 8008e44:	e7fa      	b.n	8008e3c <strncmp+0x1a>
 8008e46:	4610      	mov	r0, r2
 8008e48:	e7f9      	b.n	8008e3e <strncmp+0x1c>

08008e4a <sulp>:
 8008e4a:	b570      	push	{r4, r5, r6, lr}
 8008e4c:	4604      	mov	r4, r0
 8008e4e:	460d      	mov	r5, r1
 8008e50:	ec45 4b10 	vmov	d0, r4, r5
 8008e54:	4616      	mov	r6, r2
 8008e56:	f001 fd5d 	bl	800a914 <__ulp>
 8008e5a:	ec51 0b10 	vmov	r0, r1, d0
 8008e5e:	b17e      	cbz	r6, 8008e80 <sulp+0x36>
 8008e60:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008e64:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	dd09      	ble.n	8008e80 <sulp+0x36>
 8008e6c:	051b      	lsls	r3, r3, #20
 8008e6e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008e72:	2400      	movs	r4, #0
 8008e74:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008e78:	4622      	mov	r2, r4
 8008e7a:	462b      	mov	r3, r5
 8008e7c:	f7f7 fbcc 	bl	8000618 <__aeabi_dmul>
 8008e80:	bd70      	pop	{r4, r5, r6, pc}
 8008e82:	0000      	movs	r0, r0
 8008e84:	0000      	movs	r0, r0
	...

08008e88 <_strtod_l>:
 8008e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e8c:	ed2d 8b02 	vpush	{d8}
 8008e90:	b09d      	sub	sp, #116	; 0x74
 8008e92:	461f      	mov	r7, r3
 8008e94:	2300      	movs	r3, #0
 8008e96:	9318      	str	r3, [sp, #96]	; 0x60
 8008e98:	4ba2      	ldr	r3, [pc, #648]	; (8009124 <_strtod_l+0x29c>)
 8008e9a:	9213      	str	r2, [sp, #76]	; 0x4c
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	9305      	str	r3, [sp, #20]
 8008ea0:	4604      	mov	r4, r0
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	4688      	mov	r8, r1
 8008ea6:	f7f7 f99d 	bl	80001e4 <strlen>
 8008eaa:	f04f 0a00 	mov.w	sl, #0
 8008eae:	4605      	mov	r5, r0
 8008eb0:	f04f 0b00 	mov.w	fp, #0
 8008eb4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008eb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008eba:	781a      	ldrb	r2, [r3, #0]
 8008ebc:	2a2b      	cmp	r2, #43	; 0x2b
 8008ebe:	d04e      	beq.n	8008f5e <_strtod_l+0xd6>
 8008ec0:	d83b      	bhi.n	8008f3a <_strtod_l+0xb2>
 8008ec2:	2a0d      	cmp	r2, #13
 8008ec4:	d834      	bhi.n	8008f30 <_strtod_l+0xa8>
 8008ec6:	2a08      	cmp	r2, #8
 8008ec8:	d834      	bhi.n	8008f34 <_strtod_l+0xac>
 8008eca:	2a00      	cmp	r2, #0
 8008ecc:	d03e      	beq.n	8008f4c <_strtod_l+0xc4>
 8008ece:	2300      	movs	r3, #0
 8008ed0:	930a      	str	r3, [sp, #40]	; 0x28
 8008ed2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008ed4:	7833      	ldrb	r3, [r6, #0]
 8008ed6:	2b30      	cmp	r3, #48	; 0x30
 8008ed8:	f040 80b0 	bne.w	800903c <_strtod_l+0x1b4>
 8008edc:	7873      	ldrb	r3, [r6, #1]
 8008ede:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008ee2:	2b58      	cmp	r3, #88	; 0x58
 8008ee4:	d168      	bne.n	8008fb8 <_strtod_l+0x130>
 8008ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ee8:	9301      	str	r3, [sp, #4]
 8008eea:	ab18      	add	r3, sp, #96	; 0x60
 8008eec:	9702      	str	r7, [sp, #8]
 8008eee:	9300      	str	r3, [sp, #0]
 8008ef0:	4a8d      	ldr	r2, [pc, #564]	; (8009128 <_strtod_l+0x2a0>)
 8008ef2:	ab19      	add	r3, sp, #100	; 0x64
 8008ef4:	a917      	add	r1, sp, #92	; 0x5c
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	f000 fe62 	bl	8009bc0 <__gethex>
 8008efc:	f010 0707 	ands.w	r7, r0, #7
 8008f00:	4605      	mov	r5, r0
 8008f02:	d005      	beq.n	8008f10 <_strtod_l+0x88>
 8008f04:	2f06      	cmp	r7, #6
 8008f06:	d12c      	bne.n	8008f62 <_strtod_l+0xda>
 8008f08:	3601      	adds	r6, #1
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	9617      	str	r6, [sp, #92]	; 0x5c
 8008f0e:	930a      	str	r3, [sp, #40]	; 0x28
 8008f10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	f040 8590 	bne.w	8009a38 <_strtod_l+0xbb0>
 8008f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f1a:	b1eb      	cbz	r3, 8008f58 <_strtod_l+0xd0>
 8008f1c:	4652      	mov	r2, sl
 8008f1e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008f22:	ec43 2b10 	vmov	d0, r2, r3
 8008f26:	b01d      	add	sp, #116	; 0x74
 8008f28:	ecbd 8b02 	vpop	{d8}
 8008f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f30:	2a20      	cmp	r2, #32
 8008f32:	d1cc      	bne.n	8008ece <_strtod_l+0x46>
 8008f34:	3301      	adds	r3, #1
 8008f36:	9317      	str	r3, [sp, #92]	; 0x5c
 8008f38:	e7be      	b.n	8008eb8 <_strtod_l+0x30>
 8008f3a:	2a2d      	cmp	r2, #45	; 0x2d
 8008f3c:	d1c7      	bne.n	8008ece <_strtod_l+0x46>
 8008f3e:	2201      	movs	r2, #1
 8008f40:	920a      	str	r2, [sp, #40]	; 0x28
 8008f42:	1c5a      	adds	r2, r3, #1
 8008f44:	9217      	str	r2, [sp, #92]	; 0x5c
 8008f46:	785b      	ldrb	r3, [r3, #1]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d1c2      	bne.n	8008ed2 <_strtod_l+0x4a>
 8008f4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f4e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	f040 856e 	bne.w	8009a34 <_strtod_l+0xbac>
 8008f58:	4652      	mov	r2, sl
 8008f5a:	465b      	mov	r3, fp
 8008f5c:	e7e1      	b.n	8008f22 <_strtod_l+0x9a>
 8008f5e:	2200      	movs	r2, #0
 8008f60:	e7ee      	b.n	8008f40 <_strtod_l+0xb8>
 8008f62:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008f64:	b13a      	cbz	r2, 8008f76 <_strtod_l+0xee>
 8008f66:	2135      	movs	r1, #53	; 0x35
 8008f68:	a81a      	add	r0, sp, #104	; 0x68
 8008f6a:	f001 fdde 	bl	800ab2a <__copybits>
 8008f6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008f70:	4620      	mov	r0, r4
 8008f72:	f001 f99d 	bl	800a2b0 <_Bfree>
 8008f76:	3f01      	subs	r7, #1
 8008f78:	2f04      	cmp	r7, #4
 8008f7a:	d806      	bhi.n	8008f8a <_strtod_l+0x102>
 8008f7c:	e8df f007 	tbb	[pc, r7]
 8008f80:	1714030a 	.word	0x1714030a
 8008f84:	0a          	.byte	0x0a
 8008f85:	00          	.byte	0x00
 8008f86:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008f8a:	0728      	lsls	r0, r5, #28
 8008f8c:	d5c0      	bpl.n	8008f10 <_strtod_l+0x88>
 8008f8e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008f92:	e7bd      	b.n	8008f10 <_strtod_l+0x88>
 8008f94:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008f98:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008f9e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008fa2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008fa6:	e7f0      	b.n	8008f8a <_strtod_l+0x102>
 8008fa8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800912c <_strtod_l+0x2a4>
 8008fac:	e7ed      	b.n	8008f8a <_strtod_l+0x102>
 8008fae:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008fb2:	f04f 3aff 	mov.w	sl, #4294967295
 8008fb6:	e7e8      	b.n	8008f8a <_strtod_l+0x102>
 8008fb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008fba:	1c5a      	adds	r2, r3, #1
 8008fbc:	9217      	str	r2, [sp, #92]	; 0x5c
 8008fbe:	785b      	ldrb	r3, [r3, #1]
 8008fc0:	2b30      	cmp	r3, #48	; 0x30
 8008fc2:	d0f9      	beq.n	8008fb8 <_strtod_l+0x130>
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d0a3      	beq.n	8008f10 <_strtod_l+0x88>
 8008fc8:	2301      	movs	r3, #1
 8008fca:	f04f 0900 	mov.w	r9, #0
 8008fce:	9304      	str	r3, [sp, #16]
 8008fd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008fd2:	9308      	str	r3, [sp, #32]
 8008fd4:	f8cd 901c 	str.w	r9, [sp, #28]
 8008fd8:	464f      	mov	r7, r9
 8008fda:	220a      	movs	r2, #10
 8008fdc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008fde:	7806      	ldrb	r6, [r0, #0]
 8008fe0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008fe4:	b2d9      	uxtb	r1, r3
 8008fe6:	2909      	cmp	r1, #9
 8008fe8:	d92a      	bls.n	8009040 <_strtod_l+0x1b8>
 8008fea:	9905      	ldr	r1, [sp, #20]
 8008fec:	462a      	mov	r2, r5
 8008fee:	f7ff ff18 	bl	8008e22 <strncmp>
 8008ff2:	b398      	cbz	r0, 800905c <_strtod_l+0x1d4>
 8008ff4:	2000      	movs	r0, #0
 8008ff6:	4632      	mov	r2, r6
 8008ff8:	463d      	mov	r5, r7
 8008ffa:	9005      	str	r0, [sp, #20]
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	2a65      	cmp	r2, #101	; 0x65
 8009000:	d001      	beq.n	8009006 <_strtod_l+0x17e>
 8009002:	2a45      	cmp	r2, #69	; 0x45
 8009004:	d118      	bne.n	8009038 <_strtod_l+0x1b0>
 8009006:	b91d      	cbnz	r5, 8009010 <_strtod_l+0x188>
 8009008:	9a04      	ldr	r2, [sp, #16]
 800900a:	4302      	orrs	r2, r0
 800900c:	d09e      	beq.n	8008f4c <_strtod_l+0xc4>
 800900e:	2500      	movs	r5, #0
 8009010:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009014:	f108 0201 	add.w	r2, r8, #1
 8009018:	9217      	str	r2, [sp, #92]	; 0x5c
 800901a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800901e:	2a2b      	cmp	r2, #43	; 0x2b
 8009020:	d075      	beq.n	800910e <_strtod_l+0x286>
 8009022:	2a2d      	cmp	r2, #45	; 0x2d
 8009024:	d07b      	beq.n	800911e <_strtod_l+0x296>
 8009026:	f04f 0c00 	mov.w	ip, #0
 800902a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800902e:	2909      	cmp	r1, #9
 8009030:	f240 8082 	bls.w	8009138 <_strtod_l+0x2b0>
 8009034:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009038:	2600      	movs	r6, #0
 800903a:	e09d      	b.n	8009178 <_strtod_l+0x2f0>
 800903c:	2300      	movs	r3, #0
 800903e:	e7c4      	b.n	8008fca <_strtod_l+0x142>
 8009040:	2f08      	cmp	r7, #8
 8009042:	bfd8      	it	le
 8009044:	9907      	ldrle	r1, [sp, #28]
 8009046:	f100 0001 	add.w	r0, r0, #1
 800904a:	bfda      	itte	le
 800904c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009050:	9307      	strle	r3, [sp, #28]
 8009052:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009056:	3701      	adds	r7, #1
 8009058:	9017      	str	r0, [sp, #92]	; 0x5c
 800905a:	e7bf      	b.n	8008fdc <_strtod_l+0x154>
 800905c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800905e:	195a      	adds	r2, r3, r5
 8009060:	9217      	str	r2, [sp, #92]	; 0x5c
 8009062:	5d5a      	ldrb	r2, [r3, r5]
 8009064:	2f00      	cmp	r7, #0
 8009066:	d037      	beq.n	80090d8 <_strtod_l+0x250>
 8009068:	9005      	str	r0, [sp, #20]
 800906a:	463d      	mov	r5, r7
 800906c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009070:	2b09      	cmp	r3, #9
 8009072:	d912      	bls.n	800909a <_strtod_l+0x212>
 8009074:	2301      	movs	r3, #1
 8009076:	e7c2      	b.n	8008ffe <_strtod_l+0x176>
 8009078:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800907a:	1c5a      	adds	r2, r3, #1
 800907c:	9217      	str	r2, [sp, #92]	; 0x5c
 800907e:	785a      	ldrb	r2, [r3, #1]
 8009080:	3001      	adds	r0, #1
 8009082:	2a30      	cmp	r2, #48	; 0x30
 8009084:	d0f8      	beq.n	8009078 <_strtod_l+0x1f0>
 8009086:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800908a:	2b08      	cmp	r3, #8
 800908c:	f200 84d9 	bhi.w	8009a42 <_strtod_l+0xbba>
 8009090:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009092:	9005      	str	r0, [sp, #20]
 8009094:	2000      	movs	r0, #0
 8009096:	9308      	str	r3, [sp, #32]
 8009098:	4605      	mov	r5, r0
 800909a:	3a30      	subs	r2, #48	; 0x30
 800909c:	f100 0301 	add.w	r3, r0, #1
 80090a0:	d014      	beq.n	80090cc <_strtod_l+0x244>
 80090a2:	9905      	ldr	r1, [sp, #20]
 80090a4:	4419      	add	r1, r3
 80090a6:	9105      	str	r1, [sp, #20]
 80090a8:	462b      	mov	r3, r5
 80090aa:	eb00 0e05 	add.w	lr, r0, r5
 80090ae:	210a      	movs	r1, #10
 80090b0:	4573      	cmp	r3, lr
 80090b2:	d113      	bne.n	80090dc <_strtod_l+0x254>
 80090b4:	182b      	adds	r3, r5, r0
 80090b6:	2b08      	cmp	r3, #8
 80090b8:	f105 0501 	add.w	r5, r5, #1
 80090bc:	4405      	add	r5, r0
 80090be:	dc1c      	bgt.n	80090fa <_strtod_l+0x272>
 80090c0:	9907      	ldr	r1, [sp, #28]
 80090c2:	230a      	movs	r3, #10
 80090c4:	fb03 2301 	mla	r3, r3, r1, r2
 80090c8:	9307      	str	r3, [sp, #28]
 80090ca:	2300      	movs	r3, #0
 80090cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80090ce:	1c51      	adds	r1, r2, #1
 80090d0:	9117      	str	r1, [sp, #92]	; 0x5c
 80090d2:	7852      	ldrb	r2, [r2, #1]
 80090d4:	4618      	mov	r0, r3
 80090d6:	e7c9      	b.n	800906c <_strtod_l+0x1e4>
 80090d8:	4638      	mov	r0, r7
 80090da:	e7d2      	b.n	8009082 <_strtod_l+0x1fa>
 80090dc:	2b08      	cmp	r3, #8
 80090de:	dc04      	bgt.n	80090ea <_strtod_l+0x262>
 80090e0:	9e07      	ldr	r6, [sp, #28]
 80090e2:	434e      	muls	r6, r1
 80090e4:	9607      	str	r6, [sp, #28]
 80090e6:	3301      	adds	r3, #1
 80090e8:	e7e2      	b.n	80090b0 <_strtod_l+0x228>
 80090ea:	f103 0c01 	add.w	ip, r3, #1
 80090ee:	f1bc 0f10 	cmp.w	ip, #16
 80090f2:	bfd8      	it	le
 80090f4:	fb01 f909 	mulle.w	r9, r1, r9
 80090f8:	e7f5      	b.n	80090e6 <_strtod_l+0x25e>
 80090fa:	2d10      	cmp	r5, #16
 80090fc:	bfdc      	itt	le
 80090fe:	230a      	movle	r3, #10
 8009100:	fb03 2909 	mlale	r9, r3, r9, r2
 8009104:	e7e1      	b.n	80090ca <_strtod_l+0x242>
 8009106:	2300      	movs	r3, #0
 8009108:	9305      	str	r3, [sp, #20]
 800910a:	2301      	movs	r3, #1
 800910c:	e77c      	b.n	8009008 <_strtod_l+0x180>
 800910e:	f04f 0c00 	mov.w	ip, #0
 8009112:	f108 0202 	add.w	r2, r8, #2
 8009116:	9217      	str	r2, [sp, #92]	; 0x5c
 8009118:	f898 2002 	ldrb.w	r2, [r8, #2]
 800911c:	e785      	b.n	800902a <_strtod_l+0x1a2>
 800911e:	f04f 0c01 	mov.w	ip, #1
 8009122:	e7f6      	b.n	8009112 <_strtod_l+0x28a>
 8009124:	0800c978 	.word	0x0800c978
 8009128:	0800c8b0 	.word	0x0800c8b0
 800912c:	7ff00000 	.word	0x7ff00000
 8009130:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009132:	1c51      	adds	r1, r2, #1
 8009134:	9117      	str	r1, [sp, #92]	; 0x5c
 8009136:	7852      	ldrb	r2, [r2, #1]
 8009138:	2a30      	cmp	r2, #48	; 0x30
 800913a:	d0f9      	beq.n	8009130 <_strtod_l+0x2a8>
 800913c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009140:	2908      	cmp	r1, #8
 8009142:	f63f af79 	bhi.w	8009038 <_strtod_l+0x1b0>
 8009146:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800914a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800914c:	9206      	str	r2, [sp, #24]
 800914e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009150:	1c51      	adds	r1, r2, #1
 8009152:	9117      	str	r1, [sp, #92]	; 0x5c
 8009154:	7852      	ldrb	r2, [r2, #1]
 8009156:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800915a:	2e09      	cmp	r6, #9
 800915c:	d937      	bls.n	80091ce <_strtod_l+0x346>
 800915e:	9e06      	ldr	r6, [sp, #24]
 8009160:	1b89      	subs	r1, r1, r6
 8009162:	2908      	cmp	r1, #8
 8009164:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009168:	dc02      	bgt.n	8009170 <_strtod_l+0x2e8>
 800916a:	4576      	cmp	r6, lr
 800916c:	bfa8      	it	ge
 800916e:	4676      	movge	r6, lr
 8009170:	f1bc 0f00 	cmp.w	ip, #0
 8009174:	d000      	beq.n	8009178 <_strtod_l+0x2f0>
 8009176:	4276      	negs	r6, r6
 8009178:	2d00      	cmp	r5, #0
 800917a:	d14d      	bne.n	8009218 <_strtod_l+0x390>
 800917c:	9904      	ldr	r1, [sp, #16]
 800917e:	4301      	orrs	r1, r0
 8009180:	f47f aec6 	bne.w	8008f10 <_strtod_l+0x88>
 8009184:	2b00      	cmp	r3, #0
 8009186:	f47f aee1 	bne.w	8008f4c <_strtod_l+0xc4>
 800918a:	2a69      	cmp	r2, #105	; 0x69
 800918c:	d027      	beq.n	80091de <_strtod_l+0x356>
 800918e:	dc24      	bgt.n	80091da <_strtod_l+0x352>
 8009190:	2a49      	cmp	r2, #73	; 0x49
 8009192:	d024      	beq.n	80091de <_strtod_l+0x356>
 8009194:	2a4e      	cmp	r2, #78	; 0x4e
 8009196:	f47f aed9 	bne.w	8008f4c <_strtod_l+0xc4>
 800919a:	499f      	ldr	r1, [pc, #636]	; (8009418 <_strtod_l+0x590>)
 800919c:	a817      	add	r0, sp, #92	; 0x5c
 800919e:	f000 ff67 	bl	800a070 <__match>
 80091a2:	2800      	cmp	r0, #0
 80091a4:	f43f aed2 	beq.w	8008f4c <_strtod_l+0xc4>
 80091a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	2b28      	cmp	r3, #40	; 0x28
 80091ae:	d12d      	bne.n	800920c <_strtod_l+0x384>
 80091b0:	499a      	ldr	r1, [pc, #616]	; (800941c <_strtod_l+0x594>)
 80091b2:	aa1a      	add	r2, sp, #104	; 0x68
 80091b4:	a817      	add	r0, sp, #92	; 0x5c
 80091b6:	f000 ff6f 	bl	800a098 <__hexnan>
 80091ba:	2805      	cmp	r0, #5
 80091bc:	d126      	bne.n	800920c <_strtod_l+0x384>
 80091be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80091c0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80091c4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80091c8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80091cc:	e6a0      	b.n	8008f10 <_strtod_l+0x88>
 80091ce:	210a      	movs	r1, #10
 80091d0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80091d4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80091d8:	e7b9      	b.n	800914e <_strtod_l+0x2c6>
 80091da:	2a6e      	cmp	r2, #110	; 0x6e
 80091dc:	e7db      	b.n	8009196 <_strtod_l+0x30e>
 80091de:	4990      	ldr	r1, [pc, #576]	; (8009420 <_strtod_l+0x598>)
 80091e0:	a817      	add	r0, sp, #92	; 0x5c
 80091e2:	f000 ff45 	bl	800a070 <__match>
 80091e6:	2800      	cmp	r0, #0
 80091e8:	f43f aeb0 	beq.w	8008f4c <_strtod_l+0xc4>
 80091ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091ee:	498d      	ldr	r1, [pc, #564]	; (8009424 <_strtod_l+0x59c>)
 80091f0:	3b01      	subs	r3, #1
 80091f2:	a817      	add	r0, sp, #92	; 0x5c
 80091f4:	9317      	str	r3, [sp, #92]	; 0x5c
 80091f6:	f000 ff3b 	bl	800a070 <__match>
 80091fa:	b910      	cbnz	r0, 8009202 <_strtod_l+0x37a>
 80091fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091fe:	3301      	adds	r3, #1
 8009200:	9317      	str	r3, [sp, #92]	; 0x5c
 8009202:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009434 <_strtod_l+0x5ac>
 8009206:	f04f 0a00 	mov.w	sl, #0
 800920a:	e681      	b.n	8008f10 <_strtod_l+0x88>
 800920c:	4886      	ldr	r0, [pc, #536]	; (8009428 <_strtod_l+0x5a0>)
 800920e:	f002 fb3b 	bl	800b888 <nan>
 8009212:	ec5b ab10 	vmov	sl, fp, d0
 8009216:	e67b      	b.n	8008f10 <_strtod_l+0x88>
 8009218:	9b05      	ldr	r3, [sp, #20]
 800921a:	9807      	ldr	r0, [sp, #28]
 800921c:	1af3      	subs	r3, r6, r3
 800921e:	2f00      	cmp	r7, #0
 8009220:	bf08      	it	eq
 8009222:	462f      	moveq	r7, r5
 8009224:	2d10      	cmp	r5, #16
 8009226:	9306      	str	r3, [sp, #24]
 8009228:	46a8      	mov	r8, r5
 800922a:	bfa8      	it	ge
 800922c:	f04f 0810 	movge.w	r8, #16
 8009230:	f7f7 f978 	bl	8000524 <__aeabi_ui2d>
 8009234:	2d09      	cmp	r5, #9
 8009236:	4682      	mov	sl, r0
 8009238:	468b      	mov	fp, r1
 800923a:	dd13      	ble.n	8009264 <_strtod_l+0x3dc>
 800923c:	4b7b      	ldr	r3, [pc, #492]	; (800942c <_strtod_l+0x5a4>)
 800923e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009242:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009246:	f7f7 f9e7 	bl	8000618 <__aeabi_dmul>
 800924a:	4682      	mov	sl, r0
 800924c:	4648      	mov	r0, r9
 800924e:	468b      	mov	fp, r1
 8009250:	f7f7 f968 	bl	8000524 <__aeabi_ui2d>
 8009254:	4602      	mov	r2, r0
 8009256:	460b      	mov	r3, r1
 8009258:	4650      	mov	r0, sl
 800925a:	4659      	mov	r1, fp
 800925c:	f7f7 f826 	bl	80002ac <__adddf3>
 8009260:	4682      	mov	sl, r0
 8009262:	468b      	mov	fp, r1
 8009264:	2d0f      	cmp	r5, #15
 8009266:	dc38      	bgt.n	80092da <_strtod_l+0x452>
 8009268:	9b06      	ldr	r3, [sp, #24]
 800926a:	2b00      	cmp	r3, #0
 800926c:	f43f ae50 	beq.w	8008f10 <_strtod_l+0x88>
 8009270:	dd24      	ble.n	80092bc <_strtod_l+0x434>
 8009272:	2b16      	cmp	r3, #22
 8009274:	dc0b      	bgt.n	800928e <_strtod_l+0x406>
 8009276:	496d      	ldr	r1, [pc, #436]	; (800942c <_strtod_l+0x5a4>)
 8009278:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800927c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009280:	4652      	mov	r2, sl
 8009282:	465b      	mov	r3, fp
 8009284:	f7f7 f9c8 	bl	8000618 <__aeabi_dmul>
 8009288:	4682      	mov	sl, r0
 800928a:	468b      	mov	fp, r1
 800928c:	e640      	b.n	8008f10 <_strtod_l+0x88>
 800928e:	9a06      	ldr	r2, [sp, #24]
 8009290:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009294:	4293      	cmp	r3, r2
 8009296:	db20      	blt.n	80092da <_strtod_l+0x452>
 8009298:	4c64      	ldr	r4, [pc, #400]	; (800942c <_strtod_l+0x5a4>)
 800929a:	f1c5 050f 	rsb	r5, r5, #15
 800929e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80092a2:	4652      	mov	r2, sl
 80092a4:	465b      	mov	r3, fp
 80092a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092aa:	f7f7 f9b5 	bl	8000618 <__aeabi_dmul>
 80092ae:	9b06      	ldr	r3, [sp, #24]
 80092b0:	1b5d      	subs	r5, r3, r5
 80092b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80092b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80092ba:	e7e3      	b.n	8009284 <_strtod_l+0x3fc>
 80092bc:	9b06      	ldr	r3, [sp, #24]
 80092be:	3316      	adds	r3, #22
 80092c0:	db0b      	blt.n	80092da <_strtod_l+0x452>
 80092c2:	9b05      	ldr	r3, [sp, #20]
 80092c4:	1b9e      	subs	r6, r3, r6
 80092c6:	4b59      	ldr	r3, [pc, #356]	; (800942c <_strtod_l+0x5a4>)
 80092c8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80092cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80092d0:	4650      	mov	r0, sl
 80092d2:	4659      	mov	r1, fp
 80092d4:	f7f7 faca 	bl	800086c <__aeabi_ddiv>
 80092d8:	e7d6      	b.n	8009288 <_strtod_l+0x400>
 80092da:	9b06      	ldr	r3, [sp, #24]
 80092dc:	eba5 0808 	sub.w	r8, r5, r8
 80092e0:	4498      	add	r8, r3
 80092e2:	f1b8 0f00 	cmp.w	r8, #0
 80092e6:	dd74      	ble.n	80093d2 <_strtod_l+0x54a>
 80092e8:	f018 030f 	ands.w	r3, r8, #15
 80092ec:	d00a      	beq.n	8009304 <_strtod_l+0x47c>
 80092ee:	494f      	ldr	r1, [pc, #316]	; (800942c <_strtod_l+0x5a4>)
 80092f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80092f4:	4652      	mov	r2, sl
 80092f6:	465b      	mov	r3, fp
 80092f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092fc:	f7f7 f98c 	bl	8000618 <__aeabi_dmul>
 8009300:	4682      	mov	sl, r0
 8009302:	468b      	mov	fp, r1
 8009304:	f038 080f 	bics.w	r8, r8, #15
 8009308:	d04f      	beq.n	80093aa <_strtod_l+0x522>
 800930a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800930e:	dd22      	ble.n	8009356 <_strtod_l+0x4ce>
 8009310:	2500      	movs	r5, #0
 8009312:	462e      	mov	r6, r5
 8009314:	9507      	str	r5, [sp, #28]
 8009316:	9505      	str	r5, [sp, #20]
 8009318:	2322      	movs	r3, #34	; 0x22
 800931a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009434 <_strtod_l+0x5ac>
 800931e:	6023      	str	r3, [r4, #0]
 8009320:	f04f 0a00 	mov.w	sl, #0
 8009324:	9b07      	ldr	r3, [sp, #28]
 8009326:	2b00      	cmp	r3, #0
 8009328:	f43f adf2 	beq.w	8008f10 <_strtod_l+0x88>
 800932c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800932e:	4620      	mov	r0, r4
 8009330:	f000 ffbe 	bl	800a2b0 <_Bfree>
 8009334:	9905      	ldr	r1, [sp, #20]
 8009336:	4620      	mov	r0, r4
 8009338:	f000 ffba 	bl	800a2b0 <_Bfree>
 800933c:	4631      	mov	r1, r6
 800933e:	4620      	mov	r0, r4
 8009340:	f000 ffb6 	bl	800a2b0 <_Bfree>
 8009344:	9907      	ldr	r1, [sp, #28]
 8009346:	4620      	mov	r0, r4
 8009348:	f000 ffb2 	bl	800a2b0 <_Bfree>
 800934c:	4629      	mov	r1, r5
 800934e:	4620      	mov	r0, r4
 8009350:	f000 ffae 	bl	800a2b0 <_Bfree>
 8009354:	e5dc      	b.n	8008f10 <_strtod_l+0x88>
 8009356:	4b36      	ldr	r3, [pc, #216]	; (8009430 <_strtod_l+0x5a8>)
 8009358:	9304      	str	r3, [sp, #16]
 800935a:	2300      	movs	r3, #0
 800935c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009360:	4650      	mov	r0, sl
 8009362:	4659      	mov	r1, fp
 8009364:	4699      	mov	r9, r3
 8009366:	f1b8 0f01 	cmp.w	r8, #1
 800936a:	dc21      	bgt.n	80093b0 <_strtod_l+0x528>
 800936c:	b10b      	cbz	r3, 8009372 <_strtod_l+0x4ea>
 800936e:	4682      	mov	sl, r0
 8009370:	468b      	mov	fp, r1
 8009372:	4b2f      	ldr	r3, [pc, #188]	; (8009430 <_strtod_l+0x5a8>)
 8009374:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009378:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800937c:	4652      	mov	r2, sl
 800937e:	465b      	mov	r3, fp
 8009380:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009384:	f7f7 f948 	bl	8000618 <__aeabi_dmul>
 8009388:	4b2a      	ldr	r3, [pc, #168]	; (8009434 <_strtod_l+0x5ac>)
 800938a:	460a      	mov	r2, r1
 800938c:	400b      	ands	r3, r1
 800938e:	492a      	ldr	r1, [pc, #168]	; (8009438 <_strtod_l+0x5b0>)
 8009390:	428b      	cmp	r3, r1
 8009392:	4682      	mov	sl, r0
 8009394:	d8bc      	bhi.n	8009310 <_strtod_l+0x488>
 8009396:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800939a:	428b      	cmp	r3, r1
 800939c:	bf86      	itte	hi
 800939e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800943c <_strtod_l+0x5b4>
 80093a2:	f04f 3aff 	movhi.w	sl, #4294967295
 80093a6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80093aa:	2300      	movs	r3, #0
 80093ac:	9304      	str	r3, [sp, #16]
 80093ae:	e084      	b.n	80094ba <_strtod_l+0x632>
 80093b0:	f018 0f01 	tst.w	r8, #1
 80093b4:	d005      	beq.n	80093c2 <_strtod_l+0x53a>
 80093b6:	9b04      	ldr	r3, [sp, #16]
 80093b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093bc:	f7f7 f92c 	bl	8000618 <__aeabi_dmul>
 80093c0:	2301      	movs	r3, #1
 80093c2:	9a04      	ldr	r2, [sp, #16]
 80093c4:	3208      	adds	r2, #8
 80093c6:	f109 0901 	add.w	r9, r9, #1
 80093ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 80093ce:	9204      	str	r2, [sp, #16]
 80093d0:	e7c9      	b.n	8009366 <_strtod_l+0x4de>
 80093d2:	d0ea      	beq.n	80093aa <_strtod_l+0x522>
 80093d4:	f1c8 0800 	rsb	r8, r8, #0
 80093d8:	f018 020f 	ands.w	r2, r8, #15
 80093dc:	d00a      	beq.n	80093f4 <_strtod_l+0x56c>
 80093de:	4b13      	ldr	r3, [pc, #76]	; (800942c <_strtod_l+0x5a4>)
 80093e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093e4:	4650      	mov	r0, sl
 80093e6:	4659      	mov	r1, fp
 80093e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ec:	f7f7 fa3e 	bl	800086c <__aeabi_ddiv>
 80093f0:	4682      	mov	sl, r0
 80093f2:	468b      	mov	fp, r1
 80093f4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80093f8:	d0d7      	beq.n	80093aa <_strtod_l+0x522>
 80093fa:	f1b8 0f1f 	cmp.w	r8, #31
 80093fe:	dd1f      	ble.n	8009440 <_strtod_l+0x5b8>
 8009400:	2500      	movs	r5, #0
 8009402:	462e      	mov	r6, r5
 8009404:	9507      	str	r5, [sp, #28]
 8009406:	9505      	str	r5, [sp, #20]
 8009408:	2322      	movs	r3, #34	; 0x22
 800940a:	f04f 0a00 	mov.w	sl, #0
 800940e:	f04f 0b00 	mov.w	fp, #0
 8009412:	6023      	str	r3, [r4, #0]
 8009414:	e786      	b.n	8009324 <_strtod_l+0x49c>
 8009416:	bf00      	nop
 8009418:	0800c8ad 	.word	0x0800c8ad
 800941c:	0800c8c4 	.word	0x0800c8c4
 8009420:	0800c8a4 	.word	0x0800c8a4
 8009424:	0800c8a7 	.word	0x0800c8a7
 8009428:	0800cb85 	.word	0x0800cb85
 800942c:	0800ca28 	.word	0x0800ca28
 8009430:	0800ca00 	.word	0x0800ca00
 8009434:	7ff00000 	.word	0x7ff00000
 8009438:	7ca00000 	.word	0x7ca00000
 800943c:	7fefffff 	.word	0x7fefffff
 8009440:	f018 0310 	ands.w	r3, r8, #16
 8009444:	bf18      	it	ne
 8009446:	236a      	movne	r3, #106	; 0x6a
 8009448:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80097f8 <_strtod_l+0x970>
 800944c:	9304      	str	r3, [sp, #16]
 800944e:	4650      	mov	r0, sl
 8009450:	4659      	mov	r1, fp
 8009452:	2300      	movs	r3, #0
 8009454:	f018 0f01 	tst.w	r8, #1
 8009458:	d004      	beq.n	8009464 <_strtod_l+0x5dc>
 800945a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800945e:	f7f7 f8db 	bl	8000618 <__aeabi_dmul>
 8009462:	2301      	movs	r3, #1
 8009464:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009468:	f109 0908 	add.w	r9, r9, #8
 800946c:	d1f2      	bne.n	8009454 <_strtod_l+0x5cc>
 800946e:	b10b      	cbz	r3, 8009474 <_strtod_l+0x5ec>
 8009470:	4682      	mov	sl, r0
 8009472:	468b      	mov	fp, r1
 8009474:	9b04      	ldr	r3, [sp, #16]
 8009476:	b1c3      	cbz	r3, 80094aa <_strtod_l+0x622>
 8009478:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800947c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009480:	2b00      	cmp	r3, #0
 8009482:	4659      	mov	r1, fp
 8009484:	dd11      	ble.n	80094aa <_strtod_l+0x622>
 8009486:	2b1f      	cmp	r3, #31
 8009488:	f340 8124 	ble.w	80096d4 <_strtod_l+0x84c>
 800948c:	2b34      	cmp	r3, #52	; 0x34
 800948e:	bfde      	ittt	le
 8009490:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009494:	f04f 33ff 	movle.w	r3, #4294967295
 8009498:	fa03 f202 	lslle.w	r2, r3, r2
 800949c:	f04f 0a00 	mov.w	sl, #0
 80094a0:	bfcc      	ite	gt
 80094a2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80094a6:	ea02 0b01 	andle.w	fp, r2, r1
 80094aa:	2200      	movs	r2, #0
 80094ac:	2300      	movs	r3, #0
 80094ae:	4650      	mov	r0, sl
 80094b0:	4659      	mov	r1, fp
 80094b2:	f7f7 fb19 	bl	8000ae8 <__aeabi_dcmpeq>
 80094b6:	2800      	cmp	r0, #0
 80094b8:	d1a2      	bne.n	8009400 <_strtod_l+0x578>
 80094ba:	9b07      	ldr	r3, [sp, #28]
 80094bc:	9300      	str	r3, [sp, #0]
 80094be:	9908      	ldr	r1, [sp, #32]
 80094c0:	462b      	mov	r3, r5
 80094c2:	463a      	mov	r2, r7
 80094c4:	4620      	mov	r0, r4
 80094c6:	f000 ff5b 	bl	800a380 <__s2b>
 80094ca:	9007      	str	r0, [sp, #28]
 80094cc:	2800      	cmp	r0, #0
 80094ce:	f43f af1f 	beq.w	8009310 <_strtod_l+0x488>
 80094d2:	9b05      	ldr	r3, [sp, #20]
 80094d4:	1b9e      	subs	r6, r3, r6
 80094d6:	9b06      	ldr	r3, [sp, #24]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	bfb4      	ite	lt
 80094dc:	4633      	movlt	r3, r6
 80094de:	2300      	movge	r3, #0
 80094e0:	930c      	str	r3, [sp, #48]	; 0x30
 80094e2:	9b06      	ldr	r3, [sp, #24]
 80094e4:	2500      	movs	r5, #0
 80094e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80094ea:	9312      	str	r3, [sp, #72]	; 0x48
 80094ec:	462e      	mov	r6, r5
 80094ee:	9b07      	ldr	r3, [sp, #28]
 80094f0:	4620      	mov	r0, r4
 80094f2:	6859      	ldr	r1, [r3, #4]
 80094f4:	f000 fe9c 	bl	800a230 <_Balloc>
 80094f8:	9005      	str	r0, [sp, #20]
 80094fa:	2800      	cmp	r0, #0
 80094fc:	f43f af0c 	beq.w	8009318 <_strtod_l+0x490>
 8009500:	9b07      	ldr	r3, [sp, #28]
 8009502:	691a      	ldr	r2, [r3, #16]
 8009504:	3202      	adds	r2, #2
 8009506:	f103 010c 	add.w	r1, r3, #12
 800950a:	0092      	lsls	r2, r2, #2
 800950c:	300c      	adds	r0, #12
 800950e:	f7ff fae9 	bl	8008ae4 <memcpy>
 8009512:	ec4b ab10 	vmov	d0, sl, fp
 8009516:	aa1a      	add	r2, sp, #104	; 0x68
 8009518:	a919      	add	r1, sp, #100	; 0x64
 800951a:	4620      	mov	r0, r4
 800951c:	f001 fa76 	bl	800aa0c <__d2b>
 8009520:	ec4b ab18 	vmov	d8, sl, fp
 8009524:	9018      	str	r0, [sp, #96]	; 0x60
 8009526:	2800      	cmp	r0, #0
 8009528:	f43f aef6 	beq.w	8009318 <_strtod_l+0x490>
 800952c:	2101      	movs	r1, #1
 800952e:	4620      	mov	r0, r4
 8009530:	f000 ffc0 	bl	800a4b4 <__i2b>
 8009534:	4606      	mov	r6, r0
 8009536:	2800      	cmp	r0, #0
 8009538:	f43f aeee 	beq.w	8009318 <_strtod_l+0x490>
 800953c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800953e:	9904      	ldr	r1, [sp, #16]
 8009540:	2b00      	cmp	r3, #0
 8009542:	bfab      	itete	ge
 8009544:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009546:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009548:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800954a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800954e:	bfac      	ite	ge
 8009550:	eb03 0902 	addge.w	r9, r3, r2
 8009554:	1ad7      	sublt	r7, r2, r3
 8009556:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009558:	eba3 0801 	sub.w	r8, r3, r1
 800955c:	4490      	add	r8, r2
 800955e:	4ba1      	ldr	r3, [pc, #644]	; (80097e4 <_strtod_l+0x95c>)
 8009560:	f108 38ff 	add.w	r8, r8, #4294967295
 8009564:	4598      	cmp	r8, r3
 8009566:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800956a:	f280 80c7 	bge.w	80096fc <_strtod_l+0x874>
 800956e:	eba3 0308 	sub.w	r3, r3, r8
 8009572:	2b1f      	cmp	r3, #31
 8009574:	eba2 0203 	sub.w	r2, r2, r3
 8009578:	f04f 0101 	mov.w	r1, #1
 800957c:	f300 80b1 	bgt.w	80096e2 <_strtod_l+0x85a>
 8009580:	fa01 f303 	lsl.w	r3, r1, r3
 8009584:	930d      	str	r3, [sp, #52]	; 0x34
 8009586:	2300      	movs	r3, #0
 8009588:	9308      	str	r3, [sp, #32]
 800958a:	eb09 0802 	add.w	r8, r9, r2
 800958e:	9b04      	ldr	r3, [sp, #16]
 8009590:	45c1      	cmp	r9, r8
 8009592:	4417      	add	r7, r2
 8009594:	441f      	add	r7, r3
 8009596:	464b      	mov	r3, r9
 8009598:	bfa8      	it	ge
 800959a:	4643      	movge	r3, r8
 800959c:	42bb      	cmp	r3, r7
 800959e:	bfa8      	it	ge
 80095a0:	463b      	movge	r3, r7
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	bfc2      	ittt	gt
 80095a6:	eba8 0803 	subgt.w	r8, r8, r3
 80095aa:	1aff      	subgt	r7, r7, r3
 80095ac:	eba9 0903 	subgt.w	r9, r9, r3
 80095b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	dd17      	ble.n	80095e6 <_strtod_l+0x75e>
 80095b6:	4631      	mov	r1, r6
 80095b8:	461a      	mov	r2, r3
 80095ba:	4620      	mov	r0, r4
 80095bc:	f001 f83a 	bl	800a634 <__pow5mult>
 80095c0:	4606      	mov	r6, r0
 80095c2:	2800      	cmp	r0, #0
 80095c4:	f43f aea8 	beq.w	8009318 <_strtod_l+0x490>
 80095c8:	4601      	mov	r1, r0
 80095ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80095cc:	4620      	mov	r0, r4
 80095ce:	f000 ff87 	bl	800a4e0 <__multiply>
 80095d2:	900b      	str	r0, [sp, #44]	; 0x2c
 80095d4:	2800      	cmp	r0, #0
 80095d6:	f43f ae9f 	beq.w	8009318 <_strtod_l+0x490>
 80095da:	9918      	ldr	r1, [sp, #96]	; 0x60
 80095dc:	4620      	mov	r0, r4
 80095de:	f000 fe67 	bl	800a2b0 <_Bfree>
 80095e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095e4:	9318      	str	r3, [sp, #96]	; 0x60
 80095e6:	f1b8 0f00 	cmp.w	r8, #0
 80095ea:	f300 808c 	bgt.w	8009706 <_strtod_l+0x87e>
 80095ee:	9b06      	ldr	r3, [sp, #24]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	dd08      	ble.n	8009606 <_strtod_l+0x77e>
 80095f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80095f6:	9905      	ldr	r1, [sp, #20]
 80095f8:	4620      	mov	r0, r4
 80095fa:	f001 f81b 	bl	800a634 <__pow5mult>
 80095fe:	9005      	str	r0, [sp, #20]
 8009600:	2800      	cmp	r0, #0
 8009602:	f43f ae89 	beq.w	8009318 <_strtod_l+0x490>
 8009606:	2f00      	cmp	r7, #0
 8009608:	dd08      	ble.n	800961c <_strtod_l+0x794>
 800960a:	9905      	ldr	r1, [sp, #20]
 800960c:	463a      	mov	r2, r7
 800960e:	4620      	mov	r0, r4
 8009610:	f001 f86a 	bl	800a6e8 <__lshift>
 8009614:	9005      	str	r0, [sp, #20]
 8009616:	2800      	cmp	r0, #0
 8009618:	f43f ae7e 	beq.w	8009318 <_strtod_l+0x490>
 800961c:	f1b9 0f00 	cmp.w	r9, #0
 8009620:	dd08      	ble.n	8009634 <_strtod_l+0x7ac>
 8009622:	4631      	mov	r1, r6
 8009624:	464a      	mov	r2, r9
 8009626:	4620      	mov	r0, r4
 8009628:	f001 f85e 	bl	800a6e8 <__lshift>
 800962c:	4606      	mov	r6, r0
 800962e:	2800      	cmp	r0, #0
 8009630:	f43f ae72 	beq.w	8009318 <_strtod_l+0x490>
 8009634:	9a05      	ldr	r2, [sp, #20]
 8009636:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009638:	4620      	mov	r0, r4
 800963a:	f001 f8e1 	bl	800a800 <__mdiff>
 800963e:	4605      	mov	r5, r0
 8009640:	2800      	cmp	r0, #0
 8009642:	f43f ae69 	beq.w	8009318 <_strtod_l+0x490>
 8009646:	68c3      	ldr	r3, [r0, #12]
 8009648:	930b      	str	r3, [sp, #44]	; 0x2c
 800964a:	2300      	movs	r3, #0
 800964c:	60c3      	str	r3, [r0, #12]
 800964e:	4631      	mov	r1, r6
 8009650:	f001 f8ba 	bl	800a7c8 <__mcmp>
 8009654:	2800      	cmp	r0, #0
 8009656:	da60      	bge.n	800971a <_strtod_l+0x892>
 8009658:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800965a:	ea53 030a 	orrs.w	r3, r3, sl
 800965e:	f040 8082 	bne.w	8009766 <_strtod_l+0x8de>
 8009662:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009666:	2b00      	cmp	r3, #0
 8009668:	d17d      	bne.n	8009766 <_strtod_l+0x8de>
 800966a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800966e:	0d1b      	lsrs	r3, r3, #20
 8009670:	051b      	lsls	r3, r3, #20
 8009672:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009676:	d976      	bls.n	8009766 <_strtod_l+0x8de>
 8009678:	696b      	ldr	r3, [r5, #20]
 800967a:	b913      	cbnz	r3, 8009682 <_strtod_l+0x7fa>
 800967c:	692b      	ldr	r3, [r5, #16]
 800967e:	2b01      	cmp	r3, #1
 8009680:	dd71      	ble.n	8009766 <_strtod_l+0x8de>
 8009682:	4629      	mov	r1, r5
 8009684:	2201      	movs	r2, #1
 8009686:	4620      	mov	r0, r4
 8009688:	f001 f82e 	bl	800a6e8 <__lshift>
 800968c:	4631      	mov	r1, r6
 800968e:	4605      	mov	r5, r0
 8009690:	f001 f89a 	bl	800a7c8 <__mcmp>
 8009694:	2800      	cmp	r0, #0
 8009696:	dd66      	ble.n	8009766 <_strtod_l+0x8de>
 8009698:	9904      	ldr	r1, [sp, #16]
 800969a:	4a53      	ldr	r2, [pc, #332]	; (80097e8 <_strtod_l+0x960>)
 800969c:	465b      	mov	r3, fp
 800969e:	2900      	cmp	r1, #0
 80096a0:	f000 8081 	beq.w	80097a6 <_strtod_l+0x91e>
 80096a4:	ea02 010b 	and.w	r1, r2, fp
 80096a8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80096ac:	dc7b      	bgt.n	80097a6 <_strtod_l+0x91e>
 80096ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80096b2:	f77f aea9 	ble.w	8009408 <_strtod_l+0x580>
 80096b6:	4b4d      	ldr	r3, [pc, #308]	; (80097ec <_strtod_l+0x964>)
 80096b8:	4650      	mov	r0, sl
 80096ba:	4659      	mov	r1, fp
 80096bc:	2200      	movs	r2, #0
 80096be:	f7f6 ffab 	bl	8000618 <__aeabi_dmul>
 80096c2:	460b      	mov	r3, r1
 80096c4:	4303      	orrs	r3, r0
 80096c6:	bf08      	it	eq
 80096c8:	2322      	moveq	r3, #34	; 0x22
 80096ca:	4682      	mov	sl, r0
 80096cc:	468b      	mov	fp, r1
 80096ce:	bf08      	it	eq
 80096d0:	6023      	streq	r3, [r4, #0]
 80096d2:	e62b      	b.n	800932c <_strtod_l+0x4a4>
 80096d4:	f04f 32ff 	mov.w	r2, #4294967295
 80096d8:	fa02 f303 	lsl.w	r3, r2, r3
 80096dc:	ea03 0a0a 	and.w	sl, r3, sl
 80096e0:	e6e3      	b.n	80094aa <_strtod_l+0x622>
 80096e2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80096e6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80096ea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80096ee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80096f2:	fa01 f308 	lsl.w	r3, r1, r8
 80096f6:	9308      	str	r3, [sp, #32]
 80096f8:	910d      	str	r1, [sp, #52]	; 0x34
 80096fa:	e746      	b.n	800958a <_strtod_l+0x702>
 80096fc:	2300      	movs	r3, #0
 80096fe:	9308      	str	r3, [sp, #32]
 8009700:	2301      	movs	r3, #1
 8009702:	930d      	str	r3, [sp, #52]	; 0x34
 8009704:	e741      	b.n	800958a <_strtod_l+0x702>
 8009706:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009708:	4642      	mov	r2, r8
 800970a:	4620      	mov	r0, r4
 800970c:	f000 ffec 	bl	800a6e8 <__lshift>
 8009710:	9018      	str	r0, [sp, #96]	; 0x60
 8009712:	2800      	cmp	r0, #0
 8009714:	f47f af6b 	bne.w	80095ee <_strtod_l+0x766>
 8009718:	e5fe      	b.n	8009318 <_strtod_l+0x490>
 800971a:	465f      	mov	r7, fp
 800971c:	d16e      	bne.n	80097fc <_strtod_l+0x974>
 800971e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009720:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009724:	b342      	cbz	r2, 8009778 <_strtod_l+0x8f0>
 8009726:	4a32      	ldr	r2, [pc, #200]	; (80097f0 <_strtod_l+0x968>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d128      	bne.n	800977e <_strtod_l+0x8f6>
 800972c:	9b04      	ldr	r3, [sp, #16]
 800972e:	4651      	mov	r1, sl
 8009730:	b1eb      	cbz	r3, 800976e <_strtod_l+0x8e6>
 8009732:	4b2d      	ldr	r3, [pc, #180]	; (80097e8 <_strtod_l+0x960>)
 8009734:	403b      	ands	r3, r7
 8009736:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800973a:	f04f 32ff 	mov.w	r2, #4294967295
 800973e:	d819      	bhi.n	8009774 <_strtod_l+0x8ec>
 8009740:	0d1b      	lsrs	r3, r3, #20
 8009742:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009746:	fa02 f303 	lsl.w	r3, r2, r3
 800974a:	4299      	cmp	r1, r3
 800974c:	d117      	bne.n	800977e <_strtod_l+0x8f6>
 800974e:	4b29      	ldr	r3, [pc, #164]	; (80097f4 <_strtod_l+0x96c>)
 8009750:	429f      	cmp	r7, r3
 8009752:	d102      	bne.n	800975a <_strtod_l+0x8d2>
 8009754:	3101      	adds	r1, #1
 8009756:	f43f addf 	beq.w	8009318 <_strtod_l+0x490>
 800975a:	4b23      	ldr	r3, [pc, #140]	; (80097e8 <_strtod_l+0x960>)
 800975c:	403b      	ands	r3, r7
 800975e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009762:	f04f 0a00 	mov.w	sl, #0
 8009766:	9b04      	ldr	r3, [sp, #16]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d1a4      	bne.n	80096b6 <_strtod_l+0x82e>
 800976c:	e5de      	b.n	800932c <_strtod_l+0x4a4>
 800976e:	f04f 33ff 	mov.w	r3, #4294967295
 8009772:	e7ea      	b.n	800974a <_strtod_l+0x8c2>
 8009774:	4613      	mov	r3, r2
 8009776:	e7e8      	b.n	800974a <_strtod_l+0x8c2>
 8009778:	ea53 030a 	orrs.w	r3, r3, sl
 800977c:	d08c      	beq.n	8009698 <_strtod_l+0x810>
 800977e:	9b08      	ldr	r3, [sp, #32]
 8009780:	b1db      	cbz	r3, 80097ba <_strtod_l+0x932>
 8009782:	423b      	tst	r3, r7
 8009784:	d0ef      	beq.n	8009766 <_strtod_l+0x8de>
 8009786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009788:	9a04      	ldr	r2, [sp, #16]
 800978a:	4650      	mov	r0, sl
 800978c:	4659      	mov	r1, fp
 800978e:	b1c3      	cbz	r3, 80097c2 <_strtod_l+0x93a>
 8009790:	f7ff fb5b 	bl	8008e4a <sulp>
 8009794:	4602      	mov	r2, r0
 8009796:	460b      	mov	r3, r1
 8009798:	ec51 0b18 	vmov	r0, r1, d8
 800979c:	f7f6 fd86 	bl	80002ac <__adddf3>
 80097a0:	4682      	mov	sl, r0
 80097a2:	468b      	mov	fp, r1
 80097a4:	e7df      	b.n	8009766 <_strtod_l+0x8de>
 80097a6:	4013      	ands	r3, r2
 80097a8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80097ac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80097b0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80097b4:	f04f 3aff 	mov.w	sl, #4294967295
 80097b8:	e7d5      	b.n	8009766 <_strtod_l+0x8de>
 80097ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097bc:	ea13 0f0a 	tst.w	r3, sl
 80097c0:	e7e0      	b.n	8009784 <_strtod_l+0x8fc>
 80097c2:	f7ff fb42 	bl	8008e4a <sulp>
 80097c6:	4602      	mov	r2, r0
 80097c8:	460b      	mov	r3, r1
 80097ca:	ec51 0b18 	vmov	r0, r1, d8
 80097ce:	f7f6 fd6b 	bl	80002a8 <__aeabi_dsub>
 80097d2:	2200      	movs	r2, #0
 80097d4:	2300      	movs	r3, #0
 80097d6:	4682      	mov	sl, r0
 80097d8:	468b      	mov	fp, r1
 80097da:	f7f7 f985 	bl	8000ae8 <__aeabi_dcmpeq>
 80097de:	2800      	cmp	r0, #0
 80097e0:	d0c1      	beq.n	8009766 <_strtod_l+0x8de>
 80097e2:	e611      	b.n	8009408 <_strtod_l+0x580>
 80097e4:	fffffc02 	.word	0xfffffc02
 80097e8:	7ff00000 	.word	0x7ff00000
 80097ec:	39500000 	.word	0x39500000
 80097f0:	000fffff 	.word	0x000fffff
 80097f4:	7fefffff 	.word	0x7fefffff
 80097f8:	0800c8d8 	.word	0x0800c8d8
 80097fc:	4631      	mov	r1, r6
 80097fe:	4628      	mov	r0, r5
 8009800:	f001 f960 	bl	800aac4 <__ratio>
 8009804:	ec59 8b10 	vmov	r8, r9, d0
 8009808:	ee10 0a10 	vmov	r0, s0
 800980c:	2200      	movs	r2, #0
 800980e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009812:	4649      	mov	r1, r9
 8009814:	f7f7 f97c 	bl	8000b10 <__aeabi_dcmple>
 8009818:	2800      	cmp	r0, #0
 800981a:	d07a      	beq.n	8009912 <_strtod_l+0xa8a>
 800981c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800981e:	2b00      	cmp	r3, #0
 8009820:	d04a      	beq.n	80098b8 <_strtod_l+0xa30>
 8009822:	4b95      	ldr	r3, [pc, #596]	; (8009a78 <_strtod_l+0xbf0>)
 8009824:	2200      	movs	r2, #0
 8009826:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800982a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009a78 <_strtod_l+0xbf0>
 800982e:	f04f 0800 	mov.w	r8, #0
 8009832:	4b92      	ldr	r3, [pc, #584]	; (8009a7c <_strtod_l+0xbf4>)
 8009834:	403b      	ands	r3, r7
 8009836:	930d      	str	r3, [sp, #52]	; 0x34
 8009838:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800983a:	4b91      	ldr	r3, [pc, #580]	; (8009a80 <_strtod_l+0xbf8>)
 800983c:	429a      	cmp	r2, r3
 800983e:	f040 80b0 	bne.w	80099a2 <_strtod_l+0xb1a>
 8009842:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009846:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800984a:	ec4b ab10 	vmov	d0, sl, fp
 800984e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009852:	f001 f85f 	bl	800a914 <__ulp>
 8009856:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800985a:	ec53 2b10 	vmov	r2, r3, d0
 800985e:	f7f6 fedb 	bl	8000618 <__aeabi_dmul>
 8009862:	4652      	mov	r2, sl
 8009864:	465b      	mov	r3, fp
 8009866:	f7f6 fd21 	bl	80002ac <__adddf3>
 800986a:	460b      	mov	r3, r1
 800986c:	4983      	ldr	r1, [pc, #524]	; (8009a7c <_strtod_l+0xbf4>)
 800986e:	4a85      	ldr	r2, [pc, #532]	; (8009a84 <_strtod_l+0xbfc>)
 8009870:	4019      	ands	r1, r3
 8009872:	4291      	cmp	r1, r2
 8009874:	4682      	mov	sl, r0
 8009876:	d960      	bls.n	800993a <_strtod_l+0xab2>
 8009878:	ee18 3a90 	vmov	r3, s17
 800987c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009880:	4293      	cmp	r3, r2
 8009882:	d104      	bne.n	800988e <_strtod_l+0xa06>
 8009884:	ee18 3a10 	vmov	r3, s16
 8009888:	3301      	adds	r3, #1
 800988a:	f43f ad45 	beq.w	8009318 <_strtod_l+0x490>
 800988e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009a90 <_strtod_l+0xc08>
 8009892:	f04f 3aff 	mov.w	sl, #4294967295
 8009896:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009898:	4620      	mov	r0, r4
 800989a:	f000 fd09 	bl	800a2b0 <_Bfree>
 800989e:	9905      	ldr	r1, [sp, #20]
 80098a0:	4620      	mov	r0, r4
 80098a2:	f000 fd05 	bl	800a2b0 <_Bfree>
 80098a6:	4631      	mov	r1, r6
 80098a8:	4620      	mov	r0, r4
 80098aa:	f000 fd01 	bl	800a2b0 <_Bfree>
 80098ae:	4629      	mov	r1, r5
 80098b0:	4620      	mov	r0, r4
 80098b2:	f000 fcfd 	bl	800a2b0 <_Bfree>
 80098b6:	e61a      	b.n	80094ee <_strtod_l+0x666>
 80098b8:	f1ba 0f00 	cmp.w	sl, #0
 80098bc:	d11b      	bne.n	80098f6 <_strtod_l+0xa6e>
 80098be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80098c2:	b9f3      	cbnz	r3, 8009902 <_strtod_l+0xa7a>
 80098c4:	4b6c      	ldr	r3, [pc, #432]	; (8009a78 <_strtod_l+0xbf0>)
 80098c6:	2200      	movs	r2, #0
 80098c8:	4640      	mov	r0, r8
 80098ca:	4649      	mov	r1, r9
 80098cc:	f7f7 f916 	bl	8000afc <__aeabi_dcmplt>
 80098d0:	b9d0      	cbnz	r0, 8009908 <_strtod_l+0xa80>
 80098d2:	4640      	mov	r0, r8
 80098d4:	4649      	mov	r1, r9
 80098d6:	4b6c      	ldr	r3, [pc, #432]	; (8009a88 <_strtod_l+0xc00>)
 80098d8:	2200      	movs	r2, #0
 80098da:	f7f6 fe9d 	bl	8000618 <__aeabi_dmul>
 80098de:	4680      	mov	r8, r0
 80098e0:	4689      	mov	r9, r1
 80098e2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80098e6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80098ea:	9315      	str	r3, [sp, #84]	; 0x54
 80098ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80098f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80098f4:	e79d      	b.n	8009832 <_strtod_l+0x9aa>
 80098f6:	f1ba 0f01 	cmp.w	sl, #1
 80098fa:	d102      	bne.n	8009902 <_strtod_l+0xa7a>
 80098fc:	2f00      	cmp	r7, #0
 80098fe:	f43f ad83 	beq.w	8009408 <_strtod_l+0x580>
 8009902:	4b62      	ldr	r3, [pc, #392]	; (8009a8c <_strtod_l+0xc04>)
 8009904:	2200      	movs	r2, #0
 8009906:	e78e      	b.n	8009826 <_strtod_l+0x99e>
 8009908:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009a88 <_strtod_l+0xc00>
 800990c:	f04f 0800 	mov.w	r8, #0
 8009910:	e7e7      	b.n	80098e2 <_strtod_l+0xa5a>
 8009912:	4b5d      	ldr	r3, [pc, #372]	; (8009a88 <_strtod_l+0xc00>)
 8009914:	4640      	mov	r0, r8
 8009916:	4649      	mov	r1, r9
 8009918:	2200      	movs	r2, #0
 800991a:	f7f6 fe7d 	bl	8000618 <__aeabi_dmul>
 800991e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009920:	4680      	mov	r8, r0
 8009922:	4689      	mov	r9, r1
 8009924:	b933      	cbnz	r3, 8009934 <_strtod_l+0xaac>
 8009926:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800992a:	900e      	str	r0, [sp, #56]	; 0x38
 800992c:	930f      	str	r3, [sp, #60]	; 0x3c
 800992e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009932:	e7dd      	b.n	80098f0 <_strtod_l+0xa68>
 8009934:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009938:	e7f9      	b.n	800992e <_strtod_l+0xaa6>
 800993a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800993e:	9b04      	ldr	r3, [sp, #16]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d1a8      	bne.n	8009896 <_strtod_l+0xa0e>
 8009944:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009948:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800994a:	0d1b      	lsrs	r3, r3, #20
 800994c:	051b      	lsls	r3, r3, #20
 800994e:	429a      	cmp	r2, r3
 8009950:	d1a1      	bne.n	8009896 <_strtod_l+0xa0e>
 8009952:	4640      	mov	r0, r8
 8009954:	4649      	mov	r1, r9
 8009956:	f7f7 f9bf 	bl	8000cd8 <__aeabi_d2lz>
 800995a:	f7f6 fe2f 	bl	80005bc <__aeabi_l2d>
 800995e:	4602      	mov	r2, r0
 8009960:	460b      	mov	r3, r1
 8009962:	4640      	mov	r0, r8
 8009964:	4649      	mov	r1, r9
 8009966:	f7f6 fc9f 	bl	80002a8 <__aeabi_dsub>
 800996a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800996c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009970:	ea43 030a 	orr.w	r3, r3, sl
 8009974:	4313      	orrs	r3, r2
 8009976:	4680      	mov	r8, r0
 8009978:	4689      	mov	r9, r1
 800997a:	d055      	beq.n	8009a28 <_strtod_l+0xba0>
 800997c:	a336      	add	r3, pc, #216	; (adr r3, 8009a58 <_strtod_l+0xbd0>)
 800997e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009982:	f7f7 f8bb 	bl	8000afc <__aeabi_dcmplt>
 8009986:	2800      	cmp	r0, #0
 8009988:	f47f acd0 	bne.w	800932c <_strtod_l+0x4a4>
 800998c:	a334      	add	r3, pc, #208	; (adr r3, 8009a60 <_strtod_l+0xbd8>)
 800998e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009992:	4640      	mov	r0, r8
 8009994:	4649      	mov	r1, r9
 8009996:	f7f7 f8cf 	bl	8000b38 <__aeabi_dcmpgt>
 800999a:	2800      	cmp	r0, #0
 800999c:	f43f af7b 	beq.w	8009896 <_strtod_l+0xa0e>
 80099a0:	e4c4      	b.n	800932c <_strtod_l+0x4a4>
 80099a2:	9b04      	ldr	r3, [sp, #16]
 80099a4:	b333      	cbz	r3, 80099f4 <_strtod_l+0xb6c>
 80099a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099a8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80099ac:	d822      	bhi.n	80099f4 <_strtod_l+0xb6c>
 80099ae:	a32e      	add	r3, pc, #184	; (adr r3, 8009a68 <_strtod_l+0xbe0>)
 80099b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b4:	4640      	mov	r0, r8
 80099b6:	4649      	mov	r1, r9
 80099b8:	f7f7 f8aa 	bl	8000b10 <__aeabi_dcmple>
 80099bc:	b1a0      	cbz	r0, 80099e8 <_strtod_l+0xb60>
 80099be:	4649      	mov	r1, r9
 80099c0:	4640      	mov	r0, r8
 80099c2:	f7f7 f901 	bl	8000bc8 <__aeabi_d2uiz>
 80099c6:	2801      	cmp	r0, #1
 80099c8:	bf38      	it	cc
 80099ca:	2001      	movcc	r0, #1
 80099cc:	f7f6 fdaa 	bl	8000524 <__aeabi_ui2d>
 80099d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099d2:	4680      	mov	r8, r0
 80099d4:	4689      	mov	r9, r1
 80099d6:	bb23      	cbnz	r3, 8009a22 <_strtod_l+0xb9a>
 80099d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80099dc:	9010      	str	r0, [sp, #64]	; 0x40
 80099de:	9311      	str	r3, [sp, #68]	; 0x44
 80099e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80099e4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80099e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80099ec:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80099f0:	1a9b      	subs	r3, r3, r2
 80099f2:	9309      	str	r3, [sp, #36]	; 0x24
 80099f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80099f8:	eeb0 0a48 	vmov.f32	s0, s16
 80099fc:	eef0 0a68 	vmov.f32	s1, s17
 8009a00:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009a04:	f000 ff86 	bl	800a914 <__ulp>
 8009a08:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009a0c:	ec53 2b10 	vmov	r2, r3, d0
 8009a10:	f7f6 fe02 	bl	8000618 <__aeabi_dmul>
 8009a14:	ec53 2b18 	vmov	r2, r3, d8
 8009a18:	f7f6 fc48 	bl	80002ac <__adddf3>
 8009a1c:	4682      	mov	sl, r0
 8009a1e:	468b      	mov	fp, r1
 8009a20:	e78d      	b.n	800993e <_strtod_l+0xab6>
 8009a22:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009a26:	e7db      	b.n	80099e0 <_strtod_l+0xb58>
 8009a28:	a311      	add	r3, pc, #68	; (adr r3, 8009a70 <_strtod_l+0xbe8>)
 8009a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2e:	f7f7 f865 	bl	8000afc <__aeabi_dcmplt>
 8009a32:	e7b2      	b.n	800999a <_strtod_l+0xb12>
 8009a34:	2300      	movs	r3, #0
 8009a36:	930a      	str	r3, [sp, #40]	; 0x28
 8009a38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009a3a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009a3c:	6013      	str	r3, [r2, #0]
 8009a3e:	f7ff ba6b 	b.w	8008f18 <_strtod_l+0x90>
 8009a42:	2a65      	cmp	r2, #101	; 0x65
 8009a44:	f43f ab5f 	beq.w	8009106 <_strtod_l+0x27e>
 8009a48:	2a45      	cmp	r2, #69	; 0x45
 8009a4a:	f43f ab5c 	beq.w	8009106 <_strtod_l+0x27e>
 8009a4e:	2301      	movs	r3, #1
 8009a50:	f7ff bb94 	b.w	800917c <_strtod_l+0x2f4>
 8009a54:	f3af 8000 	nop.w
 8009a58:	94a03595 	.word	0x94a03595
 8009a5c:	3fdfffff 	.word	0x3fdfffff
 8009a60:	35afe535 	.word	0x35afe535
 8009a64:	3fe00000 	.word	0x3fe00000
 8009a68:	ffc00000 	.word	0xffc00000
 8009a6c:	41dfffff 	.word	0x41dfffff
 8009a70:	94a03595 	.word	0x94a03595
 8009a74:	3fcfffff 	.word	0x3fcfffff
 8009a78:	3ff00000 	.word	0x3ff00000
 8009a7c:	7ff00000 	.word	0x7ff00000
 8009a80:	7fe00000 	.word	0x7fe00000
 8009a84:	7c9fffff 	.word	0x7c9fffff
 8009a88:	3fe00000 	.word	0x3fe00000
 8009a8c:	bff00000 	.word	0xbff00000
 8009a90:	7fefffff 	.word	0x7fefffff

08009a94 <strtod>:
 8009a94:	460a      	mov	r2, r1
 8009a96:	4601      	mov	r1, r0
 8009a98:	4802      	ldr	r0, [pc, #8]	; (8009aa4 <strtod+0x10>)
 8009a9a:	4b03      	ldr	r3, [pc, #12]	; (8009aa8 <strtod+0x14>)
 8009a9c:	6800      	ldr	r0, [r0, #0]
 8009a9e:	f7ff b9f3 	b.w	8008e88 <_strtod_l>
 8009aa2:	bf00      	nop
 8009aa4:	200000fc 	.word	0x200000fc
 8009aa8:	20000164 	.word	0x20000164

08009aac <_write_r>:
 8009aac:	b538      	push	{r3, r4, r5, lr}
 8009aae:	4d07      	ldr	r5, [pc, #28]	; (8009acc <_write_r+0x20>)
 8009ab0:	4604      	mov	r4, r0
 8009ab2:	4608      	mov	r0, r1
 8009ab4:	4611      	mov	r1, r2
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	602a      	str	r2, [r5, #0]
 8009aba:	461a      	mov	r2, r3
 8009abc:	f7fa fbb3 	bl	8004226 <_write>
 8009ac0:	1c43      	adds	r3, r0, #1
 8009ac2:	d102      	bne.n	8009aca <_write_r+0x1e>
 8009ac4:	682b      	ldr	r3, [r5, #0]
 8009ac6:	b103      	cbz	r3, 8009aca <_write_r+0x1e>
 8009ac8:	6023      	str	r3, [r4, #0]
 8009aca:	bd38      	pop	{r3, r4, r5, pc}
 8009acc:	200005e4 	.word	0x200005e4

08009ad0 <_close_r>:
 8009ad0:	b538      	push	{r3, r4, r5, lr}
 8009ad2:	4d06      	ldr	r5, [pc, #24]	; (8009aec <_close_r+0x1c>)
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	4604      	mov	r4, r0
 8009ad8:	4608      	mov	r0, r1
 8009ada:	602b      	str	r3, [r5, #0]
 8009adc:	f7fa fbbf 	bl	800425e <_close>
 8009ae0:	1c43      	adds	r3, r0, #1
 8009ae2:	d102      	bne.n	8009aea <_close_r+0x1a>
 8009ae4:	682b      	ldr	r3, [r5, #0]
 8009ae6:	b103      	cbz	r3, 8009aea <_close_r+0x1a>
 8009ae8:	6023      	str	r3, [r4, #0]
 8009aea:	bd38      	pop	{r3, r4, r5, pc}
 8009aec:	200005e4 	.word	0x200005e4

08009af0 <rshift>:
 8009af0:	6903      	ldr	r3, [r0, #16]
 8009af2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009af6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009afa:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009afe:	f100 0414 	add.w	r4, r0, #20
 8009b02:	dd45      	ble.n	8009b90 <rshift+0xa0>
 8009b04:	f011 011f 	ands.w	r1, r1, #31
 8009b08:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009b0c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009b10:	d10c      	bne.n	8009b2c <rshift+0x3c>
 8009b12:	f100 0710 	add.w	r7, r0, #16
 8009b16:	4629      	mov	r1, r5
 8009b18:	42b1      	cmp	r1, r6
 8009b1a:	d334      	bcc.n	8009b86 <rshift+0x96>
 8009b1c:	1a9b      	subs	r3, r3, r2
 8009b1e:	009b      	lsls	r3, r3, #2
 8009b20:	1eea      	subs	r2, r5, #3
 8009b22:	4296      	cmp	r6, r2
 8009b24:	bf38      	it	cc
 8009b26:	2300      	movcc	r3, #0
 8009b28:	4423      	add	r3, r4
 8009b2a:	e015      	b.n	8009b58 <rshift+0x68>
 8009b2c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009b30:	f1c1 0820 	rsb	r8, r1, #32
 8009b34:	40cf      	lsrs	r7, r1
 8009b36:	f105 0e04 	add.w	lr, r5, #4
 8009b3a:	46a1      	mov	r9, r4
 8009b3c:	4576      	cmp	r6, lr
 8009b3e:	46f4      	mov	ip, lr
 8009b40:	d815      	bhi.n	8009b6e <rshift+0x7e>
 8009b42:	1a9a      	subs	r2, r3, r2
 8009b44:	0092      	lsls	r2, r2, #2
 8009b46:	3a04      	subs	r2, #4
 8009b48:	3501      	adds	r5, #1
 8009b4a:	42ae      	cmp	r6, r5
 8009b4c:	bf38      	it	cc
 8009b4e:	2200      	movcc	r2, #0
 8009b50:	18a3      	adds	r3, r4, r2
 8009b52:	50a7      	str	r7, [r4, r2]
 8009b54:	b107      	cbz	r7, 8009b58 <rshift+0x68>
 8009b56:	3304      	adds	r3, #4
 8009b58:	1b1a      	subs	r2, r3, r4
 8009b5a:	42a3      	cmp	r3, r4
 8009b5c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009b60:	bf08      	it	eq
 8009b62:	2300      	moveq	r3, #0
 8009b64:	6102      	str	r2, [r0, #16]
 8009b66:	bf08      	it	eq
 8009b68:	6143      	streq	r3, [r0, #20]
 8009b6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b6e:	f8dc c000 	ldr.w	ip, [ip]
 8009b72:	fa0c fc08 	lsl.w	ip, ip, r8
 8009b76:	ea4c 0707 	orr.w	r7, ip, r7
 8009b7a:	f849 7b04 	str.w	r7, [r9], #4
 8009b7e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009b82:	40cf      	lsrs	r7, r1
 8009b84:	e7da      	b.n	8009b3c <rshift+0x4c>
 8009b86:	f851 cb04 	ldr.w	ip, [r1], #4
 8009b8a:	f847 cf04 	str.w	ip, [r7, #4]!
 8009b8e:	e7c3      	b.n	8009b18 <rshift+0x28>
 8009b90:	4623      	mov	r3, r4
 8009b92:	e7e1      	b.n	8009b58 <rshift+0x68>

08009b94 <__hexdig_fun>:
 8009b94:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009b98:	2b09      	cmp	r3, #9
 8009b9a:	d802      	bhi.n	8009ba2 <__hexdig_fun+0xe>
 8009b9c:	3820      	subs	r0, #32
 8009b9e:	b2c0      	uxtb	r0, r0
 8009ba0:	4770      	bx	lr
 8009ba2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009ba6:	2b05      	cmp	r3, #5
 8009ba8:	d801      	bhi.n	8009bae <__hexdig_fun+0x1a>
 8009baa:	3847      	subs	r0, #71	; 0x47
 8009bac:	e7f7      	b.n	8009b9e <__hexdig_fun+0xa>
 8009bae:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009bb2:	2b05      	cmp	r3, #5
 8009bb4:	d801      	bhi.n	8009bba <__hexdig_fun+0x26>
 8009bb6:	3827      	subs	r0, #39	; 0x27
 8009bb8:	e7f1      	b.n	8009b9e <__hexdig_fun+0xa>
 8009bba:	2000      	movs	r0, #0
 8009bbc:	4770      	bx	lr
	...

08009bc0 <__gethex>:
 8009bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc4:	ed2d 8b02 	vpush	{d8}
 8009bc8:	b089      	sub	sp, #36	; 0x24
 8009bca:	ee08 0a10 	vmov	s16, r0
 8009bce:	9304      	str	r3, [sp, #16]
 8009bd0:	4bb4      	ldr	r3, [pc, #720]	; (8009ea4 <__gethex+0x2e4>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	9301      	str	r3, [sp, #4]
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	468b      	mov	fp, r1
 8009bda:	4690      	mov	r8, r2
 8009bdc:	f7f6 fb02 	bl	80001e4 <strlen>
 8009be0:	9b01      	ldr	r3, [sp, #4]
 8009be2:	f8db 2000 	ldr.w	r2, [fp]
 8009be6:	4403      	add	r3, r0
 8009be8:	4682      	mov	sl, r0
 8009bea:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009bee:	9305      	str	r3, [sp, #20]
 8009bf0:	1c93      	adds	r3, r2, #2
 8009bf2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009bf6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009bfa:	32fe      	adds	r2, #254	; 0xfe
 8009bfc:	18d1      	adds	r1, r2, r3
 8009bfe:	461f      	mov	r7, r3
 8009c00:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009c04:	9100      	str	r1, [sp, #0]
 8009c06:	2830      	cmp	r0, #48	; 0x30
 8009c08:	d0f8      	beq.n	8009bfc <__gethex+0x3c>
 8009c0a:	f7ff ffc3 	bl	8009b94 <__hexdig_fun>
 8009c0e:	4604      	mov	r4, r0
 8009c10:	2800      	cmp	r0, #0
 8009c12:	d13a      	bne.n	8009c8a <__gethex+0xca>
 8009c14:	9901      	ldr	r1, [sp, #4]
 8009c16:	4652      	mov	r2, sl
 8009c18:	4638      	mov	r0, r7
 8009c1a:	f7ff f902 	bl	8008e22 <strncmp>
 8009c1e:	4605      	mov	r5, r0
 8009c20:	2800      	cmp	r0, #0
 8009c22:	d168      	bne.n	8009cf6 <__gethex+0x136>
 8009c24:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009c28:	eb07 060a 	add.w	r6, r7, sl
 8009c2c:	f7ff ffb2 	bl	8009b94 <__hexdig_fun>
 8009c30:	2800      	cmp	r0, #0
 8009c32:	d062      	beq.n	8009cfa <__gethex+0x13a>
 8009c34:	4633      	mov	r3, r6
 8009c36:	7818      	ldrb	r0, [r3, #0]
 8009c38:	2830      	cmp	r0, #48	; 0x30
 8009c3a:	461f      	mov	r7, r3
 8009c3c:	f103 0301 	add.w	r3, r3, #1
 8009c40:	d0f9      	beq.n	8009c36 <__gethex+0x76>
 8009c42:	f7ff ffa7 	bl	8009b94 <__hexdig_fun>
 8009c46:	2301      	movs	r3, #1
 8009c48:	fab0 f480 	clz	r4, r0
 8009c4c:	0964      	lsrs	r4, r4, #5
 8009c4e:	4635      	mov	r5, r6
 8009c50:	9300      	str	r3, [sp, #0]
 8009c52:	463a      	mov	r2, r7
 8009c54:	4616      	mov	r6, r2
 8009c56:	3201      	adds	r2, #1
 8009c58:	7830      	ldrb	r0, [r6, #0]
 8009c5a:	f7ff ff9b 	bl	8009b94 <__hexdig_fun>
 8009c5e:	2800      	cmp	r0, #0
 8009c60:	d1f8      	bne.n	8009c54 <__gethex+0x94>
 8009c62:	9901      	ldr	r1, [sp, #4]
 8009c64:	4652      	mov	r2, sl
 8009c66:	4630      	mov	r0, r6
 8009c68:	f7ff f8db 	bl	8008e22 <strncmp>
 8009c6c:	b980      	cbnz	r0, 8009c90 <__gethex+0xd0>
 8009c6e:	b94d      	cbnz	r5, 8009c84 <__gethex+0xc4>
 8009c70:	eb06 050a 	add.w	r5, r6, sl
 8009c74:	462a      	mov	r2, r5
 8009c76:	4616      	mov	r6, r2
 8009c78:	3201      	adds	r2, #1
 8009c7a:	7830      	ldrb	r0, [r6, #0]
 8009c7c:	f7ff ff8a 	bl	8009b94 <__hexdig_fun>
 8009c80:	2800      	cmp	r0, #0
 8009c82:	d1f8      	bne.n	8009c76 <__gethex+0xb6>
 8009c84:	1bad      	subs	r5, r5, r6
 8009c86:	00ad      	lsls	r5, r5, #2
 8009c88:	e004      	b.n	8009c94 <__gethex+0xd4>
 8009c8a:	2400      	movs	r4, #0
 8009c8c:	4625      	mov	r5, r4
 8009c8e:	e7e0      	b.n	8009c52 <__gethex+0x92>
 8009c90:	2d00      	cmp	r5, #0
 8009c92:	d1f7      	bne.n	8009c84 <__gethex+0xc4>
 8009c94:	7833      	ldrb	r3, [r6, #0]
 8009c96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009c9a:	2b50      	cmp	r3, #80	; 0x50
 8009c9c:	d13b      	bne.n	8009d16 <__gethex+0x156>
 8009c9e:	7873      	ldrb	r3, [r6, #1]
 8009ca0:	2b2b      	cmp	r3, #43	; 0x2b
 8009ca2:	d02c      	beq.n	8009cfe <__gethex+0x13e>
 8009ca4:	2b2d      	cmp	r3, #45	; 0x2d
 8009ca6:	d02e      	beq.n	8009d06 <__gethex+0x146>
 8009ca8:	1c71      	adds	r1, r6, #1
 8009caa:	f04f 0900 	mov.w	r9, #0
 8009cae:	7808      	ldrb	r0, [r1, #0]
 8009cb0:	f7ff ff70 	bl	8009b94 <__hexdig_fun>
 8009cb4:	1e43      	subs	r3, r0, #1
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	2b18      	cmp	r3, #24
 8009cba:	d82c      	bhi.n	8009d16 <__gethex+0x156>
 8009cbc:	f1a0 0210 	sub.w	r2, r0, #16
 8009cc0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009cc4:	f7ff ff66 	bl	8009b94 <__hexdig_fun>
 8009cc8:	1e43      	subs	r3, r0, #1
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	2b18      	cmp	r3, #24
 8009cce:	d91d      	bls.n	8009d0c <__gethex+0x14c>
 8009cd0:	f1b9 0f00 	cmp.w	r9, #0
 8009cd4:	d000      	beq.n	8009cd8 <__gethex+0x118>
 8009cd6:	4252      	negs	r2, r2
 8009cd8:	4415      	add	r5, r2
 8009cda:	f8cb 1000 	str.w	r1, [fp]
 8009cde:	b1e4      	cbz	r4, 8009d1a <__gethex+0x15a>
 8009ce0:	9b00      	ldr	r3, [sp, #0]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	bf14      	ite	ne
 8009ce6:	2700      	movne	r7, #0
 8009ce8:	2706      	moveq	r7, #6
 8009cea:	4638      	mov	r0, r7
 8009cec:	b009      	add	sp, #36	; 0x24
 8009cee:	ecbd 8b02 	vpop	{d8}
 8009cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cf6:	463e      	mov	r6, r7
 8009cf8:	4625      	mov	r5, r4
 8009cfa:	2401      	movs	r4, #1
 8009cfc:	e7ca      	b.n	8009c94 <__gethex+0xd4>
 8009cfe:	f04f 0900 	mov.w	r9, #0
 8009d02:	1cb1      	adds	r1, r6, #2
 8009d04:	e7d3      	b.n	8009cae <__gethex+0xee>
 8009d06:	f04f 0901 	mov.w	r9, #1
 8009d0a:	e7fa      	b.n	8009d02 <__gethex+0x142>
 8009d0c:	230a      	movs	r3, #10
 8009d0e:	fb03 0202 	mla	r2, r3, r2, r0
 8009d12:	3a10      	subs	r2, #16
 8009d14:	e7d4      	b.n	8009cc0 <__gethex+0x100>
 8009d16:	4631      	mov	r1, r6
 8009d18:	e7df      	b.n	8009cda <__gethex+0x11a>
 8009d1a:	1bf3      	subs	r3, r6, r7
 8009d1c:	3b01      	subs	r3, #1
 8009d1e:	4621      	mov	r1, r4
 8009d20:	2b07      	cmp	r3, #7
 8009d22:	dc0b      	bgt.n	8009d3c <__gethex+0x17c>
 8009d24:	ee18 0a10 	vmov	r0, s16
 8009d28:	f000 fa82 	bl	800a230 <_Balloc>
 8009d2c:	4604      	mov	r4, r0
 8009d2e:	b940      	cbnz	r0, 8009d42 <__gethex+0x182>
 8009d30:	4b5d      	ldr	r3, [pc, #372]	; (8009ea8 <__gethex+0x2e8>)
 8009d32:	4602      	mov	r2, r0
 8009d34:	21de      	movs	r1, #222	; 0xde
 8009d36:	485d      	ldr	r0, [pc, #372]	; (8009eac <__gethex+0x2ec>)
 8009d38:	f001 ff26 	bl	800bb88 <__assert_func>
 8009d3c:	3101      	adds	r1, #1
 8009d3e:	105b      	asrs	r3, r3, #1
 8009d40:	e7ee      	b.n	8009d20 <__gethex+0x160>
 8009d42:	f100 0914 	add.w	r9, r0, #20
 8009d46:	f04f 0b00 	mov.w	fp, #0
 8009d4a:	f1ca 0301 	rsb	r3, sl, #1
 8009d4e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009d52:	f8cd b000 	str.w	fp, [sp]
 8009d56:	9306      	str	r3, [sp, #24]
 8009d58:	42b7      	cmp	r7, r6
 8009d5a:	d340      	bcc.n	8009dde <__gethex+0x21e>
 8009d5c:	9802      	ldr	r0, [sp, #8]
 8009d5e:	9b00      	ldr	r3, [sp, #0]
 8009d60:	f840 3b04 	str.w	r3, [r0], #4
 8009d64:	eba0 0009 	sub.w	r0, r0, r9
 8009d68:	1080      	asrs	r0, r0, #2
 8009d6a:	0146      	lsls	r6, r0, #5
 8009d6c:	6120      	str	r0, [r4, #16]
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f000 fb50 	bl	800a414 <__hi0bits>
 8009d74:	1a30      	subs	r0, r6, r0
 8009d76:	f8d8 6000 	ldr.w	r6, [r8]
 8009d7a:	42b0      	cmp	r0, r6
 8009d7c:	dd63      	ble.n	8009e46 <__gethex+0x286>
 8009d7e:	1b87      	subs	r7, r0, r6
 8009d80:	4639      	mov	r1, r7
 8009d82:	4620      	mov	r0, r4
 8009d84:	f000 fef4 	bl	800ab70 <__any_on>
 8009d88:	4682      	mov	sl, r0
 8009d8a:	b1a8      	cbz	r0, 8009db8 <__gethex+0x1f8>
 8009d8c:	1e7b      	subs	r3, r7, #1
 8009d8e:	1159      	asrs	r1, r3, #5
 8009d90:	f003 021f 	and.w	r2, r3, #31
 8009d94:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009d98:	f04f 0a01 	mov.w	sl, #1
 8009d9c:	fa0a f202 	lsl.w	r2, sl, r2
 8009da0:	420a      	tst	r2, r1
 8009da2:	d009      	beq.n	8009db8 <__gethex+0x1f8>
 8009da4:	4553      	cmp	r3, sl
 8009da6:	dd05      	ble.n	8009db4 <__gethex+0x1f4>
 8009da8:	1eb9      	subs	r1, r7, #2
 8009daa:	4620      	mov	r0, r4
 8009dac:	f000 fee0 	bl	800ab70 <__any_on>
 8009db0:	2800      	cmp	r0, #0
 8009db2:	d145      	bne.n	8009e40 <__gethex+0x280>
 8009db4:	f04f 0a02 	mov.w	sl, #2
 8009db8:	4639      	mov	r1, r7
 8009dba:	4620      	mov	r0, r4
 8009dbc:	f7ff fe98 	bl	8009af0 <rshift>
 8009dc0:	443d      	add	r5, r7
 8009dc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009dc6:	42ab      	cmp	r3, r5
 8009dc8:	da4c      	bge.n	8009e64 <__gethex+0x2a4>
 8009dca:	ee18 0a10 	vmov	r0, s16
 8009dce:	4621      	mov	r1, r4
 8009dd0:	f000 fa6e 	bl	800a2b0 <_Bfree>
 8009dd4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	6013      	str	r3, [r2, #0]
 8009dda:	27a3      	movs	r7, #163	; 0xa3
 8009ddc:	e785      	b.n	8009cea <__gethex+0x12a>
 8009dde:	1e73      	subs	r3, r6, #1
 8009de0:	9a05      	ldr	r2, [sp, #20]
 8009de2:	9303      	str	r3, [sp, #12]
 8009de4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d019      	beq.n	8009e20 <__gethex+0x260>
 8009dec:	f1bb 0f20 	cmp.w	fp, #32
 8009df0:	d107      	bne.n	8009e02 <__gethex+0x242>
 8009df2:	9b02      	ldr	r3, [sp, #8]
 8009df4:	9a00      	ldr	r2, [sp, #0]
 8009df6:	f843 2b04 	str.w	r2, [r3], #4
 8009dfa:	9302      	str	r3, [sp, #8]
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	9300      	str	r3, [sp, #0]
 8009e00:	469b      	mov	fp, r3
 8009e02:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009e06:	f7ff fec5 	bl	8009b94 <__hexdig_fun>
 8009e0a:	9b00      	ldr	r3, [sp, #0]
 8009e0c:	f000 000f 	and.w	r0, r0, #15
 8009e10:	fa00 f00b 	lsl.w	r0, r0, fp
 8009e14:	4303      	orrs	r3, r0
 8009e16:	9300      	str	r3, [sp, #0]
 8009e18:	f10b 0b04 	add.w	fp, fp, #4
 8009e1c:	9b03      	ldr	r3, [sp, #12]
 8009e1e:	e00d      	b.n	8009e3c <__gethex+0x27c>
 8009e20:	9b03      	ldr	r3, [sp, #12]
 8009e22:	9a06      	ldr	r2, [sp, #24]
 8009e24:	4413      	add	r3, r2
 8009e26:	42bb      	cmp	r3, r7
 8009e28:	d3e0      	bcc.n	8009dec <__gethex+0x22c>
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	9901      	ldr	r1, [sp, #4]
 8009e2e:	9307      	str	r3, [sp, #28]
 8009e30:	4652      	mov	r2, sl
 8009e32:	f7fe fff6 	bl	8008e22 <strncmp>
 8009e36:	9b07      	ldr	r3, [sp, #28]
 8009e38:	2800      	cmp	r0, #0
 8009e3a:	d1d7      	bne.n	8009dec <__gethex+0x22c>
 8009e3c:	461e      	mov	r6, r3
 8009e3e:	e78b      	b.n	8009d58 <__gethex+0x198>
 8009e40:	f04f 0a03 	mov.w	sl, #3
 8009e44:	e7b8      	b.n	8009db8 <__gethex+0x1f8>
 8009e46:	da0a      	bge.n	8009e5e <__gethex+0x29e>
 8009e48:	1a37      	subs	r7, r6, r0
 8009e4a:	4621      	mov	r1, r4
 8009e4c:	ee18 0a10 	vmov	r0, s16
 8009e50:	463a      	mov	r2, r7
 8009e52:	f000 fc49 	bl	800a6e8 <__lshift>
 8009e56:	1bed      	subs	r5, r5, r7
 8009e58:	4604      	mov	r4, r0
 8009e5a:	f100 0914 	add.w	r9, r0, #20
 8009e5e:	f04f 0a00 	mov.w	sl, #0
 8009e62:	e7ae      	b.n	8009dc2 <__gethex+0x202>
 8009e64:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009e68:	42a8      	cmp	r0, r5
 8009e6a:	dd72      	ble.n	8009f52 <__gethex+0x392>
 8009e6c:	1b45      	subs	r5, r0, r5
 8009e6e:	42ae      	cmp	r6, r5
 8009e70:	dc36      	bgt.n	8009ee0 <__gethex+0x320>
 8009e72:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009e76:	2b02      	cmp	r3, #2
 8009e78:	d02a      	beq.n	8009ed0 <__gethex+0x310>
 8009e7a:	2b03      	cmp	r3, #3
 8009e7c:	d02c      	beq.n	8009ed8 <__gethex+0x318>
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d11c      	bne.n	8009ebc <__gethex+0x2fc>
 8009e82:	42ae      	cmp	r6, r5
 8009e84:	d11a      	bne.n	8009ebc <__gethex+0x2fc>
 8009e86:	2e01      	cmp	r6, #1
 8009e88:	d112      	bne.n	8009eb0 <__gethex+0x2f0>
 8009e8a:	9a04      	ldr	r2, [sp, #16]
 8009e8c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009e90:	6013      	str	r3, [r2, #0]
 8009e92:	2301      	movs	r3, #1
 8009e94:	6123      	str	r3, [r4, #16]
 8009e96:	f8c9 3000 	str.w	r3, [r9]
 8009e9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e9c:	2762      	movs	r7, #98	; 0x62
 8009e9e:	601c      	str	r4, [r3, #0]
 8009ea0:	e723      	b.n	8009cea <__gethex+0x12a>
 8009ea2:	bf00      	nop
 8009ea4:	0800c978 	.word	0x0800c978
 8009ea8:	0800c900 	.word	0x0800c900
 8009eac:	0800c911 	.word	0x0800c911
 8009eb0:	1e71      	subs	r1, r6, #1
 8009eb2:	4620      	mov	r0, r4
 8009eb4:	f000 fe5c 	bl	800ab70 <__any_on>
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	d1e6      	bne.n	8009e8a <__gethex+0x2ca>
 8009ebc:	ee18 0a10 	vmov	r0, s16
 8009ec0:	4621      	mov	r1, r4
 8009ec2:	f000 f9f5 	bl	800a2b0 <_Bfree>
 8009ec6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009ec8:	2300      	movs	r3, #0
 8009eca:	6013      	str	r3, [r2, #0]
 8009ecc:	2750      	movs	r7, #80	; 0x50
 8009ece:	e70c      	b.n	8009cea <__gethex+0x12a>
 8009ed0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d1f2      	bne.n	8009ebc <__gethex+0x2fc>
 8009ed6:	e7d8      	b.n	8009e8a <__gethex+0x2ca>
 8009ed8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d1d5      	bne.n	8009e8a <__gethex+0x2ca>
 8009ede:	e7ed      	b.n	8009ebc <__gethex+0x2fc>
 8009ee0:	1e6f      	subs	r7, r5, #1
 8009ee2:	f1ba 0f00 	cmp.w	sl, #0
 8009ee6:	d131      	bne.n	8009f4c <__gethex+0x38c>
 8009ee8:	b127      	cbz	r7, 8009ef4 <__gethex+0x334>
 8009eea:	4639      	mov	r1, r7
 8009eec:	4620      	mov	r0, r4
 8009eee:	f000 fe3f 	bl	800ab70 <__any_on>
 8009ef2:	4682      	mov	sl, r0
 8009ef4:	117b      	asrs	r3, r7, #5
 8009ef6:	2101      	movs	r1, #1
 8009ef8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009efc:	f007 071f 	and.w	r7, r7, #31
 8009f00:	fa01 f707 	lsl.w	r7, r1, r7
 8009f04:	421f      	tst	r7, r3
 8009f06:	4629      	mov	r1, r5
 8009f08:	4620      	mov	r0, r4
 8009f0a:	bf18      	it	ne
 8009f0c:	f04a 0a02 	orrne.w	sl, sl, #2
 8009f10:	1b76      	subs	r6, r6, r5
 8009f12:	f7ff fded 	bl	8009af0 <rshift>
 8009f16:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009f1a:	2702      	movs	r7, #2
 8009f1c:	f1ba 0f00 	cmp.w	sl, #0
 8009f20:	d048      	beq.n	8009fb4 <__gethex+0x3f4>
 8009f22:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009f26:	2b02      	cmp	r3, #2
 8009f28:	d015      	beq.n	8009f56 <__gethex+0x396>
 8009f2a:	2b03      	cmp	r3, #3
 8009f2c:	d017      	beq.n	8009f5e <__gethex+0x39e>
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d109      	bne.n	8009f46 <__gethex+0x386>
 8009f32:	f01a 0f02 	tst.w	sl, #2
 8009f36:	d006      	beq.n	8009f46 <__gethex+0x386>
 8009f38:	f8d9 0000 	ldr.w	r0, [r9]
 8009f3c:	ea4a 0a00 	orr.w	sl, sl, r0
 8009f40:	f01a 0f01 	tst.w	sl, #1
 8009f44:	d10e      	bne.n	8009f64 <__gethex+0x3a4>
 8009f46:	f047 0710 	orr.w	r7, r7, #16
 8009f4a:	e033      	b.n	8009fb4 <__gethex+0x3f4>
 8009f4c:	f04f 0a01 	mov.w	sl, #1
 8009f50:	e7d0      	b.n	8009ef4 <__gethex+0x334>
 8009f52:	2701      	movs	r7, #1
 8009f54:	e7e2      	b.n	8009f1c <__gethex+0x35c>
 8009f56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f58:	f1c3 0301 	rsb	r3, r3, #1
 8009f5c:	9315      	str	r3, [sp, #84]	; 0x54
 8009f5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d0f0      	beq.n	8009f46 <__gethex+0x386>
 8009f64:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009f68:	f104 0314 	add.w	r3, r4, #20
 8009f6c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009f70:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009f74:	f04f 0c00 	mov.w	ip, #0
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f7e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009f82:	d01c      	beq.n	8009fbe <__gethex+0x3fe>
 8009f84:	3201      	adds	r2, #1
 8009f86:	6002      	str	r2, [r0, #0]
 8009f88:	2f02      	cmp	r7, #2
 8009f8a:	f104 0314 	add.w	r3, r4, #20
 8009f8e:	d13f      	bne.n	800a010 <__gethex+0x450>
 8009f90:	f8d8 2000 	ldr.w	r2, [r8]
 8009f94:	3a01      	subs	r2, #1
 8009f96:	42b2      	cmp	r2, r6
 8009f98:	d10a      	bne.n	8009fb0 <__gethex+0x3f0>
 8009f9a:	1171      	asrs	r1, r6, #5
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009fa2:	f006 061f 	and.w	r6, r6, #31
 8009fa6:	fa02 f606 	lsl.w	r6, r2, r6
 8009faa:	421e      	tst	r6, r3
 8009fac:	bf18      	it	ne
 8009fae:	4617      	movne	r7, r2
 8009fb0:	f047 0720 	orr.w	r7, r7, #32
 8009fb4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009fb6:	601c      	str	r4, [r3, #0]
 8009fb8:	9b04      	ldr	r3, [sp, #16]
 8009fba:	601d      	str	r5, [r3, #0]
 8009fbc:	e695      	b.n	8009cea <__gethex+0x12a>
 8009fbe:	4299      	cmp	r1, r3
 8009fc0:	f843 cc04 	str.w	ip, [r3, #-4]
 8009fc4:	d8d8      	bhi.n	8009f78 <__gethex+0x3b8>
 8009fc6:	68a3      	ldr	r3, [r4, #8]
 8009fc8:	459b      	cmp	fp, r3
 8009fca:	db19      	blt.n	800a000 <__gethex+0x440>
 8009fcc:	6861      	ldr	r1, [r4, #4]
 8009fce:	ee18 0a10 	vmov	r0, s16
 8009fd2:	3101      	adds	r1, #1
 8009fd4:	f000 f92c 	bl	800a230 <_Balloc>
 8009fd8:	4681      	mov	r9, r0
 8009fda:	b918      	cbnz	r0, 8009fe4 <__gethex+0x424>
 8009fdc:	4b1a      	ldr	r3, [pc, #104]	; (800a048 <__gethex+0x488>)
 8009fde:	4602      	mov	r2, r0
 8009fe0:	2184      	movs	r1, #132	; 0x84
 8009fe2:	e6a8      	b.n	8009d36 <__gethex+0x176>
 8009fe4:	6922      	ldr	r2, [r4, #16]
 8009fe6:	3202      	adds	r2, #2
 8009fe8:	f104 010c 	add.w	r1, r4, #12
 8009fec:	0092      	lsls	r2, r2, #2
 8009fee:	300c      	adds	r0, #12
 8009ff0:	f7fe fd78 	bl	8008ae4 <memcpy>
 8009ff4:	4621      	mov	r1, r4
 8009ff6:	ee18 0a10 	vmov	r0, s16
 8009ffa:	f000 f959 	bl	800a2b0 <_Bfree>
 8009ffe:	464c      	mov	r4, r9
 800a000:	6923      	ldr	r3, [r4, #16]
 800a002:	1c5a      	adds	r2, r3, #1
 800a004:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a008:	6122      	str	r2, [r4, #16]
 800a00a:	2201      	movs	r2, #1
 800a00c:	615a      	str	r2, [r3, #20]
 800a00e:	e7bb      	b.n	8009f88 <__gethex+0x3c8>
 800a010:	6922      	ldr	r2, [r4, #16]
 800a012:	455a      	cmp	r2, fp
 800a014:	dd0b      	ble.n	800a02e <__gethex+0x46e>
 800a016:	2101      	movs	r1, #1
 800a018:	4620      	mov	r0, r4
 800a01a:	f7ff fd69 	bl	8009af0 <rshift>
 800a01e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a022:	3501      	adds	r5, #1
 800a024:	42ab      	cmp	r3, r5
 800a026:	f6ff aed0 	blt.w	8009dca <__gethex+0x20a>
 800a02a:	2701      	movs	r7, #1
 800a02c:	e7c0      	b.n	8009fb0 <__gethex+0x3f0>
 800a02e:	f016 061f 	ands.w	r6, r6, #31
 800a032:	d0fa      	beq.n	800a02a <__gethex+0x46a>
 800a034:	4453      	add	r3, sl
 800a036:	f1c6 0620 	rsb	r6, r6, #32
 800a03a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a03e:	f000 f9e9 	bl	800a414 <__hi0bits>
 800a042:	42b0      	cmp	r0, r6
 800a044:	dbe7      	blt.n	800a016 <__gethex+0x456>
 800a046:	e7f0      	b.n	800a02a <__gethex+0x46a>
 800a048:	0800c900 	.word	0x0800c900

0800a04c <L_shift>:
 800a04c:	f1c2 0208 	rsb	r2, r2, #8
 800a050:	0092      	lsls	r2, r2, #2
 800a052:	b570      	push	{r4, r5, r6, lr}
 800a054:	f1c2 0620 	rsb	r6, r2, #32
 800a058:	6843      	ldr	r3, [r0, #4]
 800a05a:	6804      	ldr	r4, [r0, #0]
 800a05c:	fa03 f506 	lsl.w	r5, r3, r6
 800a060:	432c      	orrs	r4, r5
 800a062:	40d3      	lsrs	r3, r2
 800a064:	6004      	str	r4, [r0, #0]
 800a066:	f840 3f04 	str.w	r3, [r0, #4]!
 800a06a:	4288      	cmp	r0, r1
 800a06c:	d3f4      	bcc.n	800a058 <L_shift+0xc>
 800a06e:	bd70      	pop	{r4, r5, r6, pc}

0800a070 <__match>:
 800a070:	b530      	push	{r4, r5, lr}
 800a072:	6803      	ldr	r3, [r0, #0]
 800a074:	3301      	adds	r3, #1
 800a076:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a07a:	b914      	cbnz	r4, 800a082 <__match+0x12>
 800a07c:	6003      	str	r3, [r0, #0]
 800a07e:	2001      	movs	r0, #1
 800a080:	bd30      	pop	{r4, r5, pc}
 800a082:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a086:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a08a:	2d19      	cmp	r5, #25
 800a08c:	bf98      	it	ls
 800a08e:	3220      	addls	r2, #32
 800a090:	42a2      	cmp	r2, r4
 800a092:	d0f0      	beq.n	800a076 <__match+0x6>
 800a094:	2000      	movs	r0, #0
 800a096:	e7f3      	b.n	800a080 <__match+0x10>

0800a098 <__hexnan>:
 800a098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a09c:	680b      	ldr	r3, [r1, #0]
 800a09e:	115e      	asrs	r6, r3, #5
 800a0a0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a0a4:	f013 031f 	ands.w	r3, r3, #31
 800a0a8:	b087      	sub	sp, #28
 800a0aa:	bf18      	it	ne
 800a0ac:	3604      	addne	r6, #4
 800a0ae:	2500      	movs	r5, #0
 800a0b0:	1f37      	subs	r7, r6, #4
 800a0b2:	4690      	mov	r8, r2
 800a0b4:	6802      	ldr	r2, [r0, #0]
 800a0b6:	9301      	str	r3, [sp, #4]
 800a0b8:	4682      	mov	sl, r0
 800a0ba:	f846 5c04 	str.w	r5, [r6, #-4]
 800a0be:	46b9      	mov	r9, r7
 800a0c0:	463c      	mov	r4, r7
 800a0c2:	9502      	str	r5, [sp, #8]
 800a0c4:	46ab      	mov	fp, r5
 800a0c6:	7851      	ldrb	r1, [r2, #1]
 800a0c8:	1c53      	adds	r3, r2, #1
 800a0ca:	9303      	str	r3, [sp, #12]
 800a0cc:	b341      	cbz	r1, 800a120 <__hexnan+0x88>
 800a0ce:	4608      	mov	r0, r1
 800a0d0:	9205      	str	r2, [sp, #20]
 800a0d2:	9104      	str	r1, [sp, #16]
 800a0d4:	f7ff fd5e 	bl	8009b94 <__hexdig_fun>
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	d14f      	bne.n	800a17c <__hexnan+0xe4>
 800a0dc:	9904      	ldr	r1, [sp, #16]
 800a0de:	9a05      	ldr	r2, [sp, #20]
 800a0e0:	2920      	cmp	r1, #32
 800a0e2:	d818      	bhi.n	800a116 <__hexnan+0x7e>
 800a0e4:	9b02      	ldr	r3, [sp, #8]
 800a0e6:	459b      	cmp	fp, r3
 800a0e8:	dd13      	ble.n	800a112 <__hexnan+0x7a>
 800a0ea:	454c      	cmp	r4, r9
 800a0ec:	d206      	bcs.n	800a0fc <__hexnan+0x64>
 800a0ee:	2d07      	cmp	r5, #7
 800a0f0:	dc04      	bgt.n	800a0fc <__hexnan+0x64>
 800a0f2:	462a      	mov	r2, r5
 800a0f4:	4649      	mov	r1, r9
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	f7ff ffa8 	bl	800a04c <L_shift>
 800a0fc:	4544      	cmp	r4, r8
 800a0fe:	d950      	bls.n	800a1a2 <__hexnan+0x10a>
 800a100:	2300      	movs	r3, #0
 800a102:	f1a4 0904 	sub.w	r9, r4, #4
 800a106:	f844 3c04 	str.w	r3, [r4, #-4]
 800a10a:	f8cd b008 	str.w	fp, [sp, #8]
 800a10e:	464c      	mov	r4, r9
 800a110:	461d      	mov	r5, r3
 800a112:	9a03      	ldr	r2, [sp, #12]
 800a114:	e7d7      	b.n	800a0c6 <__hexnan+0x2e>
 800a116:	2929      	cmp	r1, #41	; 0x29
 800a118:	d156      	bne.n	800a1c8 <__hexnan+0x130>
 800a11a:	3202      	adds	r2, #2
 800a11c:	f8ca 2000 	str.w	r2, [sl]
 800a120:	f1bb 0f00 	cmp.w	fp, #0
 800a124:	d050      	beq.n	800a1c8 <__hexnan+0x130>
 800a126:	454c      	cmp	r4, r9
 800a128:	d206      	bcs.n	800a138 <__hexnan+0xa0>
 800a12a:	2d07      	cmp	r5, #7
 800a12c:	dc04      	bgt.n	800a138 <__hexnan+0xa0>
 800a12e:	462a      	mov	r2, r5
 800a130:	4649      	mov	r1, r9
 800a132:	4620      	mov	r0, r4
 800a134:	f7ff ff8a 	bl	800a04c <L_shift>
 800a138:	4544      	cmp	r4, r8
 800a13a:	d934      	bls.n	800a1a6 <__hexnan+0x10e>
 800a13c:	f1a8 0204 	sub.w	r2, r8, #4
 800a140:	4623      	mov	r3, r4
 800a142:	f853 1b04 	ldr.w	r1, [r3], #4
 800a146:	f842 1f04 	str.w	r1, [r2, #4]!
 800a14a:	429f      	cmp	r7, r3
 800a14c:	d2f9      	bcs.n	800a142 <__hexnan+0xaa>
 800a14e:	1b3b      	subs	r3, r7, r4
 800a150:	f023 0303 	bic.w	r3, r3, #3
 800a154:	3304      	adds	r3, #4
 800a156:	3401      	adds	r4, #1
 800a158:	3e03      	subs	r6, #3
 800a15a:	42b4      	cmp	r4, r6
 800a15c:	bf88      	it	hi
 800a15e:	2304      	movhi	r3, #4
 800a160:	4443      	add	r3, r8
 800a162:	2200      	movs	r2, #0
 800a164:	f843 2b04 	str.w	r2, [r3], #4
 800a168:	429f      	cmp	r7, r3
 800a16a:	d2fb      	bcs.n	800a164 <__hexnan+0xcc>
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	b91b      	cbnz	r3, 800a178 <__hexnan+0xe0>
 800a170:	4547      	cmp	r7, r8
 800a172:	d127      	bne.n	800a1c4 <__hexnan+0x12c>
 800a174:	2301      	movs	r3, #1
 800a176:	603b      	str	r3, [r7, #0]
 800a178:	2005      	movs	r0, #5
 800a17a:	e026      	b.n	800a1ca <__hexnan+0x132>
 800a17c:	3501      	adds	r5, #1
 800a17e:	2d08      	cmp	r5, #8
 800a180:	f10b 0b01 	add.w	fp, fp, #1
 800a184:	dd06      	ble.n	800a194 <__hexnan+0xfc>
 800a186:	4544      	cmp	r4, r8
 800a188:	d9c3      	bls.n	800a112 <__hexnan+0x7a>
 800a18a:	2300      	movs	r3, #0
 800a18c:	f844 3c04 	str.w	r3, [r4, #-4]
 800a190:	2501      	movs	r5, #1
 800a192:	3c04      	subs	r4, #4
 800a194:	6822      	ldr	r2, [r4, #0]
 800a196:	f000 000f 	and.w	r0, r0, #15
 800a19a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a19e:	6022      	str	r2, [r4, #0]
 800a1a0:	e7b7      	b.n	800a112 <__hexnan+0x7a>
 800a1a2:	2508      	movs	r5, #8
 800a1a4:	e7b5      	b.n	800a112 <__hexnan+0x7a>
 800a1a6:	9b01      	ldr	r3, [sp, #4]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d0df      	beq.n	800a16c <__hexnan+0xd4>
 800a1ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a1b0:	f1c3 0320 	rsb	r3, r3, #32
 800a1b4:	fa22 f303 	lsr.w	r3, r2, r3
 800a1b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a1bc:	401a      	ands	r2, r3
 800a1be:	f846 2c04 	str.w	r2, [r6, #-4]
 800a1c2:	e7d3      	b.n	800a16c <__hexnan+0xd4>
 800a1c4:	3f04      	subs	r7, #4
 800a1c6:	e7d1      	b.n	800a16c <__hexnan+0xd4>
 800a1c8:	2004      	movs	r0, #4
 800a1ca:	b007      	add	sp, #28
 800a1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a1d0 <_lseek_r>:
 800a1d0:	b538      	push	{r3, r4, r5, lr}
 800a1d2:	4d07      	ldr	r5, [pc, #28]	; (800a1f0 <_lseek_r+0x20>)
 800a1d4:	4604      	mov	r4, r0
 800a1d6:	4608      	mov	r0, r1
 800a1d8:	4611      	mov	r1, r2
 800a1da:	2200      	movs	r2, #0
 800a1dc:	602a      	str	r2, [r5, #0]
 800a1de:	461a      	mov	r2, r3
 800a1e0:	f7fa f864 	bl	80042ac <_lseek>
 800a1e4:	1c43      	adds	r3, r0, #1
 800a1e6:	d102      	bne.n	800a1ee <_lseek_r+0x1e>
 800a1e8:	682b      	ldr	r3, [r5, #0]
 800a1ea:	b103      	cbz	r3, 800a1ee <_lseek_r+0x1e>
 800a1ec:	6023      	str	r3, [r4, #0]
 800a1ee:	bd38      	pop	{r3, r4, r5, pc}
 800a1f0:	200005e4 	.word	0x200005e4

0800a1f4 <__ascii_mbtowc>:
 800a1f4:	b082      	sub	sp, #8
 800a1f6:	b901      	cbnz	r1, 800a1fa <__ascii_mbtowc+0x6>
 800a1f8:	a901      	add	r1, sp, #4
 800a1fa:	b142      	cbz	r2, 800a20e <__ascii_mbtowc+0x1a>
 800a1fc:	b14b      	cbz	r3, 800a212 <__ascii_mbtowc+0x1e>
 800a1fe:	7813      	ldrb	r3, [r2, #0]
 800a200:	600b      	str	r3, [r1, #0]
 800a202:	7812      	ldrb	r2, [r2, #0]
 800a204:	1e10      	subs	r0, r2, #0
 800a206:	bf18      	it	ne
 800a208:	2001      	movne	r0, #1
 800a20a:	b002      	add	sp, #8
 800a20c:	4770      	bx	lr
 800a20e:	4610      	mov	r0, r2
 800a210:	e7fb      	b.n	800a20a <__ascii_mbtowc+0x16>
 800a212:	f06f 0001 	mvn.w	r0, #1
 800a216:	e7f8      	b.n	800a20a <__ascii_mbtowc+0x16>

0800a218 <__malloc_lock>:
 800a218:	4801      	ldr	r0, [pc, #4]	; (800a220 <__malloc_lock+0x8>)
 800a21a:	f7fa ba6e 	b.w	80046fa <__retarget_lock_acquire_recursive>
 800a21e:	bf00      	nop
 800a220:	200005d4 	.word	0x200005d4

0800a224 <__malloc_unlock>:
 800a224:	4801      	ldr	r0, [pc, #4]	; (800a22c <__malloc_unlock+0x8>)
 800a226:	f7fa ba7c 	b.w	8004722 <__retarget_lock_release_recursive>
 800a22a:	bf00      	nop
 800a22c:	200005d4 	.word	0x200005d4

0800a230 <_Balloc>:
 800a230:	b570      	push	{r4, r5, r6, lr}
 800a232:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a234:	4604      	mov	r4, r0
 800a236:	460d      	mov	r5, r1
 800a238:	b976      	cbnz	r6, 800a258 <_Balloc+0x28>
 800a23a:	2010      	movs	r0, #16
 800a23c:	f7fe fc42 	bl	8008ac4 <malloc>
 800a240:	4602      	mov	r2, r0
 800a242:	6260      	str	r0, [r4, #36]	; 0x24
 800a244:	b920      	cbnz	r0, 800a250 <_Balloc+0x20>
 800a246:	4b18      	ldr	r3, [pc, #96]	; (800a2a8 <_Balloc+0x78>)
 800a248:	4818      	ldr	r0, [pc, #96]	; (800a2ac <_Balloc+0x7c>)
 800a24a:	2166      	movs	r1, #102	; 0x66
 800a24c:	f001 fc9c 	bl	800bb88 <__assert_func>
 800a250:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a254:	6006      	str	r6, [r0, #0]
 800a256:	60c6      	str	r6, [r0, #12]
 800a258:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a25a:	68f3      	ldr	r3, [r6, #12]
 800a25c:	b183      	cbz	r3, 800a280 <_Balloc+0x50>
 800a25e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a266:	b9b8      	cbnz	r0, 800a298 <_Balloc+0x68>
 800a268:	2101      	movs	r1, #1
 800a26a:	fa01 f605 	lsl.w	r6, r1, r5
 800a26e:	1d72      	adds	r2, r6, #5
 800a270:	0092      	lsls	r2, r2, #2
 800a272:	4620      	mov	r0, r4
 800a274:	f000 fc9d 	bl	800abb2 <_calloc_r>
 800a278:	b160      	cbz	r0, 800a294 <_Balloc+0x64>
 800a27a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a27e:	e00e      	b.n	800a29e <_Balloc+0x6e>
 800a280:	2221      	movs	r2, #33	; 0x21
 800a282:	2104      	movs	r1, #4
 800a284:	4620      	mov	r0, r4
 800a286:	f000 fc94 	bl	800abb2 <_calloc_r>
 800a28a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a28c:	60f0      	str	r0, [r6, #12]
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d1e4      	bne.n	800a25e <_Balloc+0x2e>
 800a294:	2000      	movs	r0, #0
 800a296:	bd70      	pop	{r4, r5, r6, pc}
 800a298:	6802      	ldr	r2, [r0, #0]
 800a29a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a29e:	2300      	movs	r3, #0
 800a2a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a2a4:	e7f7      	b.n	800a296 <_Balloc+0x66>
 800a2a6:	bf00      	nop
 800a2a8:	0800c98c 	.word	0x0800c98c
 800a2ac:	0800c9a3 	.word	0x0800c9a3

0800a2b0 <_Bfree>:
 800a2b0:	b570      	push	{r4, r5, r6, lr}
 800a2b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a2b4:	4605      	mov	r5, r0
 800a2b6:	460c      	mov	r4, r1
 800a2b8:	b976      	cbnz	r6, 800a2d8 <_Bfree+0x28>
 800a2ba:	2010      	movs	r0, #16
 800a2bc:	f7fe fc02 	bl	8008ac4 <malloc>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	6268      	str	r0, [r5, #36]	; 0x24
 800a2c4:	b920      	cbnz	r0, 800a2d0 <_Bfree+0x20>
 800a2c6:	4b09      	ldr	r3, [pc, #36]	; (800a2ec <_Bfree+0x3c>)
 800a2c8:	4809      	ldr	r0, [pc, #36]	; (800a2f0 <_Bfree+0x40>)
 800a2ca:	218a      	movs	r1, #138	; 0x8a
 800a2cc:	f001 fc5c 	bl	800bb88 <__assert_func>
 800a2d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2d4:	6006      	str	r6, [r0, #0]
 800a2d6:	60c6      	str	r6, [r0, #12]
 800a2d8:	b13c      	cbz	r4, 800a2ea <_Bfree+0x3a>
 800a2da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a2dc:	6862      	ldr	r2, [r4, #4]
 800a2de:	68db      	ldr	r3, [r3, #12]
 800a2e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a2e4:	6021      	str	r1, [r4, #0]
 800a2e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a2ea:	bd70      	pop	{r4, r5, r6, pc}
 800a2ec:	0800c98c 	.word	0x0800c98c
 800a2f0:	0800c9a3 	.word	0x0800c9a3

0800a2f4 <__multadd>:
 800a2f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2f8:	690d      	ldr	r5, [r1, #16]
 800a2fa:	4607      	mov	r7, r0
 800a2fc:	460c      	mov	r4, r1
 800a2fe:	461e      	mov	r6, r3
 800a300:	f101 0c14 	add.w	ip, r1, #20
 800a304:	2000      	movs	r0, #0
 800a306:	f8dc 3000 	ldr.w	r3, [ip]
 800a30a:	b299      	uxth	r1, r3
 800a30c:	fb02 6101 	mla	r1, r2, r1, r6
 800a310:	0c1e      	lsrs	r6, r3, #16
 800a312:	0c0b      	lsrs	r3, r1, #16
 800a314:	fb02 3306 	mla	r3, r2, r6, r3
 800a318:	b289      	uxth	r1, r1
 800a31a:	3001      	adds	r0, #1
 800a31c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a320:	4285      	cmp	r5, r0
 800a322:	f84c 1b04 	str.w	r1, [ip], #4
 800a326:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a32a:	dcec      	bgt.n	800a306 <__multadd+0x12>
 800a32c:	b30e      	cbz	r6, 800a372 <__multadd+0x7e>
 800a32e:	68a3      	ldr	r3, [r4, #8]
 800a330:	42ab      	cmp	r3, r5
 800a332:	dc19      	bgt.n	800a368 <__multadd+0x74>
 800a334:	6861      	ldr	r1, [r4, #4]
 800a336:	4638      	mov	r0, r7
 800a338:	3101      	adds	r1, #1
 800a33a:	f7ff ff79 	bl	800a230 <_Balloc>
 800a33e:	4680      	mov	r8, r0
 800a340:	b928      	cbnz	r0, 800a34e <__multadd+0x5a>
 800a342:	4602      	mov	r2, r0
 800a344:	4b0c      	ldr	r3, [pc, #48]	; (800a378 <__multadd+0x84>)
 800a346:	480d      	ldr	r0, [pc, #52]	; (800a37c <__multadd+0x88>)
 800a348:	21b5      	movs	r1, #181	; 0xb5
 800a34a:	f001 fc1d 	bl	800bb88 <__assert_func>
 800a34e:	6922      	ldr	r2, [r4, #16]
 800a350:	3202      	adds	r2, #2
 800a352:	f104 010c 	add.w	r1, r4, #12
 800a356:	0092      	lsls	r2, r2, #2
 800a358:	300c      	adds	r0, #12
 800a35a:	f7fe fbc3 	bl	8008ae4 <memcpy>
 800a35e:	4621      	mov	r1, r4
 800a360:	4638      	mov	r0, r7
 800a362:	f7ff ffa5 	bl	800a2b0 <_Bfree>
 800a366:	4644      	mov	r4, r8
 800a368:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a36c:	3501      	adds	r5, #1
 800a36e:	615e      	str	r6, [r3, #20]
 800a370:	6125      	str	r5, [r4, #16]
 800a372:	4620      	mov	r0, r4
 800a374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a378:	0800c900 	.word	0x0800c900
 800a37c:	0800c9a3 	.word	0x0800c9a3

0800a380 <__s2b>:
 800a380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a384:	460c      	mov	r4, r1
 800a386:	4615      	mov	r5, r2
 800a388:	461f      	mov	r7, r3
 800a38a:	2209      	movs	r2, #9
 800a38c:	3308      	adds	r3, #8
 800a38e:	4606      	mov	r6, r0
 800a390:	fb93 f3f2 	sdiv	r3, r3, r2
 800a394:	2100      	movs	r1, #0
 800a396:	2201      	movs	r2, #1
 800a398:	429a      	cmp	r2, r3
 800a39a:	db09      	blt.n	800a3b0 <__s2b+0x30>
 800a39c:	4630      	mov	r0, r6
 800a39e:	f7ff ff47 	bl	800a230 <_Balloc>
 800a3a2:	b940      	cbnz	r0, 800a3b6 <__s2b+0x36>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	4b19      	ldr	r3, [pc, #100]	; (800a40c <__s2b+0x8c>)
 800a3a8:	4819      	ldr	r0, [pc, #100]	; (800a410 <__s2b+0x90>)
 800a3aa:	21ce      	movs	r1, #206	; 0xce
 800a3ac:	f001 fbec 	bl	800bb88 <__assert_func>
 800a3b0:	0052      	lsls	r2, r2, #1
 800a3b2:	3101      	adds	r1, #1
 800a3b4:	e7f0      	b.n	800a398 <__s2b+0x18>
 800a3b6:	9b08      	ldr	r3, [sp, #32]
 800a3b8:	6143      	str	r3, [r0, #20]
 800a3ba:	2d09      	cmp	r5, #9
 800a3bc:	f04f 0301 	mov.w	r3, #1
 800a3c0:	6103      	str	r3, [r0, #16]
 800a3c2:	dd16      	ble.n	800a3f2 <__s2b+0x72>
 800a3c4:	f104 0909 	add.w	r9, r4, #9
 800a3c8:	46c8      	mov	r8, r9
 800a3ca:	442c      	add	r4, r5
 800a3cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a3d0:	4601      	mov	r1, r0
 800a3d2:	3b30      	subs	r3, #48	; 0x30
 800a3d4:	220a      	movs	r2, #10
 800a3d6:	4630      	mov	r0, r6
 800a3d8:	f7ff ff8c 	bl	800a2f4 <__multadd>
 800a3dc:	45a0      	cmp	r8, r4
 800a3de:	d1f5      	bne.n	800a3cc <__s2b+0x4c>
 800a3e0:	f1a5 0408 	sub.w	r4, r5, #8
 800a3e4:	444c      	add	r4, r9
 800a3e6:	1b2d      	subs	r5, r5, r4
 800a3e8:	1963      	adds	r3, r4, r5
 800a3ea:	42bb      	cmp	r3, r7
 800a3ec:	db04      	blt.n	800a3f8 <__s2b+0x78>
 800a3ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3f2:	340a      	adds	r4, #10
 800a3f4:	2509      	movs	r5, #9
 800a3f6:	e7f6      	b.n	800a3e6 <__s2b+0x66>
 800a3f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a3fc:	4601      	mov	r1, r0
 800a3fe:	3b30      	subs	r3, #48	; 0x30
 800a400:	220a      	movs	r2, #10
 800a402:	4630      	mov	r0, r6
 800a404:	f7ff ff76 	bl	800a2f4 <__multadd>
 800a408:	e7ee      	b.n	800a3e8 <__s2b+0x68>
 800a40a:	bf00      	nop
 800a40c:	0800c900 	.word	0x0800c900
 800a410:	0800c9a3 	.word	0x0800c9a3

0800a414 <__hi0bits>:
 800a414:	0c03      	lsrs	r3, r0, #16
 800a416:	041b      	lsls	r3, r3, #16
 800a418:	b9d3      	cbnz	r3, 800a450 <__hi0bits+0x3c>
 800a41a:	0400      	lsls	r0, r0, #16
 800a41c:	2310      	movs	r3, #16
 800a41e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a422:	bf04      	itt	eq
 800a424:	0200      	lsleq	r0, r0, #8
 800a426:	3308      	addeq	r3, #8
 800a428:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a42c:	bf04      	itt	eq
 800a42e:	0100      	lsleq	r0, r0, #4
 800a430:	3304      	addeq	r3, #4
 800a432:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a436:	bf04      	itt	eq
 800a438:	0080      	lsleq	r0, r0, #2
 800a43a:	3302      	addeq	r3, #2
 800a43c:	2800      	cmp	r0, #0
 800a43e:	db05      	blt.n	800a44c <__hi0bits+0x38>
 800a440:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a444:	f103 0301 	add.w	r3, r3, #1
 800a448:	bf08      	it	eq
 800a44a:	2320      	moveq	r3, #32
 800a44c:	4618      	mov	r0, r3
 800a44e:	4770      	bx	lr
 800a450:	2300      	movs	r3, #0
 800a452:	e7e4      	b.n	800a41e <__hi0bits+0xa>

0800a454 <__lo0bits>:
 800a454:	6803      	ldr	r3, [r0, #0]
 800a456:	f013 0207 	ands.w	r2, r3, #7
 800a45a:	4601      	mov	r1, r0
 800a45c:	d00b      	beq.n	800a476 <__lo0bits+0x22>
 800a45e:	07da      	lsls	r2, r3, #31
 800a460:	d423      	bmi.n	800a4aa <__lo0bits+0x56>
 800a462:	0798      	lsls	r0, r3, #30
 800a464:	bf49      	itett	mi
 800a466:	085b      	lsrmi	r3, r3, #1
 800a468:	089b      	lsrpl	r3, r3, #2
 800a46a:	2001      	movmi	r0, #1
 800a46c:	600b      	strmi	r3, [r1, #0]
 800a46e:	bf5c      	itt	pl
 800a470:	600b      	strpl	r3, [r1, #0]
 800a472:	2002      	movpl	r0, #2
 800a474:	4770      	bx	lr
 800a476:	b298      	uxth	r0, r3
 800a478:	b9a8      	cbnz	r0, 800a4a6 <__lo0bits+0x52>
 800a47a:	0c1b      	lsrs	r3, r3, #16
 800a47c:	2010      	movs	r0, #16
 800a47e:	b2da      	uxtb	r2, r3
 800a480:	b90a      	cbnz	r2, 800a486 <__lo0bits+0x32>
 800a482:	3008      	adds	r0, #8
 800a484:	0a1b      	lsrs	r3, r3, #8
 800a486:	071a      	lsls	r2, r3, #28
 800a488:	bf04      	itt	eq
 800a48a:	091b      	lsreq	r3, r3, #4
 800a48c:	3004      	addeq	r0, #4
 800a48e:	079a      	lsls	r2, r3, #30
 800a490:	bf04      	itt	eq
 800a492:	089b      	lsreq	r3, r3, #2
 800a494:	3002      	addeq	r0, #2
 800a496:	07da      	lsls	r2, r3, #31
 800a498:	d403      	bmi.n	800a4a2 <__lo0bits+0x4e>
 800a49a:	085b      	lsrs	r3, r3, #1
 800a49c:	f100 0001 	add.w	r0, r0, #1
 800a4a0:	d005      	beq.n	800a4ae <__lo0bits+0x5a>
 800a4a2:	600b      	str	r3, [r1, #0]
 800a4a4:	4770      	bx	lr
 800a4a6:	4610      	mov	r0, r2
 800a4a8:	e7e9      	b.n	800a47e <__lo0bits+0x2a>
 800a4aa:	2000      	movs	r0, #0
 800a4ac:	4770      	bx	lr
 800a4ae:	2020      	movs	r0, #32
 800a4b0:	4770      	bx	lr
	...

0800a4b4 <__i2b>:
 800a4b4:	b510      	push	{r4, lr}
 800a4b6:	460c      	mov	r4, r1
 800a4b8:	2101      	movs	r1, #1
 800a4ba:	f7ff feb9 	bl	800a230 <_Balloc>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	b928      	cbnz	r0, 800a4ce <__i2b+0x1a>
 800a4c2:	4b05      	ldr	r3, [pc, #20]	; (800a4d8 <__i2b+0x24>)
 800a4c4:	4805      	ldr	r0, [pc, #20]	; (800a4dc <__i2b+0x28>)
 800a4c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a4ca:	f001 fb5d 	bl	800bb88 <__assert_func>
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	6144      	str	r4, [r0, #20]
 800a4d2:	6103      	str	r3, [r0, #16]
 800a4d4:	bd10      	pop	{r4, pc}
 800a4d6:	bf00      	nop
 800a4d8:	0800c900 	.word	0x0800c900
 800a4dc:	0800c9a3 	.word	0x0800c9a3

0800a4e0 <__multiply>:
 800a4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e4:	4691      	mov	r9, r2
 800a4e6:	690a      	ldr	r2, [r1, #16]
 800a4e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	bfb8      	it	lt
 800a4f0:	460b      	movlt	r3, r1
 800a4f2:	460c      	mov	r4, r1
 800a4f4:	bfbc      	itt	lt
 800a4f6:	464c      	movlt	r4, r9
 800a4f8:	4699      	movlt	r9, r3
 800a4fa:	6927      	ldr	r7, [r4, #16]
 800a4fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a500:	68a3      	ldr	r3, [r4, #8]
 800a502:	6861      	ldr	r1, [r4, #4]
 800a504:	eb07 060a 	add.w	r6, r7, sl
 800a508:	42b3      	cmp	r3, r6
 800a50a:	b085      	sub	sp, #20
 800a50c:	bfb8      	it	lt
 800a50e:	3101      	addlt	r1, #1
 800a510:	f7ff fe8e 	bl	800a230 <_Balloc>
 800a514:	b930      	cbnz	r0, 800a524 <__multiply+0x44>
 800a516:	4602      	mov	r2, r0
 800a518:	4b44      	ldr	r3, [pc, #272]	; (800a62c <__multiply+0x14c>)
 800a51a:	4845      	ldr	r0, [pc, #276]	; (800a630 <__multiply+0x150>)
 800a51c:	f240 115d 	movw	r1, #349	; 0x15d
 800a520:	f001 fb32 	bl	800bb88 <__assert_func>
 800a524:	f100 0514 	add.w	r5, r0, #20
 800a528:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a52c:	462b      	mov	r3, r5
 800a52e:	2200      	movs	r2, #0
 800a530:	4543      	cmp	r3, r8
 800a532:	d321      	bcc.n	800a578 <__multiply+0x98>
 800a534:	f104 0314 	add.w	r3, r4, #20
 800a538:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a53c:	f109 0314 	add.w	r3, r9, #20
 800a540:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a544:	9202      	str	r2, [sp, #8]
 800a546:	1b3a      	subs	r2, r7, r4
 800a548:	3a15      	subs	r2, #21
 800a54a:	f022 0203 	bic.w	r2, r2, #3
 800a54e:	3204      	adds	r2, #4
 800a550:	f104 0115 	add.w	r1, r4, #21
 800a554:	428f      	cmp	r7, r1
 800a556:	bf38      	it	cc
 800a558:	2204      	movcc	r2, #4
 800a55a:	9201      	str	r2, [sp, #4]
 800a55c:	9a02      	ldr	r2, [sp, #8]
 800a55e:	9303      	str	r3, [sp, #12]
 800a560:	429a      	cmp	r2, r3
 800a562:	d80c      	bhi.n	800a57e <__multiply+0x9e>
 800a564:	2e00      	cmp	r6, #0
 800a566:	dd03      	ble.n	800a570 <__multiply+0x90>
 800a568:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d05a      	beq.n	800a626 <__multiply+0x146>
 800a570:	6106      	str	r6, [r0, #16]
 800a572:	b005      	add	sp, #20
 800a574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a578:	f843 2b04 	str.w	r2, [r3], #4
 800a57c:	e7d8      	b.n	800a530 <__multiply+0x50>
 800a57e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a582:	f1ba 0f00 	cmp.w	sl, #0
 800a586:	d024      	beq.n	800a5d2 <__multiply+0xf2>
 800a588:	f104 0e14 	add.w	lr, r4, #20
 800a58c:	46a9      	mov	r9, r5
 800a58e:	f04f 0c00 	mov.w	ip, #0
 800a592:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a596:	f8d9 1000 	ldr.w	r1, [r9]
 800a59a:	fa1f fb82 	uxth.w	fp, r2
 800a59e:	b289      	uxth	r1, r1
 800a5a0:	fb0a 110b 	mla	r1, sl, fp, r1
 800a5a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a5a8:	f8d9 2000 	ldr.w	r2, [r9]
 800a5ac:	4461      	add	r1, ip
 800a5ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a5b2:	fb0a c20b 	mla	r2, sl, fp, ip
 800a5b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a5ba:	b289      	uxth	r1, r1
 800a5bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a5c0:	4577      	cmp	r7, lr
 800a5c2:	f849 1b04 	str.w	r1, [r9], #4
 800a5c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a5ca:	d8e2      	bhi.n	800a592 <__multiply+0xb2>
 800a5cc:	9a01      	ldr	r2, [sp, #4]
 800a5ce:	f845 c002 	str.w	ip, [r5, r2]
 800a5d2:	9a03      	ldr	r2, [sp, #12]
 800a5d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a5d8:	3304      	adds	r3, #4
 800a5da:	f1b9 0f00 	cmp.w	r9, #0
 800a5de:	d020      	beq.n	800a622 <__multiply+0x142>
 800a5e0:	6829      	ldr	r1, [r5, #0]
 800a5e2:	f104 0c14 	add.w	ip, r4, #20
 800a5e6:	46ae      	mov	lr, r5
 800a5e8:	f04f 0a00 	mov.w	sl, #0
 800a5ec:	f8bc b000 	ldrh.w	fp, [ip]
 800a5f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a5f4:	fb09 220b 	mla	r2, r9, fp, r2
 800a5f8:	4492      	add	sl, r2
 800a5fa:	b289      	uxth	r1, r1
 800a5fc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a600:	f84e 1b04 	str.w	r1, [lr], #4
 800a604:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a608:	f8be 1000 	ldrh.w	r1, [lr]
 800a60c:	0c12      	lsrs	r2, r2, #16
 800a60e:	fb09 1102 	mla	r1, r9, r2, r1
 800a612:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a616:	4567      	cmp	r7, ip
 800a618:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a61c:	d8e6      	bhi.n	800a5ec <__multiply+0x10c>
 800a61e:	9a01      	ldr	r2, [sp, #4]
 800a620:	50a9      	str	r1, [r5, r2]
 800a622:	3504      	adds	r5, #4
 800a624:	e79a      	b.n	800a55c <__multiply+0x7c>
 800a626:	3e01      	subs	r6, #1
 800a628:	e79c      	b.n	800a564 <__multiply+0x84>
 800a62a:	bf00      	nop
 800a62c:	0800c900 	.word	0x0800c900
 800a630:	0800c9a3 	.word	0x0800c9a3

0800a634 <__pow5mult>:
 800a634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a638:	4615      	mov	r5, r2
 800a63a:	f012 0203 	ands.w	r2, r2, #3
 800a63e:	4606      	mov	r6, r0
 800a640:	460f      	mov	r7, r1
 800a642:	d007      	beq.n	800a654 <__pow5mult+0x20>
 800a644:	4c25      	ldr	r4, [pc, #148]	; (800a6dc <__pow5mult+0xa8>)
 800a646:	3a01      	subs	r2, #1
 800a648:	2300      	movs	r3, #0
 800a64a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a64e:	f7ff fe51 	bl	800a2f4 <__multadd>
 800a652:	4607      	mov	r7, r0
 800a654:	10ad      	asrs	r5, r5, #2
 800a656:	d03d      	beq.n	800a6d4 <__pow5mult+0xa0>
 800a658:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a65a:	b97c      	cbnz	r4, 800a67c <__pow5mult+0x48>
 800a65c:	2010      	movs	r0, #16
 800a65e:	f7fe fa31 	bl	8008ac4 <malloc>
 800a662:	4602      	mov	r2, r0
 800a664:	6270      	str	r0, [r6, #36]	; 0x24
 800a666:	b928      	cbnz	r0, 800a674 <__pow5mult+0x40>
 800a668:	4b1d      	ldr	r3, [pc, #116]	; (800a6e0 <__pow5mult+0xac>)
 800a66a:	481e      	ldr	r0, [pc, #120]	; (800a6e4 <__pow5mult+0xb0>)
 800a66c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a670:	f001 fa8a 	bl	800bb88 <__assert_func>
 800a674:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a678:	6004      	str	r4, [r0, #0]
 800a67a:	60c4      	str	r4, [r0, #12]
 800a67c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a680:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a684:	b94c      	cbnz	r4, 800a69a <__pow5mult+0x66>
 800a686:	f240 2171 	movw	r1, #625	; 0x271
 800a68a:	4630      	mov	r0, r6
 800a68c:	f7ff ff12 	bl	800a4b4 <__i2b>
 800a690:	2300      	movs	r3, #0
 800a692:	f8c8 0008 	str.w	r0, [r8, #8]
 800a696:	4604      	mov	r4, r0
 800a698:	6003      	str	r3, [r0, #0]
 800a69a:	f04f 0900 	mov.w	r9, #0
 800a69e:	07eb      	lsls	r3, r5, #31
 800a6a0:	d50a      	bpl.n	800a6b8 <__pow5mult+0x84>
 800a6a2:	4639      	mov	r1, r7
 800a6a4:	4622      	mov	r2, r4
 800a6a6:	4630      	mov	r0, r6
 800a6a8:	f7ff ff1a 	bl	800a4e0 <__multiply>
 800a6ac:	4639      	mov	r1, r7
 800a6ae:	4680      	mov	r8, r0
 800a6b0:	4630      	mov	r0, r6
 800a6b2:	f7ff fdfd 	bl	800a2b0 <_Bfree>
 800a6b6:	4647      	mov	r7, r8
 800a6b8:	106d      	asrs	r5, r5, #1
 800a6ba:	d00b      	beq.n	800a6d4 <__pow5mult+0xa0>
 800a6bc:	6820      	ldr	r0, [r4, #0]
 800a6be:	b938      	cbnz	r0, 800a6d0 <__pow5mult+0x9c>
 800a6c0:	4622      	mov	r2, r4
 800a6c2:	4621      	mov	r1, r4
 800a6c4:	4630      	mov	r0, r6
 800a6c6:	f7ff ff0b 	bl	800a4e0 <__multiply>
 800a6ca:	6020      	str	r0, [r4, #0]
 800a6cc:	f8c0 9000 	str.w	r9, [r0]
 800a6d0:	4604      	mov	r4, r0
 800a6d2:	e7e4      	b.n	800a69e <__pow5mult+0x6a>
 800a6d4:	4638      	mov	r0, r7
 800a6d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6da:	bf00      	nop
 800a6dc:	0800caf0 	.word	0x0800caf0
 800a6e0:	0800c98c 	.word	0x0800c98c
 800a6e4:	0800c9a3 	.word	0x0800c9a3

0800a6e8 <__lshift>:
 800a6e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6ec:	460c      	mov	r4, r1
 800a6ee:	6849      	ldr	r1, [r1, #4]
 800a6f0:	6923      	ldr	r3, [r4, #16]
 800a6f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a6f6:	68a3      	ldr	r3, [r4, #8]
 800a6f8:	4607      	mov	r7, r0
 800a6fa:	4691      	mov	r9, r2
 800a6fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a700:	f108 0601 	add.w	r6, r8, #1
 800a704:	42b3      	cmp	r3, r6
 800a706:	db0b      	blt.n	800a720 <__lshift+0x38>
 800a708:	4638      	mov	r0, r7
 800a70a:	f7ff fd91 	bl	800a230 <_Balloc>
 800a70e:	4605      	mov	r5, r0
 800a710:	b948      	cbnz	r0, 800a726 <__lshift+0x3e>
 800a712:	4602      	mov	r2, r0
 800a714:	4b2a      	ldr	r3, [pc, #168]	; (800a7c0 <__lshift+0xd8>)
 800a716:	482b      	ldr	r0, [pc, #172]	; (800a7c4 <__lshift+0xdc>)
 800a718:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a71c:	f001 fa34 	bl	800bb88 <__assert_func>
 800a720:	3101      	adds	r1, #1
 800a722:	005b      	lsls	r3, r3, #1
 800a724:	e7ee      	b.n	800a704 <__lshift+0x1c>
 800a726:	2300      	movs	r3, #0
 800a728:	f100 0114 	add.w	r1, r0, #20
 800a72c:	f100 0210 	add.w	r2, r0, #16
 800a730:	4618      	mov	r0, r3
 800a732:	4553      	cmp	r3, sl
 800a734:	db37      	blt.n	800a7a6 <__lshift+0xbe>
 800a736:	6920      	ldr	r0, [r4, #16]
 800a738:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a73c:	f104 0314 	add.w	r3, r4, #20
 800a740:	f019 091f 	ands.w	r9, r9, #31
 800a744:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a748:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a74c:	d02f      	beq.n	800a7ae <__lshift+0xc6>
 800a74e:	f1c9 0e20 	rsb	lr, r9, #32
 800a752:	468a      	mov	sl, r1
 800a754:	f04f 0c00 	mov.w	ip, #0
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	fa02 f209 	lsl.w	r2, r2, r9
 800a75e:	ea42 020c 	orr.w	r2, r2, ip
 800a762:	f84a 2b04 	str.w	r2, [sl], #4
 800a766:	f853 2b04 	ldr.w	r2, [r3], #4
 800a76a:	4298      	cmp	r0, r3
 800a76c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a770:	d8f2      	bhi.n	800a758 <__lshift+0x70>
 800a772:	1b03      	subs	r3, r0, r4
 800a774:	3b15      	subs	r3, #21
 800a776:	f023 0303 	bic.w	r3, r3, #3
 800a77a:	3304      	adds	r3, #4
 800a77c:	f104 0215 	add.w	r2, r4, #21
 800a780:	4290      	cmp	r0, r2
 800a782:	bf38      	it	cc
 800a784:	2304      	movcc	r3, #4
 800a786:	f841 c003 	str.w	ip, [r1, r3]
 800a78a:	f1bc 0f00 	cmp.w	ip, #0
 800a78e:	d001      	beq.n	800a794 <__lshift+0xac>
 800a790:	f108 0602 	add.w	r6, r8, #2
 800a794:	3e01      	subs	r6, #1
 800a796:	4638      	mov	r0, r7
 800a798:	612e      	str	r6, [r5, #16]
 800a79a:	4621      	mov	r1, r4
 800a79c:	f7ff fd88 	bl	800a2b0 <_Bfree>
 800a7a0:	4628      	mov	r0, r5
 800a7a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	e7c1      	b.n	800a732 <__lshift+0x4a>
 800a7ae:	3904      	subs	r1, #4
 800a7b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7b4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a7b8:	4298      	cmp	r0, r3
 800a7ba:	d8f9      	bhi.n	800a7b0 <__lshift+0xc8>
 800a7bc:	e7ea      	b.n	800a794 <__lshift+0xac>
 800a7be:	bf00      	nop
 800a7c0:	0800c900 	.word	0x0800c900
 800a7c4:	0800c9a3 	.word	0x0800c9a3

0800a7c8 <__mcmp>:
 800a7c8:	b530      	push	{r4, r5, lr}
 800a7ca:	6902      	ldr	r2, [r0, #16]
 800a7cc:	690c      	ldr	r4, [r1, #16]
 800a7ce:	1b12      	subs	r2, r2, r4
 800a7d0:	d10e      	bne.n	800a7f0 <__mcmp+0x28>
 800a7d2:	f100 0314 	add.w	r3, r0, #20
 800a7d6:	3114      	adds	r1, #20
 800a7d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a7dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a7e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a7e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a7e8:	42a5      	cmp	r5, r4
 800a7ea:	d003      	beq.n	800a7f4 <__mcmp+0x2c>
 800a7ec:	d305      	bcc.n	800a7fa <__mcmp+0x32>
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	4610      	mov	r0, r2
 800a7f2:	bd30      	pop	{r4, r5, pc}
 800a7f4:	4283      	cmp	r3, r0
 800a7f6:	d3f3      	bcc.n	800a7e0 <__mcmp+0x18>
 800a7f8:	e7fa      	b.n	800a7f0 <__mcmp+0x28>
 800a7fa:	f04f 32ff 	mov.w	r2, #4294967295
 800a7fe:	e7f7      	b.n	800a7f0 <__mcmp+0x28>

0800a800 <__mdiff>:
 800a800:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a804:	460c      	mov	r4, r1
 800a806:	4606      	mov	r6, r0
 800a808:	4611      	mov	r1, r2
 800a80a:	4620      	mov	r0, r4
 800a80c:	4690      	mov	r8, r2
 800a80e:	f7ff ffdb 	bl	800a7c8 <__mcmp>
 800a812:	1e05      	subs	r5, r0, #0
 800a814:	d110      	bne.n	800a838 <__mdiff+0x38>
 800a816:	4629      	mov	r1, r5
 800a818:	4630      	mov	r0, r6
 800a81a:	f7ff fd09 	bl	800a230 <_Balloc>
 800a81e:	b930      	cbnz	r0, 800a82e <__mdiff+0x2e>
 800a820:	4b3a      	ldr	r3, [pc, #232]	; (800a90c <__mdiff+0x10c>)
 800a822:	4602      	mov	r2, r0
 800a824:	f240 2132 	movw	r1, #562	; 0x232
 800a828:	4839      	ldr	r0, [pc, #228]	; (800a910 <__mdiff+0x110>)
 800a82a:	f001 f9ad 	bl	800bb88 <__assert_func>
 800a82e:	2301      	movs	r3, #1
 800a830:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a834:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a838:	bfa4      	itt	ge
 800a83a:	4643      	movge	r3, r8
 800a83c:	46a0      	movge	r8, r4
 800a83e:	4630      	mov	r0, r6
 800a840:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a844:	bfa6      	itte	ge
 800a846:	461c      	movge	r4, r3
 800a848:	2500      	movge	r5, #0
 800a84a:	2501      	movlt	r5, #1
 800a84c:	f7ff fcf0 	bl	800a230 <_Balloc>
 800a850:	b920      	cbnz	r0, 800a85c <__mdiff+0x5c>
 800a852:	4b2e      	ldr	r3, [pc, #184]	; (800a90c <__mdiff+0x10c>)
 800a854:	4602      	mov	r2, r0
 800a856:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a85a:	e7e5      	b.n	800a828 <__mdiff+0x28>
 800a85c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a860:	6926      	ldr	r6, [r4, #16]
 800a862:	60c5      	str	r5, [r0, #12]
 800a864:	f104 0914 	add.w	r9, r4, #20
 800a868:	f108 0514 	add.w	r5, r8, #20
 800a86c:	f100 0e14 	add.w	lr, r0, #20
 800a870:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a874:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a878:	f108 0210 	add.w	r2, r8, #16
 800a87c:	46f2      	mov	sl, lr
 800a87e:	2100      	movs	r1, #0
 800a880:	f859 3b04 	ldr.w	r3, [r9], #4
 800a884:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a888:	fa1f f883 	uxth.w	r8, r3
 800a88c:	fa11 f18b 	uxtah	r1, r1, fp
 800a890:	0c1b      	lsrs	r3, r3, #16
 800a892:	eba1 0808 	sub.w	r8, r1, r8
 800a896:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a89a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a89e:	fa1f f888 	uxth.w	r8, r8
 800a8a2:	1419      	asrs	r1, r3, #16
 800a8a4:	454e      	cmp	r6, r9
 800a8a6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a8aa:	f84a 3b04 	str.w	r3, [sl], #4
 800a8ae:	d8e7      	bhi.n	800a880 <__mdiff+0x80>
 800a8b0:	1b33      	subs	r3, r6, r4
 800a8b2:	3b15      	subs	r3, #21
 800a8b4:	f023 0303 	bic.w	r3, r3, #3
 800a8b8:	3304      	adds	r3, #4
 800a8ba:	3415      	adds	r4, #21
 800a8bc:	42a6      	cmp	r6, r4
 800a8be:	bf38      	it	cc
 800a8c0:	2304      	movcc	r3, #4
 800a8c2:	441d      	add	r5, r3
 800a8c4:	4473      	add	r3, lr
 800a8c6:	469e      	mov	lr, r3
 800a8c8:	462e      	mov	r6, r5
 800a8ca:	4566      	cmp	r6, ip
 800a8cc:	d30e      	bcc.n	800a8ec <__mdiff+0xec>
 800a8ce:	f10c 0203 	add.w	r2, ip, #3
 800a8d2:	1b52      	subs	r2, r2, r5
 800a8d4:	f022 0203 	bic.w	r2, r2, #3
 800a8d8:	3d03      	subs	r5, #3
 800a8da:	45ac      	cmp	ip, r5
 800a8dc:	bf38      	it	cc
 800a8de:	2200      	movcc	r2, #0
 800a8e0:	441a      	add	r2, r3
 800a8e2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a8e6:	b17b      	cbz	r3, 800a908 <__mdiff+0x108>
 800a8e8:	6107      	str	r7, [r0, #16]
 800a8ea:	e7a3      	b.n	800a834 <__mdiff+0x34>
 800a8ec:	f856 8b04 	ldr.w	r8, [r6], #4
 800a8f0:	fa11 f288 	uxtah	r2, r1, r8
 800a8f4:	1414      	asrs	r4, r2, #16
 800a8f6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a8fa:	b292      	uxth	r2, r2
 800a8fc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a900:	f84e 2b04 	str.w	r2, [lr], #4
 800a904:	1421      	asrs	r1, r4, #16
 800a906:	e7e0      	b.n	800a8ca <__mdiff+0xca>
 800a908:	3f01      	subs	r7, #1
 800a90a:	e7ea      	b.n	800a8e2 <__mdiff+0xe2>
 800a90c:	0800c900 	.word	0x0800c900
 800a910:	0800c9a3 	.word	0x0800c9a3

0800a914 <__ulp>:
 800a914:	b082      	sub	sp, #8
 800a916:	ed8d 0b00 	vstr	d0, [sp]
 800a91a:	9b01      	ldr	r3, [sp, #4]
 800a91c:	4912      	ldr	r1, [pc, #72]	; (800a968 <__ulp+0x54>)
 800a91e:	4019      	ands	r1, r3
 800a920:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a924:	2900      	cmp	r1, #0
 800a926:	dd05      	ble.n	800a934 <__ulp+0x20>
 800a928:	2200      	movs	r2, #0
 800a92a:	460b      	mov	r3, r1
 800a92c:	ec43 2b10 	vmov	d0, r2, r3
 800a930:	b002      	add	sp, #8
 800a932:	4770      	bx	lr
 800a934:	4249      	negs	r1, r1
 800a936:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a93a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a93e:	f04f 0200 	mov.w	r2, #0
 800a942:	f04f 0300 	mov.w	r3, #0
 800a946:	da04      	bge.n	800a952 <__ulp+0x3e>
 800a948:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a94c:	fa41 f300 	asr.w	r3, r1, r0
 800a950:	e7ec      	b.n	800a92c <__ulp+0x18>
 800a952:	f1a0 0114 	sub.w	r1, r0, #20
 800a956:	291e      	cmp	r1, #30
 800a958:	bfda      	itte	le
 800a95a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a95e:	fa20 f101 	lsrle.w	r1, r0, r1
 800a962:	2101      	movgt	r1, #1
 800a964:	460a      	mov	r2, r1
 800a966:	e7e1      	b.n	800a92c <__ulp+0x18>
 800a968:	7ff00000 	.word	0x7ff00000

0800a96c <__b2d>:
 800a96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a96e:	6905      	ldr	r5, [r0, #16]
 800a970:	f100 0714 	add.w	r7, r0, #20
 800a974:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a978:	1f2e      	subs	r6, r5, #4
 800a97a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a97e:	4620      	mov	r0, r4
 800a980:	f7ff fd48 	bl	800a414 <__hi0bits>
 800a984:	f1c0 0320 	rsb	r3, r0, #32
 800a988:	280a      	cmp	r0, #10
 800a98a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800aa08 <__b2d+0x9c>
 800a98e:	600b      	str	r3, [r1, #0]
 800a990:	dc14      	bgt.n	800a9bc <__b2d+0x50>
 800a992:	f1c0 0e0b 	rsb	lr, r0, #11
 800a996:	fa24 f10e 	lsr.w	r1, r4, lr
 800a99a:	42b7      	cmp	r7, r6
 800a99c:	ea41 030c 	orr.w	r3, r1, ip
 800a9a0:	bf34      	ite	cc
 800a9a2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a9a6:	2100      	movcs	r1, #0
 800a9a8:	3015      	adds	r0, #21
 800a9aa:	fa04 f000 	lsl.w	r0, r4, r0
 800a9ae:	fa21 f10e 	lsr.w	r1, r1, lr
 800a9b2:	ea40 0201 	orr.w	r2, r0, r1
 800a9b6:	ec43 2b10 	vmov	d0, r2, r3
 800a9ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9bc:	42b7      	cmp	r7, r6
 800a9be:	bf3a      	itte	cc
 800a9c0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a9c4:	f1a5 0608 	subcc.w	r6, r5, #8
 800a9c8:	2100      	movcs	r1, #0
 800a9ca:	380b      	subs	r0, #11
 800a9cc:	d017      	beq.n	800a9fe <__b2d+0x92>
 800a9ce:	f1c0 0c20 	rsb	ip, r0, #32
 800a9d2:	fa04 f500 	lsl.w	r5, r4, r0
 800a9d6:	42be      	cmp	r6, r7
 800a9d8:	fa21 f40c 	lsr.w	r4, r1, ip
 800a9dc:	ea45 0504 	orr.w	r5, r5, r4
 800a9e0:	bf8c      	ite	hi
 800a9e2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a9e6:	2400      	movls	r4, #0
 800a9e8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a9ec:	fa01 f000 	lsl.w	r0, r1, r0
 800a9f0:	fa24 f40c 	lsr.w	r4, r4, ip
 800a9f4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a9f8:	ea40 0204 	orr.w	r2, r0, r4
 800a9fc:	e7db      	b.n	800a9b6 <__b2d+0x4a>
 800a9fe:	ea44 030c 	orr.w	r3, r4, ip
 800aa02:	460a      	mov	r2, r1
 800aa04:	e7d7      	b.n	800a9b6 <__b2d+0x4a>
 800aa06:	bf00      	nop
 800aa08:	3ff00000 	.word	0x3ff00000

0800aa0c <__d2b>:
 800aa0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa10:	4689      	mov	r9, r1
 800aa12:	2101      	movs	r1, #1
 800aa14:	ec57 6b10 	vmov	r6, r7, d0
 800aa18:	4690      	mov	r8, r2
 800aa1a:	f7ff fc09 	bl	800a230 <_Balloc>
 800aa1e:	4604      	mov	r4, r0
 800aa20:	b930      	cbnz	r0, 800aa30 <__d2b+0x24>
 800aa22:	4602      	mov	r2, r0
 800aa24:	4b25      	ldr	r3, [pc, #148]	; (800aabc <__d2b+0xb0>)
 800aa26:	4826      	ldr	r0, [pc, #152]	; (800aac0 <__d2b+0xb4>)
 800aa28:	f240 310a 	movw	r1, #778	; 0x30a
 800aa2c:	f001 f8ac 	bl	800bb88 <__assert_func>
 800aa30:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aa34:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aa38:	bb35      	cbnz	r5, 800aa88 <__d2b+0x7c>
 800aa3a:	2e00      	cmp	r6, #0
 800aa3c:	9301      	str	r3, [sp, #4]
 800aa3e:	d028      	beq.n	800aa92 <__d2b+0x86>
 800aa40:	4668      	mov	r0, sp
 800aa42:	9600      	str	r6, [sp, #0]
 800aa44:	f7ff fd06 	bl	800a454 <__lo0bits>
 800aa48:	9900      	ldr	r1, [sp, #0]
 800aa4a:	b300      	cbz	r0, 800aa8e <__d2b+0x82>
 800aa4c:	9a01      	ldr	r2, [sp, #4]
 800aa4e:	f1c0 0320 	rsb	r3, r0, #32
 800aa52:	fa02 f303 	lsl.w	r3, r2, r3
 800aa56:	430b      	orrs	r3, r1
 800aa58:	40c2      	lsrs	r2, r0
 800aa5a:	6163      	str	r3, [r4, #20]
 800aa5c:	9201      	str	r2, [sp, #4]
 800aa5e:	9b01      	ldr	r3, [sp, #4]
 800aa60:	61a3      	str	r3, [r4, #24]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	bf14      	ite	ne
 800aa66:	2202      	movne	r2, #2
 800aa68:	2201      	moveq	r2, #1
 800aa6a:	6122      	str	r2, [r4, #16]
 800aa6c:	b1d5      	cbz	r5, 800aaa4 <__d2b+0x98>
 800aa6e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aa72:	4405      	add	r5, r0
 800aa74:	f8c9 5000 	str.w	r5, [r9]
 800aa78:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aa7c:	f8c8 0000 	str.w	r0, [r8]
 800aa80:	4620      	mov	r0, r4
 800aa82:	b003      	add	sp, #12
 800aa84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa8c:	e7d5      	b.n	800aa3a <__d2b+0x2e>
 800aa8e:	6161      	str	r1, [r4, #20]
 800aa90:	e7e5      	b.n	800aa5e <__d2b+0x52>
 800aa92:	a801      	add	r0, sp, #4
 800aa94:	f7ff fcde 	bl	800a454 <__lo0bits>
 800aa98:	9b01      	ldr	r3, [sp, #4]
 800aa9a:	6163      	str	r3, [r4, #20]
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	6122      	str	r2, [r4, #16]
 800aaa0:	3020      	adds	r0, #32
 800aaa2:	e7e3      	b.n	800aa6c <__d2b+0x60>
 800aaa4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aaa8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aaac:	f8c9 0000 	str.w	r0, [r9]
 800aab0:	6918      	ldr	r0, [r3, #16]
 800aab2:	f7ff fcaf 	bl	800a414 <__hi0bits>
 800aab6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aaba:	e7df      	b.n	800aa7c <__d2b+0x70>
 800aabc:	0800c900 	.word	0x0800c900
 800aac0:	0800c9a3 	.word	0x0800c9a3

0800aac4 <__ratio>:
 800aac4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aac8:	4688      	mov	r8, r1
 800aaca:	4669      	mov	r1, sp
 800aacc:	4681      	mov	r9, r0
 800aace:	f7ff ff4d 	bl	800a96c <__b2d>
 800aad2:	a901      	add	r1, sp, #4
 800aad4:	4640      	mov	r0, r8
 800aad6:	ec55 4b10 	vmov	r4, r5, d0
 800aada:	f7ff ff47 	bl	800a96c <__b2d>
 800aade:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aae2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800aae6:	eba3 0c02 	sub.w	ip, r3, r2
 800aaea:	e9dd 3200 	ldrd	r3, r2, [sp]
 800aaee:	1a9b      	subs	r3, r3, r2
 800aaf0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800aaf4:	ec51 0b10 	vmov	r0, r1, d0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	bfd6      	itet	le
 800aafc:	460a      	movle	r2, r1
 800aafe:	462a      	movgt	r2, r5
 800ab00:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ab04:	468b      	mov	fp, r1
 800ab06:	462f      	mov	r7, r5
 800ab08:	bfd4      	ite	le
 800ab0a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ab0e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ab12:	4620      	mov	r0, r4
 800ab14:	ee10 2a10 	vmov	r2, s0
 800ab18:	465b      	mov	r3, fp
 800ab1a:	4639      	mov	r1, r7
 800ab1c:	f7f5 fea6 	bl	800086c <__aeabi_ddiv>
 800ab20:	ec41 0b10 	vmov	d0, r0, r1
 800ab24:	b003      	add	sp, #12
 800ab26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ab2a <__copybits>:
 800ab2a:	3901      	subs	r1, #1
 800ab2c:	b570      	push	{r4, r5, r6, lr}
 800ab2e:	1149      	asrs	r1, r1, #5
 800ab30:	6914      	ldr	r4, [r2, #16]
 800ab32:	3101      	adds	r1, #1
 800ab34:	f102 0314 	add.w	r3, r2, #20
 800ab38:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ab3c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ab40:	1f05      	subs	r5, r0, #4
 800ab42:	42a3      	cmp	r3, r4
 800ab44:	d30c      	bcc.n	800ab60 <__copybits+0x36>
 800ab46:	1aa3      	subs	r3, r4, r2
 800ab48:	3b11      	subs	r3, #17
 800ab4a:	f023 0303 	bic.w	r3, r3, #3
 800ab4e:	3211      	adds	r2, #17
 800ab50:	42a2      	cmp	r2, r4
 800ab52:	bf88      	it	hi
 800ab54:	2300      	movhi	r3, #0
 800ab56:	4418      	add	r0, r3
 800ab58:	2300      	movs	r3, #0
 800ab5a:	4288      	cmp	r0, r1
 800ab5c:	d305      	bcc.n	800ab6a <__copybits+0x40>
 800ab5e:	bd70      	pop	{r4, r5, r6, pc}
 800ab60:	f853 6b04 	ldr.w	r6, [r3], #4
 800ab64:	f845 6f04 	str.w	r6, [r5, #4]!
 800ab68:	e7eb      	b.n	800ab42 <__copybits+0x18>
 800ab6a:	f840 3b04 	str.w	r3, [r0], #4
 800ab6e:	e7f4      	b.n	800ab5a <__copybits+0x30>

0800ab70 <__any_on>:
 800ab70:	f100 0214 	add.w	r2, r0, #20
 800ab74:	6900      	ldr	r0, [r0, #16]
 800ab76:	114b      	asrs	r3, r1, #5
 800ab78:	4298      	cmp	r0, r3
 800ab7a:	b510      	push	{r4, lr}
 800ab7c:	db11      	blt.n	800aba2 <__any_on+0x32>
 800ab7e:	dd0a      	ble.n	800ab96 <__any_on+0x26>
 800ab80:	f011 011f 	ands.w	r1, r1, #31
 800ab84:	d007      	beq.n	800ab96 <__any_on+0x26>
 800ab86:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ab8a:	fa24 f001 	lsr.w	r0, r4, r1
 800ab8e:	fa00 f101 	lsl.w	r1, r0, r1
 800ab92:	428c      	cmp	r4, r1
 800ab94:	d10b      	bne.n	800abae <__any_on+0x3e>
 800ab96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d803      	bhi.n	800aba6 <__any_on+0x36>
 800ab9e:	2000      	movs	r0, #0
 800aba0:	bd10      	pop	{r4, pc}
 800aba2:	4603      	mov	r3, r0
 800aba4:	e7f7      	b.n	800ab96 <__any_on+0x26>
 800aba6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800abaa:	2900      	cmp	r1, #0
 800abac:	d0f5      	beq.n	800ab9a <__any_on+0x2a>
 800abae:	2001      	movs	r0, #1
 800abb0:	e7f6      	b.n	800aba0 <__any_on+0x30>

0800abb2 <_calloc_r>:
 800abb2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abb4:	fba1 2402 	umull	r2, r4, r1, r2
 800abb8:	b94c      	cbnz	r4, 800abce <_calloc_r+0x1c>
 800abba:	4611      	mov	r1, r2
 800abbc:	9201      	str	r2, [sp, #4]
 800abbe:	f7fe f813 	bl	8008be8 <_malloc_r>
 800abc2:	9a01      	ldr	r2, [sp, #4]
 800abc4:	4605      	mov	r5, r0
 800abc6:	b930      	cbnz	r0, 800abd6 <_calloc_r+0x24>
 800abc8:	4628      	mov	r0, r5
 800abca:	b003      	add	sp, #12
 800abcc:	bd30      	pop	{r4, r5, pc}
 800abce:	220c      	movs	r2, #12
 800abd0:	6002      	str	r2, [r0, #0]
 800abd2:	2500      	movs	r5, #0
 800abd4:	e7f8      	b.n	800abc8 <_calloc_r+0x16>
 800abd6:	4621      	mov	r1, r4
 800abd8:	f7fd ff92 	bl	8008b00 <memset>
 800abdc:	e7f4      	b.n	800abc8 <_calloc_r+0x16>

0800abde <_realloc_r>:
 800abde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abe2:	4680      	mov	r8, r0
 800abe4:	4614      	mov	r4, r2
 800abe6:	460e      	mov	r6, r1
 800abe8:	b921      	cbnz	r1, 800abf4 <_realloc_r+0x16>
 800abea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abee:	4611      	mov	r1, r2
 800abf0:	f7fd bffa 	b.w	8008be8 <_malloc_r>
 800abf4:	b92a      	cbnz	r2, 800ac02 <_realloc_r+0x24>
 800abf6:	f7fd ff8b 	bl	8008b10 <_free_r>
 800abfa:	4625      	mov	r5, r4
 800abfc:	4628      	mov	r0, r5
 800abfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac02:	f001 f9c2 	bl	800bf8a <_malloc_usable_size_r>
 800ac06:	4284      	cmp	r4, r0
 800ac08:	4607      	mov	r7, r0
 800ac0a:	d802      	bhi.n	800ac12 <_realloc_r+0x34>
 800ac0c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ac10:	d812      	bhi.n	800ac38 <_realloc_r+0x5a>
 800ac12:	4621      	mov	r1, r4
 800ac14:	4640      	mov	r0, r8
 800ac16:	f7fd ffe7 	bl	8008be8 <_malloc_r>
 800ac1a:	4605      	mov	r5, r0
 800ac1c:	2800      	cmp	r0, #0
 800ac1e:	d0ed      	beq.n	800abfc <_realloc_r+0x1e>
 800ac20:	42bc      	cmp	r4, r7
 800ac22:	4622      	mov	r2, r4
 800ac24:	4631      	mov	r1, r6
 800ac26:	bf28      	it	cs
 800ac28:	463a      	movcs	r2, r7
 800ac2a:	f7fd ff5b 	bl	8008ae4 <memcpy>
 800ac2e:	4631      	mov	r1, r6
 800ac30:	4640      	mov	r0, r8
 800ac32:	f7fd ff6d 	bl	8008b10 <_free_r>
 800ac36:	e7e1      	b.n	800abfc <_realloc_r+0x1e>
 800ac38:	4635      	mov	r5, r6
 800ac3a:	e7df      	b.n	800abfc <_realloc_r+0x1e>

0800ac3c <__ssputs_r>:
 800ac3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac40:	688e      	ldr	r6, [r1, #8]
 800ac42:	429e      	cmp	r6, r3
 800ac44:	4682      	mov	sl, r0
 800ac46:	460c      	mov	r4, r1
 800ac48:	4690      	mov	r8, r2
 800ac4a:	461f      	mov	r7, r3
 800ac4c:	d838      	bhi.n	800acc0 <__ssputs_r+0x84>
 800ac4e:	898a      	ldrh	r2, [r1, #12]
 800ac50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac54:	d032      	beq.n	800acbc <__ssputs_r+0x80>
 800ac56:	6825      	ldr	r5, [r4, #0]
 800ac58:	6909      	ldr	r1, [r1, #16]
 800ac5a:	eba5 0901 	sub.w	r9, r5, r1
 800ac5e:	6965      	ldr	r5, [r4, #20]
 800ac60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac68:	3301      	adds	r3, #1
 800ac6a:	444b      	add	r3, r9
 800ac6c:	106d      	asrs	r5, r5, #1
 800ac6e:	429d      	cmp	r5, r3
 800ac70:	bf38      	it	cc
 800ac72:	461d      	movcc	r5, r3
 800ac74:	0553      	lsls	r3, r2, #21
 800ac76:	d531      	bpl.n	800acdc <__ssputs_r+0xa0>
 800ac78:	4629      	mov	r1, r5
 800ac7a:	f7fd ffb5 	bl	8008be8 <_malloc_r>
 800ac7e:	4606      	mov	r6, r0
 800ac80:	b950      	cbnz	r0, 800ac98 <__ssputs_r+0x5c>
 800ac82:	230c      	movs	r3, #12
 800ac84:	f8ca 3000 	str.w	r3, [sl]
 800ac88:	89a3      	ldrh	r3, [r4, #12]
 800ac8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac8e:	81a3      	strh	r3, [r4, #12]
 800ac90:	f04f 30ff 	mov.w	r0, #4294967295
 800ac94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac98:	6921      	ldr	r1, [r4, #16]
 800ac9a:	464a      	mov	r2, r9
 800ac9c:	f7fd ff22 	bl	8008ae4 <memcpy>
 800aca0:	89a3      	ldrh	r3, [r4, #12]
 800aca2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acaa:	81a3      	strh	r3, [r4, #12]
 800acac:	6126      	str	r6, [r4, #16]
 800acae:	6165      	str	r5, [r4, #20]
 800acb0:	444e      	add	r6, r9
 800acb2:	eba5 0509 	sub.w	r5, r5, r9
 800acb6:	6026      	str	r6, [r4, #0]
 800acb8:	60a5      	str	r5, [r4, #8]
 800acba:	463e      	mov	r6, r7
 800acbc:	42be      	cmp	r6, r7
 800acbe:	d900      	bls.n	800acc2 <__ssputs_r+0x86>
 800acc0:	463e      	mov	r6, r7
 800acc2:	6820      	ldr	r0, [r4, #0]
 800acc4:	4632      	mov	r2, r6
 800acc6:	4641      	mov	r1, r8
 800acc8:	f001 f945 	bl	800bf56 <memmove>
 800accc:	68a3      	ldr	r3, [r4, #8]
 800acce:	1b9b      	subs	r3, r3, r6
 800acd0:	60a3      	str	r3, [r4, #8]
 800acd2:	6823      	ldr	r3, [r4, #0]
 800acd4:	4433      	add	r3, r6
 800acd6:	6023      	str	r3, [r4, #0]
 800acd8:	2000      	movs	r0, #0
 800acda:	e7db      	b.n	800ac94 <__ssputs_r+0x58>
 800acdc:	462a      	mov	r2, r5
 800acde:	f7ff ff7e 	bl	800abde <_realloc_r>
 800ace2:	4606      	mov	r6, r0
 800ace4:	2800      	cmp	r0, #0
 800ace6:	d1e1      	bne.n	800acac <__ssputs_r+0x70>
 800ace8:	6921      	ldr	r1, [r4, #16]
 800acea:	4650      	mov	r0, sl
 800acec:	f7fd ff10 	bl	8008b10 <_free_r>
 800acf0:	e7c7      	b.n	800ac82 <__ssputs_r+0x46>
	...

0800acf4 <_svfiprintf_r>:
 800acf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf8:	4698      	mov	r8, r3
 800acfa:	898b      	ldrh	r3, [r1, #12]
 800acfc:	061b      	lsls	r3, r3, #24
 800acfe:	b09d      	sub	sp, #116	; 0x74
 800ad00:	4607      	mov	r7, r0
 800ad02:	460d      	mov	r5, r1
 800ad04:	4614      	mov	r4, r2
 800ad06:	d50e      	bpl.n	800ad26 <_svfiprintf_r+0x32>
 800ad08:	690b      	ldr	r3, [r1, #16]
 800ad0a:	b963      	cbnz	r3, 800ad26 <_svfiprintf_r+0x32>
 800ad0c:	2140      	movs	r1, #64	; 0x40
 800ad0e:	f7fd ff6b 	bl	8008be8 <_malloc_r>
 800ad12:	6028      	str	r0, [r5, #0]
 800ad14:	6128      	str	r0, [r5, #16]
 800ad16:	b920      	cbnz	r0, 800ad22 <_svfiprintf_r+0x2e>
 800ad18:	230c      	movs	r3, #12
 800ad1a:	603b      	str	r3, [r7, #0]
 800ad1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad20:	e0d1      	b.n	800aec6 <_svfiprintf_r+0x1d2>
 800ad22:	2340      	movs	r3, #64	; 0x40
 800ad24:	616b      	str	r3, [r5, #20]
 800ad26:	2300      	movs	r3, #0
 800ad28:	9309      	str	r3, [sp, #36]	; 0x24
 800ad2a:	2320      	movs	r3, #32
 800ad2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad30:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad34:	2330      	movs	r3, #48	; 0x30
 800ad36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800aee0 <_svfiprintf_r+0x1ec>
 800ad3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad3e:	f04f 0901 	mov.w	r9, #1
 800ad42:	4623      	mov	r3, r4
 800ad44:	469a      	mov	sl, r3
 800ad46:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad4a:	b10a      	cbz	r2, 800ad50 <_svfiprintf_r+0x5c>
 800ad4c:	2a25      	cmp	r2, #37	; 0x25
 800ad4e:	d1f9      	bne.n	800ad44 <_svfiprintf_r+0x50>
 800ad50:	ebba 0b04 	subs.w	fp, sl, r4
 800ad54:	d00b      	beq.n	800ad6e <_svfiprintf_r+0x7a>
 800ad56:	465b      	mov	r3, fp
 800ad58:	4622      	mov	r2, r4
 800ad5a:	4629      	mov	r1, r5
 800ad5c:	4638      	mov	r0, r7
 800ad5e:	f7ff ff6d 	bl	800ac3c <__ssputs_r>
 800ad62:	3001      	adds	r0, #1
 800ad64:	f000 80aa 	beq.w	800aebc <_svfiprintf_r+0x1c8>
 800ad68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad6a:	445a      	add	r2, fp
 800ad6c:	9209      	str	r2, [sp, #36]	; 0x24
 800ad6e:	f89a 3000 	ldrb.w	r3, [sl]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	f000 80a2 	beq.w	800aebc <_svfiprintf_r+0x1c8>
 800ad78:	2300      	movs	r3, #0
 800ad7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad82:	f10a 0a01 	add.w	sl, sl, #1
 800ad86:	9304      	str	r3, [sp, #16]
 800ad88:	9307      	str	r3, [sp, #28]
 800ad8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad8e:	931a      	str	r3, [sp, #104]	; 0x68
 800ad90:	4654      	mov	r4, sl
 800ad92:	2205      	movs	r2, #5
 800ad94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad98:	4851      	ldr	r0, [pc, #324]	; (800aee0 <_svfiprintf_r+0x1ec>)
 800ad9a:	f7f5 fa31 	bl	8000200 <memchr>
 800ad9e:	9a04      	ldr	r2, [sp, #16]
 800ada0:	b9d8      	cbnz	r0, 800adda <_svfiprintf_r+0xe6>
 800ada2:	06d0      	lsls	r0, r2, #27
 800ada4:	bf44      	itt	mi
 800ada6:	2320      	movmi	r3, #32
 800ada8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adac:	0711      	lsls	r1, r2, #28
 800adae:	bf44      	itt	mi
 800adb0:	232b      	movmi	r3, #43	; 0x2b
 800adb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adb6:	f89a 3000 	ldrb.w	r3, [sl]
 800adba:	2b2a      	cmp	r3, #42	; 0x2a
 800adbc:	d015      	beq.n	800adea <_svfiprintf_r+0xf6>
 800adbe:	9a07      	ldr	r2, [sp, #28]
 800adc0:	4654      	mov	r4, sl
 800adc2:	2000      	movs	r0, #0
 800adc4:	f04f 0c0a 	mov.w	ip, #10
 800adc8:	4621      	mov	r1, r4
 800adca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adce:	3b30      	subs	r3, #48	; 0x30
 800add0:	2b09      	cmp	r3, #9
 800add2:	d94e      	bls.n	800ae72 <_svfiprintf_r+0x17e>
 800add4:	b1b0      	cbz	r0, 800ae04 <_svfiprintf_r+0x110>
 800add6:	9207      	str	r2, [sp, #28]
 800add8:	e014      	b.n	800ae04 <_svfiprintf_r+0x110>
 800adda:	eba0 0308 	sub.w	r3, r0, r8
 800adde:	fa09 f303 	lsl.w	r3, r9, r3
 800ade2:	4313      	orrs	r3, r2
 800ade4:	9304      	str	r3, [sp, #16]
 800ade6:	46a2      	mov	sl, r4
 800ade8:	e7d2      	b.n	800ad90 <_svfiprintf_r+0x9c>
 800adea:	9b03      	ldr	r3, [sp, #12]
 800adec:	1d19      	adds	r1, r3, #4
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	9103      	str	r1, [sp, #12]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	bfbb      	ittet	lt
 800adf6:	425b      	neglt	r3, r3
 800adf8:	f042 0202 	orrlt.w	r2, r2, #2
 800adfc:	9307      	strge	r3, [sp, #28]
 800adfe:	9307      	strlt	r3, [sp, #28]
 800ae00:	bfb8      	it	lt
 800ae02:	9204      	strlt	r2, [sp, #16]
 800ae04:	7823      	ldrb	r3, [r4, #0]
 800ae06:	2b2e      	cmp	r3, #46	; 0x2e
 800ae08:	d10c      	bne.n	800ae24 <_svfiprintf_r+0x130>
 800ae0a:	7863      	ldrb	r3, [r4, #1]
 800ae0c:	2b2a      	cmp	r3, #42	; 0x2a
 800ae0e:	d135      	bne.n	800ae7c <_svfiprintf_r+0x188>
 800ae10:	9b03      	ldr	r3, [sp, #12]
 800ae12:	1d1a      	adds	r2, r3, #4
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	9203      	str	r2, [sp, #12]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	bfb8      	it	lt
 800ae1c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae20:	3402      	adds	r4, #2
 800ae22:	9305      	str	r3, [sp, #20]
 800ae24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aef0 <_svfiprintf_r+0x1fc>
 800ae28:	7821      	ldrb	r1, [r4, #0]
 800ae2a:	2203      	movs	r2, #3
 800ae2c:	4650      	mov	r0, sl
 800ae2e:	f7f5 f9e7 	bl	8000200 <memchr>
 800ae32:	b140      	cbz	r0, 800ae46 <_svfiprintf_r+0x152>
 800ae34:	2340      	movs	r3, #64	; 0x40
 800ae36:	eba0 000a 	sub.w	r0, r0, sl
 800ae3a:	fa03 f000 	lsl.w	r0, r3, r0
 800ae3e:	9b04      	ldr	r3, [sp, #16]
 800ae40:	4303      	orrs	r3, r0
 800ae42:	3401      	adds	r4, #1
 800ae44:	9304      	str	r3, [sp, #16]
 800ae46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae4a:	4826      	ldr	r0, [pc, #152]	; (800aee4 <_svfiprintf_r+0x1f0>)
 800ae4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae50:	2206      	movs	r2, #6
 800ae52:	f7f5 f9d5 	bl	8000200 <memchr>
 800ae56:	2800      	cmp	r0, #0
 800ae58:	d038      	beq.n	800aecc <_svfiprintf_r+0x1d8>
 800ae5a:	4b23      	ldr	r3, [pc, #140]	; (800aee8 <_svfiprintf_r+0x1f4>)
 800ae5c:	bb1b      	cbnz	r3, 800aea6 <_svfiprintf_r+0x1b2>
 800ae5e:	9b03      	ldr	r3, [sp, #12]
 800ae60:	3307      	adds	r3, #7
 800ae62:	f023 0307 	bic.w	r3, r3, #7
 800ae66:	3308      	adds	r3, #8
 800ae68:	9303      	str	r3, [sp, #12]
 800ae6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae6c:	4433      	add	r3, r6
 800ae6e:	9309      	str	r3, [sp, #36]	; 0x24
 800ae70:	e767      	b.n	800ad42 <_svfiprintf_r+0x4e>
 800ae72:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae76:	460c      	mov	r4, r1
 800ae78:	2001      	movs	r0, #1
 800ae7a:	e7a5      	b.n	800adc8 <_svfiprintf_r+0xd4>
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	3401      	adds	r4, #1
 800ae80:	9305      	str	r3, [sp, #20]
 800ae82:	4619      	mov	r1, r3
 800ae84:	f04f 0c0a 	mov.w	ip, #10
 800ae88:	4620      	mov	r0, r4
 800ae8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae8e:	3a30      	subs	r2, #48	; 0x30
 800ae90:	2a09      	cmp	r2, #9
 800ae92:	d903      	bls.n	800ae9c <_svfiprintf_r+0x1a8>
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d0c5      	beq.n	800ae24 <_svfiprintf_r+0x130>
 800ae98:	9105      	str	r1, [sp, #20]
 800ae9a:	e7c3      	b.n	800ae24 <_svfiprintf_r+0x130>
 800ae9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800aea0:	4604      	mov	r4, r0
 800aea2:	2301      	movs	r3, #1
 800aea4:	e7f0      	b.n	800ae88 <_svfiprintf_r+0x194>
 800aea6:	ab03      	add	r3, sp, #12
 800aea8:	9300      	str	r3, [sp, #0]
 800aeaa:	462a      	mov	r2, r5
 800aeac:	4b0f      	ldr	r3, [pc, #60]	; (800aeec <_svfiprintf_r+0x1f8>)
 800aeae:	a904      	add	r1, sp, #16
 800aeb0:	4638      	mov	r0, r7
 800aeb2:	f3af 8000 	nop.w
 800aeb6:	1c42      	adds	r2, r0, #1
 800aeb8:	4606      	mov	r6, r0
 800aeba:	d1d6      	bne.n	800ae6a <_svfiprintf_r+0x176>
 800aebc:	89ab      	ldrh	r3, [r5, #12]
 800aebe:	065b      	lsls	r3, r3, #25
 800aec0:	f53f af2c 	bmi.w	800ad1c <_svfiprintf_r+0x28>
 800aec4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aec6:	b01d      	add	sp, #116	; 0x74
 800aec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aecc:	ab03      	add	r3, sp, #12
 800aece:	9300      	str	r3, [sp, #0]
 800aed0:	462a      	mov	r2, r5
 800aed2:	4b06      	ldr	r3, [pc, #24]	; (800aeec <_svfiprintf_r+0x1f8>)
 800aed4:	a904      	add	r1, sp, #16
 800aed6:	4638      	mov	r0, r7
 800aed8:	f000 fa4c 	bl	800b374 <_printf_i>
 800aedc:	e7eb      	b.n	800aeb6 <_svfiprintf_r+0x1c2>
 800aede:	bf00      	nop
 800aee0:	0800cafc 	.word	0x0800cafc
 800aee4:	0800cb06 	.word	0x0800cb06
 800aee8:	00000000 	.word	0x00000000
 800aeec:	0800ac3d 	.word	0x0800ac3d
 800aef0:	0800cb02 	.word	0x0800cb02

0800aef4 <_sungetc_r>:
 800aef4:	b538      	push	{r3, r4, r5, lr}
 800aef6:	1c4b      	adds	r3, r1, #1
 800aef8:	4614      	mov	r4, r2
 800aefa:	d103      	bne.n	800af04 <_sungetc_r+0x10>
 800aefc:	f04f 35ff 	mov.w	r5, #4294967295
 800af00:	4628      	mov	r0, r5
 800af02:	bd38      	pop	{r3, r4, r5, pc}
 800af04:	8993      	ldrh	r3, [r2, #12]
 800af06:	f023 0320 	bic.w	r3, r3, #32
 800af0a:	8193      	strh	r3, [r2, #12]
 800af0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af0e:	6852      	ldr	r2, [r2, #4]
 800af10:	b2cd      	uxtb	r5, r1
 800af12:	b18b      	cbz	r3, 800af38 <_sungetc_r+0x44>
 800af14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800af16:	4293      	cmp	r3, r2
 800af18:	dd08      	ble.n	800af2c <_sungetc_r+0x38>
 800af1a:	6823      	ldr	r3, [r4, #0]
 800af1c:	1e5a      	subs	r2, r3, #1
 800af1e:	6022      	str	r2, [r4, #0]
 800af20:	f803 5c01 	strb.w	r5, [r3, #-1]
 800af24:	6863      	ldr	r3, [r4, #4]
 800af26:	3301      	adds	r3, #1
 800af28:	6063      	str	r3, [r4, #4]
 800af2a:	e7e9      	b.n	800af00 <_sungetc_r+0xc>
 800af2c:	4621      	mov	r1, r4
 800af2e:	f000 fde3 	bl	800baf8 <__submore>
 800af32:	2800      	cmp	r0, #0
 800af34:	d0f1      	beq.n	800af1a <_sungetc_r+0x26>
 800af36:	e7e1      	b.n	800aefc <_sungetc_r+0x8>
 800af38:	6921      	ldr	r1, [r4, #16]
 800af3a:	6823      	ldr	r3, [r4, #0]
 800af3c:	b151      	cbz	r1, 800af54 <_sungetc_r+0x60>
 800af3e:	4299      	cmp	r1, r3
 800af40:	d208      	bcs.n	800af54 <_sungetc_r+0x60>
 800af42:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800af46:	42a9      	cmp	r1, r5
 800af48:	d104      	bne.n	800af54 <_sungetc_r+0x60>
 800af4a:	3b01      	subs	r3, #1
 800af4c:	3201      	adds	r2, #1
 800af4e:	6023      	str	r3, [r4, #0]
 800af50:	6062      	str	r2, [r4, #4]
 800af52:	e7d5      	b.n	800af00 <_sungetc_r+0xc>
 800af54:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800af58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af5c:	6363      	str	r3, [r4, #52]	; 0x34
 800af5e:	2303      	movs	r3, #3
 800af60:	63a3      	str	r3, [r4, #56]	; 0x38
 800af62:	4623      	mov	r3, r4
 800af64:	f803 5f46 	strb.w	r5, [r3, #70]!
 800af68:	6023      	str	r3, [r4, #0]
 800af6a:	2301      	movs	r3, #1
 800af6c:	e7dc      	b.n	800af28 <_sungetc_r+0x34>

0800af6e <__ssrefill_r>:
 800af6e:	b510      	push	{r4, lr}
 800af70:	460c      	mov	r4, r1
 800af72:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800af74:	b169      	cbz	r1, 800af92 <__ssrefill_r+0x24>
 800af76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af7a:	4299      	cmp	r1, r3
 800af7c:	d001      	beq.n	800af82 <__ssrefill_r+0x14>
 800af7e:	f7fd fdc7 	bl	8008b10 <_free_r>
 800af82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af84:	6063      	str	r3, [r4, #4]
 800af86:	2000      	movs	r0, #0
 800af88:	6360      	str	r0, [r4, #52]	; 0x34
 800af8a:	b113      	cbz	r3, 800af92 <__ssrefill_r+0x24>
 800af8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800af8e:	6023      	str	r3, [r4, #0]
 800af90:	bd10      	pop	{r4, pc}
 800af92:	6923      	ldr	r3, [r4, #16]
 800af94:	6023      	str	r3, [r4, #0]
 800af96:	2300      	movs	r3, #0
 800af98:	6063      	str	r3, [r4, #4]
 800af9a:	89a3      	ldrh	r3, [r4, #12]
 800af9c:	f043 0320 	orr.w	r3, r3, #32
 800afa0:	81a3      	strh	r3, [r4, #12]
 800afa2:	f04f 30ff 	mov.w	r0, #4294967295
 800afa6:	e7f3      	b.n	800af90 <__ssrefill_r+0x22>

0800afa8 <__ssvfiscanf_r>:
 800afa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afac:	460c      	mov	r4, r1
 800afae:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800afb2:	2100      	movs	r1, #0
 800afb4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800afb8:	49a6      	ldr	r1, [pc, #664]	; (800b254 <__ssvfiscanf_r+0x2ac>)
 800afba:	91a0      	str	r1, [sp, #640]	; 0x280
 800afbc:	f10d 0804 	add.w	r8, sp, #4
 800afc0:	49a5      	ldr	r1, [pc, #660]	; (800b258 <__ssvfiscanf_r+0x2b0>)
 800afc2:	4fa6      	ldr	r7, [pc, #664]	; (800b25c <__ssvfiscanf_r+0x2b4>)
 800afc4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800b260 <__ssvfiscanf_r+0x2b8>
 800afc8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800afcc:	4606      	mov	r6, r0
 800afce:	91a1      	str	r1, [sp, #644]	; 0x284
 800afd0:	9300      	str	r3, [sp, #0]
 800afd2:	7813      	ldrb	r3, [r2, #0]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	f000 815a 	beq.w	800b28e <__ssvfiscanf_r+0x2e6>
 800afda:	5dd9      	ldrb	r1, [r3, r7]
 800afdc:	f011 0108 	ands.w	r1, r1, #8
 800afe0:	f102 0501 	add.w	r5, r2, #1
 800afe4:	d019      	beq.n	800b01a <__ssvfiscanf_r+0x72>
 800afe6:	6863      	ldr	r3, [r4, #4]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	dd0f      	ble.n	800b00c <__ssvfiscanf_r+0x64>
 800afec:	6823      	ldr	r3, [r4, #0]
 800afee:	781a      	ldrb	r2, [r3, #0]
 800aff0:	5cba      	ldrb	r2, [r7, r2]
 800aff2:	0712      	lsls	r2, r2, #28
 800aff4:	d401      	bmi.n	800affa <__ssvfiscanf_r+0x52>
 800aff6:	462a      	mov	r2, r5
 800aff8:	e7eb      	b.n	800afd2 <__ssvfiscanf_r+0x2a>
 800affa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800affc:	3201      	adds	r2, #1
 800affe:	9245      	str	r2, [sp, #276]	; 0x114
 800b000:	6862      	ldr	r2, [r4, #4]
 800b002:	3301      	adds	r3, #1
 800b004:	3a01      	subs	r2, #1
 800b006:	6062      	str	r2, [r4, #4]
 800b008:	6023      	str	r3, [r4, #0]
 800b00a:	e7ec      	b.n	800afe6 <__ssvfiscanf_r+0x3e>
 800b00c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b00e:	4621      	mov	r1, r4
 800b010:	4630      	mov	r0, r6
 800b012:	4798      	blx	r3
 800b014:	2800      	cmp	r0, #0
 800b016:	d0e9      	beq.n	800afec <__ssvfiscanf_r+0x44>
 800b018:	e7ed      	b.n	800aff6 <__ssvfiscanf_r+0x4e>
 800b01a:	2b25      	cmp	r3, #37	; 0x25
 800b01c:	d012      	beq.n	800b044 <__ssvfiscanf_r+0x9c>
 800b01e:	469a      	mov	sl, r3
 800b020:	6863      	ldr	r3, [r4, #4]
 800b022:	2b00      	cmp	r3, #0
 800b024:	f340 8091 	ble.w	800b14a <__ssvfiscanf_r+0x1a2>
 800b028:	6822      	ldr	r2, [r4, #0]
 800b02a:	7813      	ldrb	r3, [r2, #0]
 800b02c:	4553      	cmp	r3, sl
 800b02e:	f040 812e 	bne.w	800b28e <__ssvfiscanf_r+0x2e6>
 800b032:	6863      	ldr	r3, [r4, #4]
 800b034:	3b01      	subs	r3, #1
 800b036:	6063      	str	r3, [r4, #4]
 800b038:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b03a:	3201      	adds	r2, #1
 800b03c:	3301      	adds	r3, #1
 800b03e:	6022      	str	r2, [r4, #0]
 800b040:	9345      	str	r3, [sp, #276]	; 0x114
 800b042:	e7d8      	b.n	800aff6 <__ssvfiscanf_r+0x4e>
 800b044:	9141      	str	r1, [sp, #260]	; 0x104
 800b046:	9143      	str	r1, [sp, #268]	; 0x10c
 800b048:	7853      	ldrb	r3, [r2, #1]
 800b04a:	2b2a      	cmp	r3, #42	; 0x2a
 800b04c:	bf02      	ittt	eq
 800b04e:	2310      	moveq	r3, #16
 800b050:	1c95      	addeq	r5, r2, #2
 800b052:	9341      	streq	r3, [sp, #260]	; 0x104
 800b054:	220a      	movs	r2, #10
 800b056:	46aa      	mov	sl, r5
 800b058:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b05c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b060:	2b09      	cmp	r3, #9
 800b062:	d91d      	bls.n	800b0a0 <__ssvfiscanf_r+0xf8>
 800b064:	487e      	ldr	r0, [pc, #504]	; (800b260 <__ssvfiscanf_r+0x2b8>)
 800b066:	2203      	movs	r2, #3
 800b068:	f7f5 f8ca 	bl	8000200 <memchr>
 800b06c:	b140      	cbz	r0, 800b080 <__ssvfiscanf_r+0xd8>
 800b06e:	2301      	movs	r3, #1
 800b070:	eba0 0009 	sub.w	r0, r0, r9
 800b074:	fa03 f000 	lsl.w	r0, r3, r0
 800b078:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b07a:	4318      	orrs	r0, r3
 800b07c:	9041      	str	r0, [sp, #260]	; 0x104
 800b07e:	4655      	mov	r5, sl
 800b080:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b084:	2b78      	cmp	r3, #120	; 0x78
 800b086:	d806      	bhi.n	800b096 <__ssvfiscanf_r+0xee>
 800b088:	2b57      	cmp	r3, #87	; 0x57
 800b08a:	d810      	bhi.n	800b0ae <__ssvfiscanf_r+0x106>
 800b08c:	2b25      	cmp	r3, #37	; 0x25
 800b08e:	d0c6      	beq.n	800b01e <__ssvfiscanf_r+0x76>
 800b090:	d856      	bhi.n	800b140 <__ssvfiscanf_r+0x198>
 800b092:	2b00      	cmp	r3, #0
 800b094:	d064      	beq.n	800b160 <__ssvfiscanf_r+0x1b8>
 800b096:	2303      	movs	r3, #3
 800b098:	9347      	str	r3, [sp, #284]	; 0x11c
 800b09a:	230a      	movs	r3, #10
 800b09c:	9342      	str	r3, [sp, #264]	; 0x108
 800b09e:	e071      	b.n	800b184 <__ssvfiscanf_r+0x1dc>
 800b0a0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b0a2:	fb02 1103 	mla	r1, r2, r3, r1
 800b0a6:	3930      	subs	r1, #48	; 0x30
 800b0a8:	9143      	str	r1, [sp, #268]	; 0x10c
 800b0aa:	4655      	mov	r5, sl
 800b0ac:	e7d3      	b.n	800b056 <__ssvfiscanf_r+0xae>
 800b0ae:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b0b2:	2a20      	cmp	r2, #32
 800b0b4:	d8ef      	bhi.n	800b096 <__ssvfiscanf_r+0xee>
 800b0b6:	a101      	add	r1, pc, #4	; (adr r1, 800b0bc <__ssvfiscanf_r+0x114>)
 800b0b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b0bc:	0800b16f 	.word	0x0800b16f
 800b0c0:	0800b097 	.word	0x0800b097
 800b0c4:	0800b097 	.word	0x0800b097
 800b0c8:	0800b1cd 	.word	0x0800b1cd
 800b0cc:	0800b097 	.word	0x0800b097
 800b0d0:	0800b097 	.word	0x0800b097
 800b0d4:	0800b097 	.word	0x0800b097
 800b0d8:	0800b097 	.word	0x0800b097
 800b0dc:	0800b097 	.word	0x0800b097
 800b0e0:	0800b097 	.word	0x0800b097
 800b0e4:	0800b097 	.word	0x0800b097
 800b0e8:	0800b1e3 	.word	0x0800b1e3
 800b0ec:	0800b1b9 	.word	0x0800b1b9
 800b0f0:	0800b147 	.word	0x0800b147
 800b0f4:	0800b147 	.word	0x0800b147
 800b0f8:	0800b147 	.word	0x0800b147
 800b0fc:	0800b097 	.word	0x0800b097
 800b100:	0800b1bd 	.word	0x0800b1bd
 800b104:	0800b097 	.word	0x0800b097
 800b108:	0800b097 	.word	0x0800b097
 800b10c:	0800b097 	.word	0x0800b097
 800b110:	0800b097 	.word	0x0800b097
 800b114:	0800b1f3 	.word	0x0800b1f3
 800b118:	0800b1c5 	.word	0x0800b1c5
 800b11c:	0800b167 	.word	0x0800b167
 800b120:	0800b097 	.word	0x0800b097
 800b124:	0800b097 	.word	0x0800b097
 800b128:	0800b1ef 	.word	0x0800b1ef
 800b12c:	0800b097 	.word	0x0800b097
 800b130:	0800b1b9 	.word	0x0800b1b9
 800b134:	0800b097 	.word	0x0800b097
 800b138:	0800b097 	.word	0x0800b097
 800b13c:	0800b16f 	.word	0x0800b16f
 800b140:	3b45      	subs	r3, #69	; 0x45
 800b142:	2b02      	cmp	r3, #2
 800b144:	d8a7      	bhi.n	800b096 <__ssvfiscanf_r+0xee>
 800b146:	2305      	movs	r3, #5
 800b148:	e01b      	b.n	800b182 <__ssvfiscanf_r+0x1da>
 800b14a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b14c:	4621      	mov	r1, r4
 800b14e:	4630      	mov	r0, r6
 800b150:	4798      	blx	r3
 800b152:	2800      	cmp	r0, #0
 800b154:	f43f af68 	beq.w	800b028 <__ssvfiscanf_r+0x80>
 800b158:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b15a:	2800      	cmp	r0, #0
 800b15c:	f040 808d 	bne.w	800b27a <__ssvfiscanf_r+0x2d2>
 800b160:	f04f 30ff 	mov.w	r0, #4294967295
 800b164:	e08f      	b.n	800b286 <__ssvfiscanf_r+0x2de>
 800b166:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b168:	f042 0220 	orr.w	r2, r2, #32
 800b16c:	9241      	str	r2, [sp, #260]	; 0x104
 800b16e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b174:	9241      	str	r2, [sp, #260]	; 0x104
 800b176:	2210      	movs	r2, #16
 800b178:	2b6f      	cmp	r3, #111	; 0x6f
 800b17a:	9242      	str	r2, [sp, #264]	; 0x108
 800b17c:	bf34      	ite	cc
 800b17e:	2303      	movcc	r3, #3
 800b180:	2304      	movcs	r3, #4
 800b182:	9347      	str	r3, [sp, #284]	; 0x11c
 800b184:	6863      	ldr	r3, [r4, #4]
 800b186:	2b00      	cmp	r3, #0
 800b188:	dd42      	ble.n	800b210 <__ssvfiscanf_r+0x268>
 800b18a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b18c:	0659      	lsls	r1, r3, #25
 800b18e:	d404      	bmi.n	800b19a <__ssvfiscanf_r+0x1f2>
 800b190:	6823      	ldr	r3, [r4, #0]
 800b192:	781a      	ldrb	r2, [r3, #0]
 800b194:	5cba      	ldrb	r2, [r7, r2]
 800b196:	0712      	lsls	r2, r2, #28
 800b198:	d441      	bmi.n	800b21e <__ssvfiscanf_r+0x276>
 800b19a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b19c:	2b02      	cmp	r3, #2
 800b19e:	dc50      	bgt.n	800b242 <__ssvfiscanf_r+0x29a>
 800b1a0:	466b      	mov	r3, sp
 800b1a2:	4622      	mov	r2, r4
 800b1a4:	a941      	add	r1, sp, #260	; 0x104
 800b1a6:	4630      	mov	r0, r6
 800b1a8:	f000 fa0a 	bl	800b5c0 <_scanf_chars>
 800b1ac:	2801      	cmp	r0, #1
 800b1ae:	d06e      	beq.n	800b28e <__ssvfiscanf_r+0x2e6>
 800b1b0:	2802      	cmp	r0, #2
 800b1b2:	f47f af20 	bne.w	800aff6 <__ssvfiscanf_r+0x4e>
 800b1b6:	e7cf      	b.n	800b158 <__ssvfiscanf_r+0x1b0>
 800b1b8:	220a      	movs	r2, #10
 800b1ba:	e7dd      	b.n	800b178 <__ssvfiscanf_r+0x1d0>
 800b1bc:	2300      	movs	r3, #0
 800b1be:	9342      	str	r3, [sp, #264]	; 0x108
 800b1c0:	2303      	movs	r3, #3
 800b1c2:	e7de      	b.n	800b182 <__ssvfiscanf_r+0x1da>
 800b1c4:	2308      	movs	r3, #8
 800b1c6:	9342      	str	r3, [sp, #264]	; 0x108
 800b1c8:	2304      	movs	r3, #4
 800b1ca:	e7da      	b.n	800b182 <__ssvfiscanf_r+0x1da>
 800b1cc:	4629      	mov	r1, r5
 800b1ce:	4640      	mov	r0, r8
 800b1d0:	f000 fb62 	bl	800b898 <__sccl>
 800b1d4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b1d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1da:	9341      	str	r3, [sp, #260]	; 0x104
 800b1dc:	4605      	mov	r5, r0
 800b1de:	2301      	movs	r3, #1
 800b1e0:	e7cf      	b.n	800b182 <__ssvfiscanf_r+0x1da>
 800b1e2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b1e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1e8:	9341      	str	r3, [sp, #260]	; 0x104
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	e7c9      	b.n	800b182 <__ssvfiscanf_r+0x1da>
 800b1ee:	2302      	movs	r3, #2
 800b1f0:	e7c7      	b.n	800b182 <__ssvfiscanf_r+0x1da>
 800b1f2:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b1f4:	06c3      	lsls	r3, r0, #27
 800b1f6:	f53f aefe 	bmi.w	800aff6 <__ssvfiscanf_r+0x4e>
 800b1fa:	9b00      	ldr	r3, [sp, #0]
 800b1fc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b1fe:	1d19      	adds	r1, r3, #4
 800b200:	9100      	str	r1, [sp, #0]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f010 0f01 	tst.w	r0, #1
 800b208:	bf14      	ite	ne
 800b20a:	801a      	strhne	r2, [r3, #0]
 800b20c:	601a      	streq	r2, [r3, #0]
 800b20e:	e6f2      	b.n	800aff6 <__ssvfiscanf_r+0x4e>
 800b210:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b212:	4621      	mov	r1, r4
 800b214:	4630      	mov	r0, r6
 800b216:	4798      	blx	r3
 800b218:	2800      	cmp	r0, #0
 800b21a:	d0b6      	beq.n	800b18a <__ssvfiscanf_r+0x1e2>
 800b21c:	e79c      	b.n	800b158 <__ssvfiscanf_r+0x1b0>
 800b21e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b220:	3201      	adds	r2, #1
 800b222:	9245      	str	r2, [sp, #276]	; 0x114
 800b224:	6862      	ldr	r2, [r4, #4]
 800b226:	3a01      	subs	r2, #1
 800b228:	2a00      	cmp	r2, #0
 800b22a:	6062      	str	r2, [r4, #4]
 800b22c:	dd02      	ble.n	800b234 <__ssvfiscanf_r+0x28c>
 800b22e:	3301      	adds	r3, #1
 800b230:	6023      	str	r3, [r4, #0]
 800b232:	e7ad      	b.n	800b190 <__ssvfiscanf_r+0x1e8>
 800b234:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b236:	4621      	mov	r1, r4
 800b238:	4630      	mov	r0, r6
 800b23a:	4798      	blx	r3
 800b23c:	2800      	cmp	r0, #0
 800b23e:	d0a7      	beq.n	800b190 <__ssvfiscanf_r+0x1e8>
 800b240:	e78a      	b.n	800b158 <__ssvfiscanf_r+0x1b0>
 800b242:	2b04      	cmp	r3, #4
 800b244:	dc0e      	bgt.n	800b264 <__ssvfiscanf_r+0x2bc>
 800b246:	466b      	mov	r3, sp
 800b248:	4622      	mov	r2, r4
 800b24a:	a941      	add	r1, sp, #260	; 0x104
 800b24c:	4630      	mov	r0, r6
 800b24e:	f000 fa11 	bl	800b674 <_scanf_i>
 800b252:	e7ab      	b.n	800b1ac <__ssvfiscanf_r+0x204>
 800b254:	0800aef5 	.word	0x0800aef5
 800b258:	0800af6f 	.word	0x0800af6f
 800b25c:	0800c79d 	.word	0x0800c79d
 800b260:	0800cb02 	.word	0x0800cb02
 800b264:	4b0b      	ldr	r3, [pc, #44]	; (800b294 <__ssvfiscanf_r+0x2ec>)
 800b266:	2b00      	cmp	r3, #0
 800b268:	f43f aec5 	beq.w	800aff6 <__ssvfiscanf_r+0x4e>
 800b26c:	466b      	mov	r3, sp
 800b26e:	4622      	mov	r2, r4
 800b270:	a941      	add	r1, sp, #260	; 0x104
 800b272:	4630      	mov	r0, r6
 800b274:	f3af 8000 	nop.w
 800b278:	e798      	b.n	800b1ac <__ssvfiscanf_r+0x204>
 800b27a:	89a3      	ldrh	r3, [r4, #12]
 800b27c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b280:	bf18      	it	ne
 800b282:	f04f 30ff 	movne.w	r0, #4294967295
 800b286:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b28a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b28e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b290:	e7f9      	b.n	800b286 <__ssvfiscanf_r+0x2de>
 800b292:	bf00      	nop
 800b294:	00000000 	.word	0x00000000

0800b298 <_printf_common>:
 800b298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b29c:	4616      	mov	r6, r2
 800b29e:	4699      	mov	r9, r3
 800b2a0:	688a      	ldr	r2, [r1, #8]
 800b2a2:	690b      	ldr	r3, [r1, #16]
 800b2a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	bfb8      	it	lt
 800b2ac:	4613      	movlt	r3, r2
 800b2ae:	6033      	str	r3, [r6, #0]
 800b2b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b2b4:	4607      	mov	r7, r0
 800b2b6:	460c      	mov	r4, r1
 800b2b8:	b10a      	cbz	r2, 800b2be <_printf_common+0x26>
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	6033      	str	r3, [r6, #0]
 800b2be:	6823      	ldr	r3, [r4, #0]
 800b2c0:	0699      	lsls	r1, r3, #26
 800b2c2:	bf42      	ittt	mi
 800b2c4:	6833      	ldrmi	r3, [r6, #0]
 800b2c6:	3302      	addmi	r3, #2
 800b2c8:	6033      	strmi	r3, [r6, #0]
 800b2ca:	6825      	ldr	r5, [r4, #0]
 800b2cc:	f015 0506 	ands.w	r5, r5, #6
 800b2d0:	d106      	bne.n	800b2e0 <_printf_common+0x48>
 800b2d2:	f104 0a19 	add.w	sl, r4, #25
 800b2d6:	68e3      	ldr	r3, [r4, #12]
 800b2d8:	6832      	ldr	r2, [r6, #0]
 800b2da:	1a9b      	subs	r3, r3, r2
 800b2dc:	42ab      	cmp	r3, r5
 800b2de:	dc26      	bgt.n	800b32e <_printf_common+0x96>
 800b2e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b2e4:	1e13      	subs	r3, r2, #0
 800b2e6:	6822      	ldr	r2, [r4, #0]
 800b2e8:	bf18      	it	ne
 800b2ea:	2301      	movne	r3, #1
 800b2ec:	0692      	lsls	r2, r2, #26
 800b2ee:	d42b      	bmi.n	800b348 <_printf_common+0xb0>
 800b2f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b2f4:	4649      	mov	r1, r9
 800b2f6:	4638      	mov	r0, r7
 800b2f8:	47c0      	blx	r8
 800b2fa:	3001      	adds	r0, #1
 800b2fc:	d01e      	beq.n	800b33c <_printf_common+0xa4>
 800b2fe:	6823      	ldr	r3, [r4, #0]
 800b300:	68e5      	ldr	r5, [r4, #12]
 800b302:	6832      	ldr	r2, [r6, #0]
 800b304:	f003 0306 	and.w	r3, r3, #6
 800b308:	2b04      	cmp	r3, #4
 800b30a:	bf08      	it	eq
 800b30c:	1aad      	subeq	r5, r5, r2
 800b30e:	68a3      	ldr	r3, [r4, #8]
 800b310:	6922      	ldr	r2, [r4, #16]
 800b312:	bf0c      	ite	eq
 800b314:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b318:	2500      	movne	r5, #0
 800b31a:	4293      	cmp	r3, r2
 800b31c:	bfc4      	itt	gt
 800b31e:	1a9b      	subgt	r3, r3, r2
 800b320:	18ed      	addgt	r5, r5, r3
 800b322:	2600      	movs	r6, #0
 800b324:	341a      	adds	r4, #26
 800b326:	42b5      	cmp	r5, r6
 800b328:	d11a      	bne.n	800b360 <_printf_common+0xc8>
 800b32a:	2000      	movs	r0, #0
 800b32c:	e008      	b.n	800b340 <_printf_common+0xa8>
 800b32e:	2301      	movs	r3, #1
 800b330:	4652      	mov	r2, sl
 800b332:	4649      	mov	r1, r9
 800b334:	4638      	mov	r0, r7
 800b336:	47c0      	blx	r8
 800b338:	3001      	adds	r0, #1
 800b33a:	d103      	bne.n	800b344 <_printf_common+0xac>
 800b33c:	f04f 30ff 	mov.w	r0, #4294967295
 800b340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b344:	3501      	adds	r5, #1
 800b346:	e7c6      	b.n	800b2d6 <_printf_common+0x3e>
 800b348:	18e1      	adds	r1, r4, r3
 800b34a:	1c5a      	adds	r2, r3, #1
 800b34c:	2030      	movs	r0, #48	; 0x30
 800b34e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b352:	4422      	add	r2, r4
 800b354:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b358:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b35c:	3302      	adds	r3, #2
 800b35e:	e7c7      	b.n	800b2f0 <_printf_common+0x58>
 800b360:	2301      	movs	r3, #1
 800b362:	4622      	mov	r2, r4
 800b364:	4649      	mov	r1, r9
 800b366:	4638      	mov	r0, r7
 800b368:	47c0      	blx	r8
 800b36a:	3001      	adds	r0, #1
 800b36c:	d0e6      	beq.n	800b33c <_printf_common+0xa4>
 800b36e:	3601      	adds	r6, #1
 800b370:	e7d9      	b.n	800b326 <_printf_common+0x8e>
	...

0800b374 <_printf_i>:
 800b374:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b378:	7e0f      	ldrb	r7, [r1, #24]
 800b37a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b37c:	2f78      	cmp	r7, #120	; 0x78
 800b37e:	4691      	mov	r9, r2
 800b380:	4680      	mov	r8, r0
 800b382:	460c      	mov	r4, r1
 800b384:	469a      	mov	sl, r3
 800b386:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b38a:	d807      	bhi.n	800b39c <_printf_i+0x28>
 800b38c:	2f62      	cmp	r7, #98	; 0x62
 800b38e:	d80a      	bhi.n	800b3a6 <_printf_i+0x32>
 800b390:	2f00      	cmp	r7, #0
 800b392:	f000 80d8 	beq.w	800b546 <_printf_i+0x1d2>
 800b396:	2f58      	cmp	r7, #88	; 0x58
 800b398:	f000 80a3 	beq.w	800b4e2 <_printf_i+0x16e>
 800b39c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b3a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b3a4:	e03a      	b.n	800b41c <_printf_i+0xa8>
 800b3a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b3aa:	2b15      	cmp	r3, #21
 800b3ac:	d8f6      	bhi.n	800b39c <_printf_i+0x28>
 800b3ae:	a101      	add	r1, pc, #4	; (adr r1, 800b3b4 <_printf_i+0x40>)
 800b3b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b3b4:	0800b40d 	.word	0x0800b40d
 800b3b8:	0800b421 	.word	0x0800b421
 800b3bc:	0800b39d 	.word	0x0800b39d
 800b3c0:	0800b39d 	.word	0x0800b39d
 800b3c4:	0800b39d 	.word	0x0800b39d
 800b3c8:	0800b39d 	.word	0x0800b39d
 800b3cc:	0800b421 	.word	0x0800b421
 800b3d0:	0800b39d 	.word	0x0800b39d
 800b3d4:	0800b39d 	.word	0x0800b39d
 800b3d8:	0800b39d 	.word	0x0800b39d
 800b3dc:	0800b39d 	.word	0x0800b39d
 800b3e0:	0800b52d 	.word	0x0800b52d
 800b3e4:	0800b451 	.word	0x0800b451
 800b3e8:	0800b50f 	.word	0x0800b50f
 800b3ec:	0800b39d 	.word	0x0800b39d
 800b3f0:	0800b39d 	.word	0x0800b39d
 800b3f4:	0800b54f 	.word	0x0800b54f
 800b3f8:	0800b39d 	.word	0x0800b39d
 800b3fc:	0800b451 	.word	0x0800b451
 800b400:	0800b39d 	.word	0x0800b39d
 800b404:	0800b39d 	.word	0x0800b39d
 800b408:	0800b517 	.word	0x0800b517
 800b40c:	682b      	ldr	r3, [r5, #0]
 800b40e:	1d1a      	adds	r2, r3, #4
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	602a      	str	r2, [r5, #0]
 800b414:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b418:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b41c:	2301      	movs	r3, #1
 800b41e:	e0a3      	b.n	800b568 <_printf_i+0x1f4>
 800b420:	6820      	ldr	r0, [r4, #0]
 800b422:	6829      	ldr	r1, [r5, #0]
 800b424:	0606      	lsls	r6, r0, #24
 800b426:	f101 0304 	add.w	r3, r1, #4
 800b42a:	d50a      	bpl.n	800b442 <_printf_i+0xce>
 800b42c:	680e      	ldr	r6, [r1, #0]
 800b42e:	602b      	str	r3, [r5, #0]
 800b430:	2e00      	cmp	r6, #0
 800b432:	da03      	bge.n	800b43c <_printf_i+0xc8>
 800b434:	232d      	movs	r3, #45	; 0x2d
 800b436:	4276      	negs	r6, r6
 800b438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b43c:	485e      	ldr	r0, [pc, #376]	; (800b5b8 <_printf_i+0x244>)
 800b43e:	230a      	movs	r3, #10
 800b440:	e019      	b.n	800b476 <_printf_i+0x102>
 800b442:	680e      	ldr	r6, [r1, #0]
 800b444:	602b      	str	r3, [r5, #0]
 800b446:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b44a:	bf18      	it	ne
 800b44c:	b236      	sxthne	r6, r6
 800b44e:	e7ef      	b.n	800b430 <_printf_i+0xbc>
 800b450:	682b      	ldr	r3, [r5, #0]
 800b452:	6820      	ldr	r0, [r4, #0]
 800b454:	1d19      	adds	r1, r3, #4
 800b456:	6029      	str	r1, [r5, #0]
 800b458:	0601      	lsls	r1, r0, #24
 800b45a:	d501      	bpl.n	800b460 <_printf_i+0xec>
 800b45c:	681e      	ldr	r6, [r3, #0]
 800b45e:	e002      	b.n	800b466 <_printf_i+0xf2>
 800b460:	0646      	lsls	r6, r0, #25
 800b462:	d5fb      	bpl.n	800b45c <_printf_i+0xe8>
 800b464:	881e      	ldrh	r6, [r3, #0]
 800b466:	4854      	ldr	r0, [pc, #336]	; (800b5b8 <_printf_i+0x244>)
 800b468:	2f6f      	cmp	r7, #111	; 0x6f
 800b46a:	bf0c      	ite	eq
 800b46c:	2308      	moveq	r3, #8
 800b46e:	230a      	movne	r3, #10
 800b470:	2100      	movs	r1, #0
 800b472:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b476:	6865      	ldr	r5, [r4, #4]
 800b478:	60a5      	str	r5, [r4, #8]
 800b47a:	2d00      	cmp	r5, #0
 800b47c:	bfa2      	ittt	ge
 800b47e:	6821      	ldrge	r1, [r4, #0]
 800b480:	f021 0104 	bicge.w	r1, r1, #4
 800b484:	6021      	strge	r1, [r4, #0]
 800b486:	b90e      	cbnz	r6, 800b48c <_printf_i+0x118>
 800b488:	2d00      	cmp	r5, #0
 800b48a:	d04d      	beq.n	800b528 <_printf_i+0x1b4>
 800b48c:	4615      	mov	r5, r2
 800b48e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b492:	fb03 6711 	mls	r7, r3, r1, r6
 800b496:	5dc7      	ldrb	r7, [r0, r7]
 800b498:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b49c:	4637      	mov	r7, r6
 800b49e:	42bb      	cmp	r3, r7
 800b4a0:	460e      	mov	r6, r1
 800b4a2:	d9f4      	bls.n	800b48e <_printf_i+0x11a>
 800b4a4:	2b08      	cmp	r3, #8
 800b4a6:	d10b      	bne.n	800b4c0 <_printf_i+0x14c>
 800b4a8:	6823      	ldr	r3, [r4, #0]
 800b4aa:	07de      	lsls	r6, r3, #31
 800b4ac:	d508      	bpl.n	800b4c0 <_printf_i+0x14c>
 800b4ae:	6923      	ldr	r3, [r4, #16]
 800b4b0:	6861      	ldr	r1, [r4, #4]
 800b4b2:	4299      	cmp	r1, r3
 800b4b4:	bfde      	ittt	le
 800b4b6:	2330      	movle	r3, #48	; 0x30
 800b4b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b4bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b4c0:	1b52      	subs	r2, r2, r5
 800b4c2:	6122      	str	r2, [r4, #16]
 800b4c4:	f8cd a000 	str.w	sl, [sp]
 800b4c8:	464b      	mov	r3, r9
 800b4ca:	aa03      	add	r2, sp, #12
 800b4cc:	4621      	mov	r1, r4
 800b4ce:	4640      	mov	r0, r8
 800b4d0:	f7ff fee2 	bl	800b298 <_printf_common>
 800b4d4:	3001      	adds	r0, #1
 800b4d6:	d14c      	bne.n	800b572 <_printf_i+0x1fe>
 800b4d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4dc:	b004      	add	sp, #16
 800b4de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4e2:	4835      	ldr	r0, [pc, #212]	; (800b5b8 <_printf_i+0x244>)
 800b4e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b4e8:	6829      	ldr	r1, [r5, #0]
 800b4ea:	6823      	ldr	r3, [r4, #0]
 800b4ec:	f851 6b04 	ldr.w	r6, [r1], #4
 800b4f0:	6029      	str	r1, [r5, #0]
 800b4f2:	061d      	lsls	r5, r3, #24
 800b4f4:	d514      	bpl.n	800b520 <_printf_i+0x1ac>
 800b4f6:	07df      	lsls	r7, r3, #31
 800b4f8:	bf44      	itt	mi
 800b4fa:	f043 0320 	orrmi.w	r3, r3, #32
 800b4fe:	6023      	strmi	r3, [r4, #0]
 800b500:	b91e      	cbnz	r6, 800b50a <_printf_i+0x196>
 800b502:	6823      	ldr	r3, [r4, #0]
 800b504:	f023 0320 	bic.w	r3, r3, #32
 800b508:	6023      	str	r3, [r4, #0]
 800b50a:	2310      	movs	r3, #16
 800b50c:	e7b0      	b.n	800b470 <_printf_i+0xfc>
 800b50e:	6823      	ldr	r3, [r4, #0]
 800b510:	f043 0320 	orr.w	r3, r3, #32
 800b514:	6023      	str	r3, [r4, #0]
 800b516:	2378      	movs	r3, #120	; 0x78
 800b518:	4828      	ldr	r0, [pc, #160]	; (800b5bc <_printf_i+0x248>)
 800b51a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b51e:	e7e3      	b.n	800b4e8 <_printf_i+0x174>
 800b520:	0659      	lsls	r1, r3, #25
 800b522:	bf48      	it	mi
 800b524:	b2b6      	uxthmi	r6, r6
 800b526:	e7e6      	b.n	800b4f6 <_printf_i+0x182>
 800b528:	4615      	mov	r5, r2
 800b52a:	e7bb      	b.n	800b4a4 <_printf_i+0x130>
 800b52c:	682b      	ldr	r3, [r5, #0]
 800b52e:	6826      	ldr	r6, [r4, #0]
 800b530:	6961      	ldr	r1, [r4, #20]
 800b532:	1d18      	adds	r0, r3, #4
 800b534:	6028      	str	r0, [r5, #0]
 800b536:	0635      	lsls	r5, r6, #24
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	d501      	bpl.n	800b540 <_printf_i+0x1cc>
 800b53c:	6019      	str	r1, [r3, #0]
 800b53e:	e002      	b.n	800b546 <_printf_i+0x1d2>
 800b540:	0670      	lsls	r0, r6, #25
 800b542:	d5fb      	bpl.n	800b53c <_printf_i+0x1c8>
 800b544:	8019      	strh	r1, [r3, #0]
 800b546:	2300      	movs	r3, #0
 800b548:	6123      	str	r3, [r4, #16]
 800b54a:	4615      	mov	r5, r2
 800b54c:	e7ba      	b.n	800b4c4 <_printf_i+0x150>
 800b54e:	682b      	ldr	r3, [r5, #0]
 800b550:	1d1a      	adds	r2, r3, #4
 800b552:	602a      	str	r2, [r5, #0]
 800b554:	681d      	ldr	r5, [r3, #0]
 800b556:	6862      	ldr	r2, [r4, #4]
 800b558:	2100      	movs	r1, #0
 800b55a:	4628      	mov	r0, r5
 800b55c:	f7f4 fe50 	bl	8000200 <memchr>
 800b560:	b108      	cbz	r0, 800b566 <_printf_i+0x1f2>
 800b562:	1b40      	subs	r0, r0, r5
 800b564:	6060      	str	r0, [r4, #4]
 800b566:	6863      	ldr	r3, [r4, #4]
 800b568:	6123      	str	r3, [r4, #16]
 800b56a:	2300      	movs	r3, #0
 800b56c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b570:	e7a8      	b.n	800b4c4 <_printf_i+0x150>
 800b572:	6923      	ldr	r3, [r4, #16]
 800b574:	462a      	mov	r2, r5
 800b576:	4649      	mov	r1, r9
 800b578:	4640      	mov	r0, r8
 800b57a:	47d0      	blx	sl
 800b57c:	3001      	adds	r0, #1
 800b57e:	d0ab      	beq.n	800b4d8 <_printf_i+0x164>
 800b580:	6823      	ldr	r3, [r4, #0]
 800b582:	079b      	lsls	r3, r3, #30
 800b584:	d413      	bmi.n	800b5ae <_printf_i+0x23a>
 800b586:	68e0      	ldr	r0, [r4, #12]
 800b588:	9b03      	ldr	r3, [sp, #12]
 800b58a:	4298      	cmp	r0, r3
 800b58c:	bfb8      	it	lt
 800b58e:	4618      	movlt	r0, r3
 800b590:	e7a4      	b.n	800b4dc <_printf_i+0x168>
 800b592:	2301      	movs	r3, #1
 800b594:	4632      	mov	r2, r6
 800b596:	4649      	mov	r1, r9
 800b598:	4640      	mov	r0, r8
 800b59a:	47d0      	blx	sl
 800b59c:	3001      	adds	r0, #1
 800b59e:	d09b      	beq.n	800b4d8 <_printf_i+0x164>
 800b5a0:	3501      	adds	r5, #1
 800b5a2:	68e3      	ldr	r3, [r4, #12]
 800b5a4:	9903      	ldr	r1, [sp, #12]
 800b5a6:	1a5b      	subs	r3, r3, r1
 800b5a8:	42ab      	cmp	r3, r5
 800b5aa:	dcf2      	bgt.n	800b592 <_printf_i+0x21e>
 800b5ac:	e7eb      	b.n	800b586 <_printf_i+0x212>
 800b5ae:	2500      	movs	r5, #0
 800b5b0:	f104 0619 	add.w	r6, r4, #25
 800b5b4:	e7f5      	b.n	800b5a2 <_printf_i+0x22e>
 800b5b6:	bf00      	nop
 800b5b8:	0800cb0d 	.word	0x0800cb0d
 800b5bc:	0800cb1e 	.word	0x0800cb1e

0800b5c0 <_scanf_chars>:
 800b5c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5c4:	4615      	mov	r5, r2
 800b5c6:	688a      	ldr	r2, [r1, #8]
 800b5c8:	4680      	mov	r8, r0
 800b5ca:	460c      	mov	r4, r1
 800b5cc:	b932      	cbnz	r2, 800b5dc <_scanf_chars+0x1c>
 800b5ce:	698a      	ldr	r2, [r1, #24]
 800b5d0:	2a00      	cmp	r2, #0
 800b5d2:	bf0c      	ite	eq
 800b5d4:	2201      	moveq	r2, #1
 800b5d6:	f04f 32ff 	movne.w	r2, #4294967295
 800b5da:	608a      	str	r2, [r1, #8]
 800b5dc:	6822      	ldr	r2, [r4, #0]
 800b5de:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800b670 <_scanf_chars+0xb0>
 800b5e2:	06d1      	lsls	r1, r2, #27
 800b5e4:	bf5f      	itttt	pl
 800b5e6:	681a      	ldrpl	r2, [r3, #0]
 800b5e8:	1d11      	addpl	r1, r2, #4
 800b5ea:	6019      	strpl	r1, [r3, #0]
 800b5ec:	6816      	ldrpl	r6, [r2, #0]
 800b5ee:	2700      	movs	r7, #0
 800b5f0:	69a0      	ldr	r0, [r4, #24]
 800b5f2:	b188      	cbz	r0, 800b618 <_scanf_chars+0x58>
 800b5f4:	2801      	cmp	r0, #1
 800b5f6:	d107      	bne.n	800b608 <_scanf_chars+0x48>
 800b5f8:	682a      	ldr	r2, [r5, #0]
 800b5fa:	7811      	ldrb	r1, [r2, #0]
 800b5fc:	6962      	ldr	r2, [r4, #20]
 800b5fe:	5c52      	ldrb	r2, [r2, r1]
 800b600:	b952      	cbnz	r2, 800b618 <_scanf_chars+0x58>
 800b602:	2f00      	cmp	r7, #0
 800b604:	d031      	beq.n	800b66a <_scanf_chars+0xaa>
 800b606:	e022      	b.n	800b64e <_scanf_chars+0x8e>
 800b608:	2802      	cmp	r0, #2
 800b60a:	d120      	bne.n	800b64e <_scanf_chars+0x8e>
 800b60c:	682b      	ldr	r3, [r5, #0]
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b614:	071b      	lsls	r3, r3, #28
 800b616:	d41a      	bmi.n	800b64e <_scanf_chars+0x8e>
 800b618:	6823      	ldr	r3, [r4, #0]
 800b61a:	06da      	lsls	r2, r3, #27
 800b61c:	bf5e      	ittt	pl
 800b61e:	682b      	ldrpl	r3, [r5, #0]
 800b620:	781b      	ldrbpl	r3, [r3, #0]
 800b622:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b626:	682a      	ldr	r2, [r5, #0]
 800b628:	686b      	ldr	r3, [r5, #4]
 800b62a:	3201      	adds	r2, #1
 800b62c:	602a      	str	r2, [r5, #0]
 800b62e:	68a2      	ldr	r2, [r4, #8]
 800b630:	3b01      	subs	r3, #1
 800b632:	3a01      	subs	r2, #1
 800b634:	606b      	str	r3, [r5, #4]
 800b636:	3701      	adds	r7, #1
 800b638:	60a2      	str	r2, [r4, #8]
 800b63a:	b142      	cbz	r2, 800b64e <_scanf_chars+0x8e>
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	dcd7      	bgt.n	800b5f0 <_scanf_chars+0x30>
 800b640:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b644:	4629      	mov	r1, r5
 800b646:	4640      	mov	r0, r8
 800b648:	4798      	blx	r3
 800b64a:	2800      	cmp	r0, #0
 800b64c:	d0d0      	beq.n	800b5f0 <_scanf_chars+0x30>
 800b64e:	6823      	ldr	r3, [r4, #0]
 800b650:	f013 0310 	ands.w	r3, r3, #16
 800b654:	d105      	bne.n	800b662 <_scanf_chars+0xa2>
 800b656:	68e2      	ldr	r2, [r4, #12]
 800b658:	3201      	adds	r2, #1
 800b65a:	60e2      	str	r2, [r4, #12]
 800b65c:	69a2      	ldr	r2, [r4, #24]
 800b65e:	b102      	cbz	r2, 800b662 <_scanf_chars+0xa2>
 800b660:	7033      	strb	r3, [r6, #0]
 800b662:	6923      	ldr	r3, [r4, #16]
 800b664:	443b      	add	r3, r7
 800b666:	6123      	str	r3, [r4, #16]
 800b668:	2000      	movs	r0, #0
 800b66a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b66e:	bf00      	nop
 800b670:	0800c79d 	.word	0x0800c79d

0800b674 <_scanf_i>:
 800b674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b678:	4698      	mov	r8, r3
 800b67a:	4b76      	ldr	r3, [pc, #472]	; (800b854 <_scanf_i+0x1e0>)
 800b67c:	460c      	mov	r4, r1
 800b67e:	4682      	mov	sl, r0
 800b680:	4616      	mov	r6, r2
 800b682:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b686:	b087      	sub	sp, #28
 800b688:	ab03      	add	r3, sp, #12
 800b68a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b68e:	4b72      	ldr	r3, [pc, #456]	; (800b858 <_scanf_i+0x1e4>)
 800b690:	69a1      	ldr	r1, [r4, #24]
 800b692:	4a72      	ldr	r2, [pc, #456]	; (800b85c <_scanf_i+0x1e8>)
 800b694:	2903      	cmp	r1, #3
 800b696:	bf18      	it	ne
 800b698:	461a      	movne	r2, r3
 800b69a:	68a3      	ldr	r3, [r4, #8]
 800b69c:	9201      	str	r2, [sp, #4]
 800b69e:	1e5a      	subs	r2, r3, #1
 800b6a0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b6a4:	bf88      	it	hi
 800b6a6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b6aa:	4627      	mov	r7, r4
 800b6ac:	bf82      	ittt	hi
 800b6ae:	eb03 0905 	addhi.w	r9, r3, r5
 800b6b2:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b6b6:	60a3      	strhi	r3, [r4, #8]
 800b6b8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b6bc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b6c0:	bf98      	it	ls
 800b6c2:	f04f 0900 	movls.w	r9, #0
 800b6c6:	6023      	str	r3, [r4, #0]
 800b6c8:	463d      	mov	r5, r7
 800b6ca:	f04f 0b00 	mov.w	fp, #0
 800b6ce:	6831      	ldr	r1, [r6, #0]
 800b6d0:	ab03      	add	r3, sp, #12
 800b6d2:	7809      	ldrb	r1, [r1, #0]
 800b6d4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b6d8:	2202      	movs	r2, #2
 800b6da:	f7f4 fd91 	bl	8000200 <memchr>
 800b6de:	b328      	cbz	r0, 800b72c <_scanf_i+0xb8>
 800b6e0:	f1bb 0f01 	cmp.w	fp, #1
 800b6e4:	d159      	bne.n	800b79a <_scanf_i+0x126>
 800b6e6:	6862      	ldr	r2, [r4, #4]
 800b6e8:	b92a      	cbnz	r2, 800b6f6 <_scanf_i+0x82>
 800b6ea:	6822      	ldr	r2, [r4, #0]
 800b6ec:	2308      	movs	r3, #8
 800b6ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b6f2:	6063      	str	r3, [r4, #4]
 800b6f4:	6022      	str	r2, [r4, #0]
 800b6f6:	6822      	ldr	r2, [r4, #0]
 800b6f8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b6fc:	6022      	str	r2, [r4, #0]
 800b6fe:	68a2      	ldr	r2, [r4, #8]
 800b700:	1e51      	subs	r1, r2, #1
 800b702:	60a1      	str	r1, [r4, #8]
 800b704:	b192      	cbz	r2, 800b72c <_scanf_i+0xb8>
 800b706:	6832      	ldr	r2, [r6, #0]
 800b708:	1c51      	adds	r1, r2, #1
 800b70a:	6031      	str	r1, [r6, #0]
 800b70c:	7812      	ldrb	r2, [r2, #0]
 800b70e:	f805 2b01 	strb.w	r2, [r5], #1
 800b712:	6872      	ldr	r2, [r6, #4]
 800b714:	3a01      	subs	r2, #1
 800b716:	2a00      	cmp	r2, #0
 800b718:	6072      	str	r2, [r6, #4]
 800b71a:	dc07      	bgt.n	800b72c <_scanf_i+0xb8>
 800b71c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b720:	4631      	mov	r1, r6
 800b722:	4650      	mov	r0, sl
 800b724:	4790      	blx	r2
 800b726:	2800      	cmp	r0, #0
 800b728:	f040 8085 	bne.w	800b836 <_scanf_i+0x1c2>
 800b72c:	f10b 0b01 	add.w	fp, fp, #1
 800b730:	f1bb 0f03 	cmp.w	fp, #3
 800b734:	d1cb      	bne.n	800b6ce <_scanf_i+0x5a>
 800b736:	6863      	ldr	r3, [r4, #4]
 800b738:	b90b      	cbnz	r3, 800b73e <_scanf_i+0xca>
 800b73a:	230a      	movs	r3, #10
 800b73c:	6063      	str	r3, [r4, #4]
 800b73e:	6863      	ldr	r3, [r4, #4]
 800b740:	4947      	ldr	r1, [pc, #284]	; (800b860 <_scanf_i+0x1ec>)
 800b742:	6960      	ldr	r0, [r4, #20]
 800b744:	1ac9      	subs	r1, r1, r3
 800b746:	f000 f8a7 	bl	800b898 <__sccl>
 800b74a:	f04f 0b00 	mov.w	fp, #0
 800b74e:	68a3      	ldr	r3, [r4, #8]
 800b750:	6822      	ldr	r2, [r4, #0]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d03d      	beq.n	800b7d2 <_scanf_i+0x15e>
 800b756:	6831      	ldr	r1, [r6, #0]
 800b758:	6960      	ldr	r0, [r4, #20]
 800b75a:	f891 c000 	ldrb.w	ip, [r1]
 800b75e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b762:	2800      	cmp	r0, #0
 800b764:	d035      	beq.n	800b7d2 <_scanf_i+0x15e>
 800b766:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b76a:	d124      	bne.n	800b7b6 <_scanf_i+0x142>
 800b76c:	0510      	lsls	r0, r2, #20
 800b76e:	d522      	bpl.n	800b7b6 <_scanf_i+0x142>
 800b770:	f10b 0b01 	add.w	fp, fp, #1
 800b774:	f1b9 0f00 	cmp.w	r9, #0
 800b778:	d003      	beq.n	800b782 <_scanf_i+0x10e>
 800b77a:	3301      	adds	r3, #1
 800b77c:	f109 39ff 	add.w	r9, r9, #4294967295
 800b780:	60a3      	str	r3, [r4, #8]
 800b782:	6873      	ldr	r3, [r6, #4]
 800b784:	3b01      	subs	r3, #1
 800b786:	2b00      	cmp	r3, #0
 800b788:	6073      	str	r3, [r6, #4]
 800b78a:	dd1b      	ble.n	800b7c4 <_scanf_i+0x150>
 800b78c:	6833      	ldr	r3, [r6, #0]
 800b78e:	3301      	adds	r3, #1
 800b790:	6033      	str	r3, [r6, #0]
 800b792:	68a3      	ldr	r3, [r4, #8]
 800b794:	3b01      	subs	r3, #1
 800b796:	60a3      	str	r3, [r4, #8]
 800b798:	e7d9      	b.n	800b74e <_scanf_i+0xda>
 800b79a:	f1bb 0f02 	cmp.w	fp, #2
 800b79e:	d1ae      	bne.n	800b6fe <_scanf_i+0x8a>
 800b7a0:	6822      	ldr	r2, [r4, #0]
 800b7a2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b7a6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b7aa:	d1bf      	bne.n	800b72c <_scanf_i+0xb8>
 800b7ac:	2310      	movs	r3, #16
 800b7ae:	6063      	str	r3, [r4, #4]
 800b7b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b7b4:	e7a2      	b.n	800b6fc <_scanf_i+0x88>
 800b7b6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b7ba:	6022      	str	r2, [r4, #0]
 800b7bc:	780b      	ldrb	r3, [r1, #0]
 800b7be:	f805 3b01 	strb.w	r3, [r5], #1
 800b7c2:	e7de      	b.n	800b782 <_scanf_i+0x10e>
 800b7c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b7c8:	4631      	mov	r1, r6
 800b7ca:	4650      	mov	r0, sl
 800b7cc:	4798      	blx	r3
 800b7ce:	2800      	cmp	r0, #0
 800b7d0:	d0df      	beq.n	800b792 <_scanf_i+0x11e>
 800b7d2:	6823      	ldr	r3, [r4, #0]
 800b7d4:	05db      	lsls	r3, r3, #23
 800b7d6:	d50d      	bpl.n	800b7f4 <_scanf_i+0x180>
 800b7d8:	42bd      	cmp	r5, r7
 800b7da:	d909      	bls.n	800b7f0 <_scanf_i+0x17c>
 800b7dc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b7e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b7e4:	4632      	mov	r2, r6
 800b7e6:	4650      	mov	r0, sl
 800b7e8:	4798      	blx	r3
 800b7ea:	f105 39ff 	add.w	r9, r5, #4294967295
 800b7ee:	464d      	mov	r5, r9
 800b7f0:	42bd      	cmp	r5, r7
 800b7f2:	d02d      	beq.n	800b850 <_scanf_i+0x1dc>
 800b7f4:	6822      	ldr	r2, [r4, #0]
 800b7f6:	f012 0210 	ands.w	r2, r2, #16
 800b7fa:	d113      	bne.n	800b824 <_scanf_i+0x1b0>
 800b7fc:	702a      	strb	r2, [r5, #0]
 800b7fe:	6863      	ldr	r3, [r4, #4]
 800b800:	9e01      	ldr	r6, [sp, #4]
 800b802:	4639      	mov	r1, r7
 800b804:	4650      	mov	r0, sl
 800b806:	47b0      	blx	r6
 800b808:	6821      	ldr	r1, [r4, #0]
 800b80a:	f8d8 3000 	ldr.w	r3, [r8]
 800b80e:	f011 0f20 	tst.w	r1, #32
 800b812:	d013      	beq.n	800b83c <_scanf_i+0x1c8>
 800b814:	1d1a      	adds	r2, r3, #4
 800b816:	f8c8 2000 	str.w	r2, [r8]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	6018      	str	r0, [r3, #0]
 800b81e:	68e3      	ldr	r3, [r4, #12]
 800b820:	3301      	adds	r3, #1
 800b822:	60e3      	str	r3, [r4, #12]
 800b824:	1bed      	subs	r5, r5, r7
 800b826:	44ab      	add	fp, r5
 800b828:	6925      	ldr	r5, [r4, #16]
 800b82a:	445d      	add	r5, fp
 800b82c:	6125      	str	r5, [r4, #16]
 800b82e:	2000      	movs	r0, #0
 800b830:	b007      	add	sp, #28
 800b832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b836:	f04f 0b00 	mov.w	fp, #0
 800b83a:	e7ca      	b.n	800b7d2 <_scanf_i+0x15e>
 800b83c:	1d1a      	adds	r2, r3, #4
 800b83e:	f8c8 2000 	str.w	r2, [r8]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f011 0f01 	tst.w	r1, #1
 800b848:	bf14      	ite	ne
 800b84a:	8018      	strhne	r0, [r3, #0]
 800b84c:	6018      	streq	r0, [r3, #0]
 800b84e:	e7e6      	b.n	800b81e <_scanf_i+0x1aa>
 800b850:	2001      	movs	r0, #1
 800b852:	e7ed      	b.n	800b830 <_scanf_i+0x1bc>
 800b854:	0800c744 	.word	0x0800c744
 800b858:	0800baf5 	.word	0x0800baf5
 800b85c:	0800ba0d 	.word	0x0800ba0d
 800b860:	0800cb48 	.word	0x0800cb48

0800b864 <_read_r>:
 800b864:	b538      	push	{r3, r4, r5, lr}
 800b866:	4d07      	ldr	r5, [pc, #28]	; (800b884 <_read_r+0x20>)
 800b868:	4604      	mov	r4, r0
 800b86a:	4608      	mov	r0, r1
 800b86c:	4611      	mov	r1, r2
 800b86e:	2200      	movs	r2, #0
 800b870:	602a      	str	r2, [r5, #0]
 800b872:	461a      	mov	r2, r3
 800b874:	f7f8 fcba 	bl	80041ec <_read>
 800b878:	1c43      	adds	r3, r0, #1
 800b87a:	d102      	bne.n	800b882 <_read_r+0x1e>
 800b87c:	682b      	ldr	r3, [r5, #0]
 800b87e:	b103      	cbz	r3, 800b882 <_read_r+0x1e>
 800b880:	6023      	str	r3, [r4, #0]
 800b882:	bd38      	pop	{r3, r4, r5, pc}
 800b884:	200005e4 	.word	0x200005e4

0800b888 <nan>:
 800b888:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b890 <nan+0x8>
 800b88c:	4770      	bx	lr
 800b88e:	bf00      	nop
 800b890:	00000000 	.word	0x00000000
 800b894:	7ff80000 	.word	0x7ff80000

0800b898 <__sccl>:
 800b898:	b570      	push	{r4, r5, r6, lr}
 800b89a:	780b      	ldrb	r3, [r1, #0]
 800b89c:	4604      	mov	r4, r0
 800b89e:	2b5e      	cmp	r3, #94	; 0x5e
 800b8a0:	bf0b      	itete	eq
 800b8a2:	784b      	ldrbeq	r3, [r1, #1]
 800b8a4:	1c48      	addne	r0, r1, #1
 800b8a6:	1c88      	addeq	r0, r1, #2
 800b8a8:	2200      	movne	r2, #0
 800b8aa:	bf08      	it	eq
 800b8ac:	2201      	moveq	r2, #1
 800b8ae:	1e61      	subs	r1, r4, #1
 800b8b0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b8b4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b8b8:	42a9      	cmp	r1, r5
 800b8ba:	d1fb      	bne.n	800b8b4 <__sccl+0x1c>
 800b8bc:	b90b      	cbnz	r3, 800b8c2 <__sccl+0x2a>
 800b8be:	3801      	subs	r0, #1
 800b8c0:	bd70      	pop	{r4, r5, r6, pc}
 800b8c2:	f082 0201 	eor.w	r2, r2, #1
 800b8c6:	54e2      	strb	r2, [r4, r3]
 800b8c8:	4605      	mov	r5, r0
 800b8ca:	4628      	mov	r0, r5
 800b8cc:	f810 1b01 	ldrb.w	r1, [r0], #1
 800b8d0:	292d      	cmp	r1, #45	; 0x2d
 800b8d2:	d006      	beq.n	800b8e2 <__sccl+0x4a>
 800b8d4:	295d      	cmp	r1, #93	; 0x5d
 800b8d6:	d0f3      	beq.n	800b8c0 <__sccl+0x28>
 800b8d8:	b909      	cbnz	r1, 800b8de <__sccl+0x46>
 800b8da:	4628      	mov	r0, r5
 800b8dc:	e7f0      	b.n	800b8c0 <__sccl+0x28>
 800b8de:	460b      	mov	r3, r1
 800b8e0:	e7f1      	b.n	800b8c6 <__sccl+0x2e>
 800b8e2:	786e      	ldrb	r6, [r5, #1]
 800b8e4:	2e5d      	cmp	r6, #93	; 0x5d
 800b8e6:	d0fa      	beq.n	800b8de <__sccl+0x46>
 800b8e8:	42b3      	cmp	r3, r6
 800b8ea:	dcf8      	bgt.n	800b8de <__sccl+0x46>
 800b8ec:	3502      	adds	r5, #2
 800b8ee:	4619      	mov	r1, r3
 800b8f0:	3101      	adds	r1, #1
 800b8f2:	428e      	cmp	r6, r1
 800b8f4:	5462      	strb	r2, [r4, r1]
 800b8f6:	dcfb      	bgt.n	800b8f0 <__sccl+0x58>
 800b8f8:	1af1      	subs	r1, r6, r3
 800b8fa:	3901      	subs	r1, #1
 800b8fc:	1c58      	adds	r0, r3, #1
 800b8fe:	42b3      	cmp	r3, r6
 800b900:	bfa8      	it	ge
 800b902:	2100      	movge	r1, #0
 800b904:	1843      	adds	r3, r0, r1
 800b906:	e7e0      	b.n	800b8ca <__sccl+0x32>

0800b908 <_strtol_l.constprop.0>:
 800b908:	2b01      	cmp	r3, #1
 800b90a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b90e:	d001      	beq.n	800b914 <_strtol_l.constprop.0+0xc>
 800b910:	2b24      	cmp	r3, #36	; 0x24
 800b912:	d906      	bls.n	800b922 <_strtol_l.constprop.0+0x1a>
 800b914:	f7fd f8ac 	bl	8008a70 <__errno>
 800b918:	2316      	movs	r3, #22
 800b91a:	6003      	str	r3, [r0, #0]
 800b91c:	2000      	movs	r0, #0
 800b91e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b922:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ba08 <_strtol_l.constprop.0+0x100>
 800b926:	460d      	mov	r5, r1
 800b928:	462e      	mov	r6, r5
 800b92a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b92e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b932:	f017 0708 	ands.w	r7, r7, #8
 800b936:	d1f7      	bne.n	800b928 <_strtol_l.constprop.0+0x20>
 800b938:	2c2d      	cmp	r4, #45	; 0x2d
 800b93a:	d132      	bne.n	800b9a2 <_strtol_l.constprop.0+0x9a>
 800b93c:	782c      	ldrb	r4, [r5, #0]
 800b93e:	2701      	movs	r7, #1
 800b940:	1cb5      	adds	r5, r6, #2
 800b942:	2b00      	cmp	r3, #0
 800b944:	d05b      	beq.n	800b9fe <_strtol_l.constprop.0+0xf6>
 800b946:	2b10      	cmp	r3, #16
 800b948:	d109      	bne.n	800b95e <_strtol_l.constprop.0+0x56>
 800b94a:	2c30      	cmp	r4, #48	; 0x30
 800b94c:	d107      	bne.n	800b95e <_strtol_l.constprop.0+0x56>
 800b94e:	782c      	ldrb	r4, [r5, #0]
 800b950:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b954:	2c58      	cmp	r4, #88	; 0x58
 800b956:	d14d      	bne.n	800b9f4 <_strtol_l.constprop.0+0xec>
 800b958:	786c      	ldrb	r4, [r5, #1]
 800b95a:	2310      	movs	r3, #16
 800b95c:	3502      	adds	r5, #2
 800b95e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b962:	f108 38ff 	add.w	r8, r8, #4294967295
 800b966:	f04f 0c00 	mov.w	ip, #0
 800b96a:	fbb8 f9f3 	udiv	r9, r8, r3
 800b96e:	4666      	mov	r6, ip
 800b970:	fb03 8a19 	mls	sl, r3, r9, r8
 800b974:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b978:	f1be 0f09 	cmp.w	lr, #9
 800b97c:	d816      	bhi.n	800b9ac <_strtol_l.constprop.0+0xa4>
 800b97e:	4674      	mov	r4, lr
 800b980:	42a3      	cmp	r3, r4
 800b982:	dd24      	ble.n	800b9ce <_strtol_l.constprop.0+0xc6>
 800b984:	f1bc 0f00 	cmp.w	ip, #0
 800b988:	db1e      	blt.n	800b9c8 <_strtol_l.constprop.0+0xc0>
 800b98a:	45b1      	cmp	r9, r6
 800b98c:	d31c      	bcc.n	800b9c8 <_strtol_l.constprop.0+0xc0>
 800b98e:	d101      	bne.n	800b994 <_strtol_l.constprop.0+0x8c>
 800b990:	45a2      	cmp	sl, r4
 800b992:	db19      	blt.n	800b9c8 <_strtol_l.constprop.0+0xc0>
 800b994:	fb06 4603 	mla	r6, r6, r3, r4
 800b998:	f04f 0c01 	mov.w	ip, #1
 800b99c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b9a0:	e7e8      	b.n	800b974 <_strtol_l.constprop.0+0x6c>
 800b9a2:	2c2b      	cmp	r4, #43	; 0x2b
 800b9a4:	bf04      	itt	eq
 800b9a6:	782c      	ldrbeq	r4, [r5, #0]
 800b9a8:	1cb5      	addeq	r5, r6, #2
 800b9aa:	e7ca      	b.n	800b942 <_strtol_l.constprop.0+0x3a>
 800b9ac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b9b0:	f1be 0f19 	cmp.w	lr, #25
 800b9b4:	d801      	bhi.n	800b9ba <_strtol_l.constprop.0+0xb2>
 800b9b6:	3c37      	subs	r4, #55	; 0x37
 800b9b8:	e7e2      	b.n	800b980 <_strtol_l.constprop.0+0x78>
 800b9ba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b9be:	f1be 0f19 	cmp.w	lr, #25
 800b9c2:	d804      	bhi.n	800b9ce <_strtol_l.constprop.0+0xc6>
 800b9c4:	3c57      	subs	r4, #87	; 0x57
 800b9c6:	e7db      	b.n	800b980 <_strtol_l.constprop.0+0x78>
 800b9c8:	f04f 3cff 	mov.w	ip, #4294967295
 800b9cc:	e7e6      	b.n	800b99c <_strtol_l.constprop.0+0x94>
 800b9ce:	f1bc 0f00 	cmp.w	ip, #0
 800b9d2:	da05      	bge.n	800b9e0 <_strtol_l.constprop.0+0xd8>
 800b9d4:	2322      	movs	r3, #34	; 0x22
 800b9d6:	6003      	str	r3, [r0, #0]
 800b9d8:	4646      	mov	r6, r8
 800b9da:	b942      	cbnz	r2, 800b9ee <_strtol_l.constprop.0+0xe6>
 800b9dc:	4630      	mov	r0, r6
 800b9de:	e79e      	b.n	800b91e <_strtol_l.constprop.0+0x16>
 800b9e0:	b107      	cbz	r7, 800b9e4 <_strtol_l.constprop.0+0xdc>
 800b9e2:	4276      	negs	r6, r6
 800b9e4:	2a00      	cmp	r2, #0
 800b9e6:	d0f9      	beq.n	800b9dc <_strtol_l.constprop.0+0xd4>
 800b9e8:	f1bc 0f00 	cmp.w	ip, #0
 800b9ec:	d000      	beq.n	800b9f0 <_strtol_l.constprop.0+0xe8>
 800b9ee:	1e69      	subs	r1, r5, #1
 800b9f0:	6011      	str	r1, [r2, #0]
 800b9f2:	e7f3      	b.n	800b9dc <_strtol_l.constprop.0+0xd4>
 800b9f4:	2430      	movs	r4, #48	; 0x30
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d1b1      	bne.n	800b95e <_strtol_l.constprop.0+0x56>
 800b9fa:	2308      	movs	r3, #8
 800b9fc:	e7af      	b.n	800b95e <_strtol_l.constprop.0+0x56>
 800b9fe:	2c30      	cmp	r4, #48	; 0x30
 800ba00:	d0a5      	beq.n	800b94e <_strtol_l.constprop.0+0x46>
 800ba02:	230a      	movs	r3, #10
 800ba04:	e7ab      	b.n	800b95e <_strtol_l.constprop.0+0x56>
 800ba06:	bf00      	nop
 800ba08:	0800c79d 	.word	0x0800c79d

0800ba0c <_strtol_r>:
 800ba0c:	f7ff bf7c 	b.w	800b908 <_strtol_l.constprop.0>

0800ba10 <_strtoul_l.constprop.0>:
 800ba10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba14:	4f36      	ldr	r7, [pc, #216]	; (800baf0 <_strtoul_l.constprop.0+0xe0>)
 800ba16:	4686      	mov	lr, r0
 800ba18:	460d      	mov	r5, r1
 800ba1a:	4628      	mov	r0, r5
 800ba1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba20:	5de6      	ldrb	r6, [r4, r7]
 800ba22:	f016 0608 	ands.w	r6, r6, #8
 800ba26:	d1f8      	bne.n	800ba1a <_strtoul_l.constprop.0+0xa>
 800ba28:	2c2d      	cmp	r4, #45	; 0x2d
 800ba2a:	d12f      	bne.n	800ba8c <_strtoul_l.constprop.0+0x7c>
 800ba2c:	782c      	ldrb	r4, [r5, #0]
 800ba2e:	2601      	movs	r6, #1
 800ba30:	1c85      	adds	r5, r0, #2
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d057      	beq.n	800bae6 <_strtoul_l.constprop.0+0xd6>
 800ba36:	2b10      	cmp	r3, #16
 800ba38:	d109      	bne.n	800ba4e <_strtoul_l.constprop.0+0x3e>
 800ba3a:	2c30      	cmp	r4, #48	; 0x30
 800ba3c:	d107      	bne.n	800ba4e <_strtoul_l.constprop.0+0x3e>
 800ba3e:	7828      	ldrb	r0, [r5, #0]
 800ba40:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ba44:	2858      	cmp	r0, #88	; 0x58
 800ba46:	d149      	bne.n	800badc <_strtoul_l.constprop.0+0xcc>
 800ba48:	786c      	ldrb	r4, [r5, #1]
 800ba4a:	2310      	movs	r3, #16
 800ba4c:	3502      	adds	r5, #2
 800ba4e:	f04f 38ff 	mov.w	r8, #4294967295
 800ba52:	2700      	movs	r7, #0
 800ba54:	fbb8 f8f3 	udiv	r8, r8, r3
 800ba58:	fb03 f908 	mul.w	r9, r3, r8
 800ba5c:	ea6f 0909 	mvn.w	r9, r9
 800ba60:	4638      	mov	r0, r7
 800ba62:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ba66:	f1bc 0f09 	cmp.w	ip, #9
 800ba6a:	d814      	bhi.n	800ba96 <_strtoul_l.constprop.0+0x86>
 800ba6c:	4664      	mov	r4, ip
 800ba6e:	42a3      	cmp	r3, r4
 800ba70:	dd22      	ble.n	800bab8 <_strtoul_l.constprop.0+0xa8>
 800ba72:	2f00      	cmp	r7, #0
 800ba74:	db1d      	blt.n	800bab2 <_strtoul_l.constprop.0+0xa2>
 800ba76:	4580      	cmp	r8, r0
 800ba78:	d31b      	bcc.n	800bab2 <_strtoul_l.constprop.0+0xa2>
 800ba7a:	d101      	bne.n	800ba80 <_strtoul_l.constprop.0+0x70>
 800ba7c:	45a1      	cmp	r9, r4
 800ba7e:	db18      	blt.n	800bab2 <_strtoul_l.constprop.0+0xa2>
 800ba80:	fb00 4003 	mla	r0, r0, r3, r4
 800ba84:	2701      	movs	r7, #1
 800ba86:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba8a:	e7ea      	b.n	800ba62 <_strtoul_l.constprop.0+0x52>
 800ba8c:	2c2b      	cmp	r4, #43	; 0x2b
 800ba8e:	bf04      	itt	eq
 800ba90:	782c      	ldrbeq	r4, [r5, #0]
 800ba92:	1c85      	addeq	r5, r0, #2
 800ba94:	e7cd      	b.n	800ba32 <_strtoul_l.constprop.0+0x22>
 800ba96:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ba9a:	f1bc 0f19 	cmp.w	ip, #25
 800ba9e:	d801      	bhi.n	800baa4 <_strtoul_l.constprop.0+0x94>
 800baa0:	3c37      	subs	r4, #55	; 0x37
 800baa2:	e7e4      	b.n	800ba6e <_strtoul_l.constprop.0+0x5e>
 800baa4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800baa8:	f1bc 0f19 	cmp.w	ip, #25
 800baac:	d804      	bhi.n	800bab8 <_strtoul_l.constprop.0+0xa8>
 800baae:	3c57      	subs	r4, #87	; 0x57
 800bab0:	e7dd      	b.n	800ba6e <_strtoul_l.constprop.0+0x5e>
 800bab2:	f04f 37ff 	mov.w	r7, #4294967295
 800bab6:	e7e6      	b.n	800ba86 <_strtoul_l.constprop.0+0x76>
 800bab8:	2f00      	cmp	r7, #0
 800baba:	da07      	bge.n	800bacc <_strtoul_l.constprop.0+0xbc>
 800babc:	2322      	movs	r3, #34	; 0x22
 800babe:	f8ce 3000 	str.w	r3, [lr]
 800bac2:	f04f 30ff 	mov.w	r0, #4294967295
 800bac6:	b932      	cbnz	r2, 800bad6 <_strtoul_l.constprop.0+0xc6>
 800bac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bacc:	b106      	cbz	r6, 800bad0 <_strtoul_l.constprop.0+0xc0>
 800bace:	4240      	negs	r0, r0
 800bad0:	2a00      	cmp	r2, #0
 800bad2:	d0f9      	beq.n	800bac8 <_strtoul_l.constprop.0+0xb8>
 800bad4:	b107      	cbz	r7, 800bad8 <_strtoul_l.constprop.0+0xc8>
 800bad6:	1e69      	subs	r1, r5, #1
 800bad8:	6011      	str	r1, [r2, #0]
 800bada:	e7f5      	b.n	800bac8 <_strtoul_l.constprop.0+0xb8>
 800badc:	2430      	movs	r4, #48	; 0x30
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d1b5      	bne.n	800ba4e <_strtoul_l.constprop.0+0x3e>
 800bae2:	2308      	movs	r3, #8
 800bae4:	e7b3      	b.n	800ba4e <_strtoul_l.constprop.0+0x3e>
 800bae6:	2c30      	cmp	r4, #48	; 0x30
 800bae8:	d0a9      	beq.n	800ba3e <_strtoul_l.constprop.0+0x2e>
 800baea:	230a      	movs	r3, #10
 800baec:	e7af      	b.n	800ba4e <_strtoul_l.constprop.0+0x3e>
 800baee:	bf00      	nop
 800baf0:	0800c79d 	.word	0x0800c79d

0800baf4 <_strtoul_r>:
 800baf4:	f7ff bf8c 	b.w	800ba10 <_strtoul_l.constprop.0>

0800baf8 <__submore>:
 800baf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bafc:	460c      	mov	r4, r1
 800bafe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bb00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb04:	4299      	cmp	r1, r3
 800bb06:	d11d      	bne.n	800bb44 <__submore+0x4c>
 800bb08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bb0c:	f7fd f86c 	bl	8008be8 <_malloc_r>
 800bb10:	b918      	cbnz	r0, 800bb1a <__submore+0x22>
 800bb12:	f04f 30ff 	mov.w	r0, #4294967295
 800bb16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb1e:	63a3      	str	r3, [r4, #56]	; 0x38
 800bb20:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800bb24:	6360      	str	r0, [r4, #52]	; 0x34
 800bb26:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800bb2a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800bb2e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800bb32:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bb36:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800bb3a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800bb3e:	6020      	str	r0, [r4, #0]
 800bb40:	2000      	movs	r0, #0
 800bb42:	e7e8      	b.n	800bb16 <__submore+0x1e>
 800bb44:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800bb46:	0077      	lsls	r7, r6, #1
 800bb48:	463a      	mov	r2, r7
 800bb4a:	f7ff f848 	bl	800abde <_realloc_r>
 800bb4e:	4605      	mov	r5, r0
 800bb50:	2800      	cmp	r0, #0
 800bb52:	d0de      	beq.n	800bb12 <__submore+0x1a>
 800bb54:	eb00 0806 	add.w	r8, r0, r6
 800bb58:	4601      	mov	r1, r0
 800bb5a:	4632      	mov	r2, r6
 800bb5c:	4640      	mov	r0, r8
 800bb5e:	f7fc ffc1 	bl	8008ae4 <memcpy>
 800bb62:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800bb66:	f8c4 8000 	str.w	r8, [r4]
 800bb6a:	e7e9      	b.n	800bb40 <__submore+0x48>

0800bb6c <__ascii_wctomb>:
 800bb6c:	b149      	cbz	r1, 800bb82 <__ascii_wctomb+0x16>
 800bb6e:	2aff      	cmp	r2, #255	; 0xff
 800bb70:	bf85      	ittet	hi
 800bb72:	238a      	movhi	r3, #138	; 0x8a
 800bb74:	6003      	strhi	r3, [r0, #0]
 800bb76:	700a      	strbls	r2, [r1, #0]
 800bb78:	f04f 30ff 	movhi.w	r0, #4294967295
 800bb7c:	bf98      	it	ls
 800bb7e:	2001      	movls	r0, #1
 800bb80:	4770      	bx	lr
 800bb82:	4608      	mov	r0, r1
 800bb84:	4770      	bx	lr
	...

0800bb88 <__assert_func>:
 800bb88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb8a:	4614      	mov	r4, r2
 800bb8c:	461a      	mov	r2, r3
 800bb8e:	4b09      	ldr	r3, [pc, #36]	; (800bbb4 <__assert_func+0x2c>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	4605      	mov	r5, r0
 800bb94:	68d8      	ldr	r0, [r3, #12]
 800bb96:	b14c      	cbz	r4, 800bbac <__assert_func+0x24>
 800bb98:	4b07      	ldr	r3, [pc, #28]	; (800bbb8 <__assert_func+0x30>)
 800bb9a:	9100      	str	r1, [sp, #0]
 800bb9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bba0:	4906      	ldr	r1, [pc, #24]	; (800bbbc <__assert_func+0x34>)
 800bba2:	462b      	mov	r3, r5
 800bba4:	f000 f9a6 	bl	800bef4 <fiprintf>
 800bba8:	f000 fc10 	bl	800c3cc <abort>
 800bbac:	4b04      	ldr	r3, [pc, #16]	; (800bbc0 <__assert_func+0x38>)
 800bbae:	461c      	mov	r4, r3
 800bbb0:	e7f3      	b.n	800bb9a <__assert_func+0x12>
 800bbb2:	bf00      	nop
 800bbb4:	200000fc 	.word	0x200000fc
 800bbb8:	0800cb4a 	.word	0x0800cb4a
 800bbbc:	0800cb57 	.word	0x0800cb57
 800bbc0:	0800cb85 	.word	0x0800cb85

0800bbc4 <__sflush_r>:
 800bbc4:	898a      	ldrh	r2, [r1, #12]
 800bbc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbca:	4605      	mov	r5, r0
 800bbcc:	0710      	lsls	r0, r2, #28
 800bbce:	460c      	mov	r4, r1
 800bbd0:	d458      	bmi.n	800bc84 <__sflush_r+0xc0>
 800bbd2:	684b      	ldr	r3, [r1, #4]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	dc05      	bgt.n	800bbe4 <__sflush_r+0x20>
 800bbd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	dc02      	bgt.n	800bbe4 <__sflush_r+0x20>
 800bbde:	2000      	movs	r0, #0
 800bbe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbe4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bbe6:	2e00      	cmp	r6, #0
 800bbe8:	d0f9      	beq.n	800bbde <__sflush_r+0x1a>
 800bbea:	2300      	movs	r3, #0
 800bbec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bbf0:	682f      	ldr	r7, [r5, #0]
 800bbf2:	602b      	str	r3, [r5, #0]
 800bbf4:	d032      	beq.n	800bc5c <__sflush_r+0x98>
 800bbf6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bbf8:	89a3      	ldrh	r3, [r4, #12]
 800bbfa:	075a      	lsls	r2, r3, #29
 800bbfc:	d505      	bpl.n	800bc0a <__sflush_r+0x46>
 800bbfe:	6863      	ldr	r3, [r4, #4]
 800bc00:	1ac0      	subs	r0, r0, r3
 800bc02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc04:	b10b      	cbz	r3, 800bc0a <__sflush_r+0x46>
 800bc06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc08:	1ac0      	subs	r0, r0, r3
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	4602      	mov	r2, r0
 800bc0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc10:	6a21      	ldr	r1, [r4, #32]
 800bc12:	4628      	mov	r0, r5
 800bc14:	47b0      	blx	r6
 800bc16:	1c43      	adds	r3, r0, #1
 800bc18:	89a3      	ldrh	r3, [r4, #12]
 800bc1a:	d106      	bne.n	800bc2a <__sflush_r+0x66>
 800bc1c:	6829      	ldr	r1, [r5, #0]
 800bc1e:	291d      	cmp	r1, #29
 800bc20:	d82c      	bhi.n	800bc7c <__sflush_r+0xb8>
 800bc22:	4a2a      	ldr	r2, [pc, #168]	; (800bccc <__sflush_r+0x108>)
 800bc24:	40ca      	lsrs	r2, r1
 800bc26:	07d6      	lsls	r6, r2, #31
 800bc28:	d528      	bpl.n	800bc7c <__sflush_r+0xb8>
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	6062      	str	r2, [r4, #4]
 800bc2e:	04d9      	lsls	r1, r3, #19
 800bc30:	6922      	ldr	r2, [r4, #16]
 800bc32:	6022      	str	r2, [r4, #0]
 800bc34:	d504      	bpl.n	800bc40 <__sflush_r+0x7c>
 800bc36:	1c42      	adds	r2, r0, #1
 800bc38:	d101      	bne.n	800bc3e <__sflush_r+0x7a>
 800bc3a:	682b      	ldr	r3, [r5, #0]
 800bc3c:	b903      	cbnz	r3, 800bc40 <__sflush_r+0x7c>
 800bc3e:	6560      	str	r0, [r4, #84]	; 0x54
 800bc40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc42:	602f      	str	r7, [r5, #0]
 800bc44:	2900      	cmp	r1, #0
 800bc46:	d0ca      	beq.n	800bbde <__sflush_r+0x1a>
 800bc48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc4c:	4299      	cmp	r1, r3
 800bc4e:	d002      	beq.n	800bc56 <__sflush_r+0x92>
 800bc50:	4628      	mov	r0, r5
 800bc52:	f7fc ff5d 	bl	8008b10 <_free_r>
 800bc56:	2000      	movs	r0, #0
 800bc58:	6360      	str	r0, [r4, #52]	; 0x34
 800bc5a:	e7c1      	b.n	800bbe0 <__sflush_r+0x1c>
 800bc5c:	6a21      	ldr	r1, [r4, #32]
 800bc5e:	2301      	movs	r3, #1
 800bc60:	4628      	mov	r0, r5
 800bc62:	47b0      	blx	r6
 800bc64:	1c41      	adds	r1, r0, #1
 800bc66:	d1c7      	bne.n	800bbf8 <__sflush_r+0x34>
 800bc68:	682b      	ldr	r3, [r5, #0]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d0c4      	beq.n	800bbf8 <__sflush_r+0x34>
 800bc6e:	2b1d      	cmp	r3, #29
 800bc70:	d001      	beq.n	800bc76 <__sflush_r+0xb2>
 800bc72:	2b16      	cmp	r3, #22
 800bc74:	d101      	bne.n	800bc7a <__sflush_r+0xb6>
 800bc76:	602f      	str	r7, [r5, #0]
 800bc78:	e7b1      	b.n	800bbde <__sflush_r+0x1a>
 800bc7a:	89a3      	ldrh	r3, [r4, #12]
 800bc7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc80:	81a3      	strh	r3, [r4, #12]
 800bc82:	e7ad      	b.n	800bbe0 <__sflush_r+0x1c>
 800bc84:	690f      	ldr	r7, [r1, #16]
 800bc86:	2f00      	cmp	r7, #0
 800bc88:	d0a9      	beq.n	800bbde <__sflush_r+0x1a>
 800bc8a:	0793      	lsls	r3, r2, #30
 800bc8c:	680e      	ldr	r6, [r1, #0]
 800bc8e:	bf08      	it	eq
 800bc90:	694b      	ldreq	r3, [r1, #20]
 800bc92:	600f      	str	r7, [r1, #0]
 800bc94:	bf18      	it	ne
 800bc96:	2300      	movne	r3, #0
 800bc98:	eba6 0807 	sub.w	r8, r6, r7
 800bc9c:	608b      	str	r3, [r1, #8]
 800bc9e:	f1b8 0f00 	cmp.w	r8, #0
 800bca2:	dd9c      	ble.n	800bbde <__sflush_r+0x1a>
 800bca4:	6a21      	ldr	r1, [r4, #32]
 800bca6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bca8:	4643      	mov	r3, r8
 800bcaa:	463a      	mov	r2, r7
 800bcac:	4628      	mov	r0, r5
 800bcae:	47b0      	blx	r6
 800bcb0:	2800      	cmp	r0, #0
 800bcb2:	dc06      	bgt.n	800bcc2 <__sflush_r+0xfe>
 800bcb4:	89a3      	ldrh	r3, [r4, #12]
 800bcb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcba:	81a3      	strh	r3, [r4, #12]
 800bcbc:	f04f 30ff 	mov.w	r0, #4294967295
 800bcc0:	e78e      	b.n	800bbe0 <__sflush_r+0x1c>
 800bcc2:	4407      	add	r7, r0
 800bcc4:	eba8 0800 	sub.w	r8, r8, r0
 800bcc8:	e7e9      	b.n	800bc9e <__sflush_r+0xda>
 800bcca:	bf00      	nop
 800bccc:	20400001 	.word	0x20400001

0800bcd0 <_fflush_r>:
 800bcd0:	b538      	push	{r3, r4, r5, lr}
 800bcd2:	690b      	ldr	r3, [r1, #16]
 800bcd4:	4605      	mov	r5, r0
 800bcd6:	460c      	mov	r4, r1
 800bcd8:	b913      	cbnz	r3, 800bce0 <_fflush_r+0x10>
 800bcda:	2500      	movs	r5, #0
 800bcdc:	4628      	mov	r0, r5
 800bcde:	bd38      	pop	{r3, r4, r5, pc}
 800bce0:	b118      	cbz	r0, 800bcea <_fflush_r+0x1a>
 800bce2:	6983      	ldr	r3, [r0, #24]
 800bce4:	b90b      	cbnz	r3, 800bcea <_fflush_r+0x1a>
 800bce6:	f000 f887 	bl	800bdf8 <__sinit>
 800bcea:	4b14      	ldr	r3, [pc, #80]	; (800bd3c <_fflush_r+0x6c>)
 800bcec:	429c      	cmp	r4, r3
 800bcee:	d11b      	bne.n	800bd28 <_fflush_r+0x58>
 800bcf0:	686c      	ldr	r4, [r5, #4]
 800bcf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d0ef      	beq.n	800bcda <_fflush_r+0xa>
 800bcfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bcfc:	07d0      	lsls	r0, r2, #31
 800bcfe:	d404      	bmi.n	800bd0a <_fflush_r+0x3a>
 800bd00:	0599      	lsls	r1, r3, #22
 800bd02:	d402      	bmi.n	800bd0a <_fflush_r+0x3a>
 800bd04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd06:	f7f8 fcf8 	bl	80046fa <__retarget_lock_acquire_recursive>
 800bd0a:	4628      	mov	r0, r5
 800bd0c:	4621      	mov	r1, r4
 800bd0e:	f7ff ff59 	bl	800bbc4 <__sflush_r>
 800bd12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd14:	07da      	lsls	r2, r3, #31
 800bd16:	4605      	mov	r5, r0
 800bd18:	d4e0      	bmi.n	800bcdc <_fflush_r+0xc>
 800bd1a:	89a3      	ldrh	r3, [r4, #12]
 800bd1c:	059b      	lsls	r3, r3, #22
 800bd1e:	d4dd      	bmi.n	800bcdc <_fflush_r+0xc>
 800bd20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd22:	f7f8 fcfe 	bl	8004722 <__retarget_lock_release_recursive>
 800bd26:	e7d9      	b.n	800bcdc <_fflush_r+0xc>
 800bd28:	4b05      	ldr	r3, [pc, #20]	; (800bd40 <_fflush_r+0x70>)
 800bd2a:	429c      	cmp	r4, r3
 800bd2c:	d101      	bne.n	800bd32 <_fflush_r+0x62>
 800bd2e:	68ac      	ldr	r4, [r5, #8]
 800bd30:	e7df      	b.n	800bcf2 <_fflush_r+0x22>
 800bd32:	4b04      	ldr	r3, [pc, #16]	; (800bd44 <_fflush_r+0x74>)
 800bd34:	429c      	cmp	r4, r3
 800bd36:	bf08      	it	eq
 800bd38:	68ec      	ldreq	r4, [r5, #12]
 800bd3a:	e7da      	b.n	800bcf2 <_fflush_r+0x22>
 800bd3c:	0800cba8 	.word	0x0800cba8
 800bd40:	0800cbc8 	.word	0x0800cbc8
 800bd44:	0800cb88 	.word	0x0800cb88

0800bd48 <std>:
 800bd48:	2300      	movs	r3, #0
 800bd4a:	b510      	push	{r4, lr}
 800bd4c:	4604      	mov	r4, r0
 800bd4e:	e9c0 3300 	strd	r3, r3, [r0]
 800bd52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd56:	6083      	str	r3, [r0, #8]
 800bd58:	8181      	strh	r1, [r0, #12]
 800bd5a:	6643      	str	r3, [r0, #100]	; 0x64
 800bd5c:	81c2      	strh	r2, [r0, #14]
 800bd5e:	6183      	str	r3, [r0, #24]
 800bd60:	4619      	mov	r1, r3
 800bd62:	2208      	movs	r2, #8
 800bd64:	305c      	adds	r0, #92	; 0x5c
 800bd66:	f7fc fecb 	bl	8008b00 <memset>
 800bd6a:	4b05      	ldr	r3, [pc, #20]	; (800bd80 <std+0x38>)
 800bd6c:	6263      	str	r3, [r4, #36]	; 0x24
 800bd6e:	4b05      	ldr	r3, [pc, #20]	; (800bd84 <std+0x3c>)
 800bd70:	62a3      	str	r3, [r4, #40]	; 0x28
 800bd72:	4b05      	ldr	r3, [pc, #20]	; (800bd88 <std+0x40>)
 800bd74:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bd76:	4b05      	ldr	r3, [pc, #20]	; (800bd8c <std+0x44>)
 800bd78:	6224      	str	r4, [r4, #32]
 800bd7a:	6323      	str	r3, [r4, #48]	; 0x30
 800bd7c:	bd10      	pop	{r4, pc}
 800bd7e:	bf00      	nop
 800bd80:	08008d99 	.word	0x08008d99
 800bd84:	08008dbf 	.word	0x08008dbf
 800bd88:	08008df7 	.word	0x08008df7
 800bd8c:	08008e1b 	.word	0x08008e1b

0800bd90 <_cleanup_r>:
 800bd90:	4901      	ldr	r1, [pc, #4]	; (800bd98 <_cleanup_r+0x8>)
 800bd92:	f000 b8c1 	b.w	800bf18 <_fwalk_reent>
 800bd96:	bf00      	nop
 800bd98:	0800bcd1 	.word	0x0800bcd1

0800bd9c <__sfmoreglue>:
 800bd9c:	b570      	push	{r4, r5, r6, lr}
 800bd9e:	2268      	movs	r2, #104	; 0x68
 800bda0:	1e4d      	subs	r5, r1, #1
 800bda2:	4355      	muls	r5, r2
 800bda4:	460e      	mov	r6, r1
 800bda6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bdaa:	f7fc ff1d 	bl	8008be8 <_malloc_r>
 800bdae:	4604      	mov	r4, r0
 800bdb0:	b140      	cbz	r0, 800bdc4 <__sfmoreglue+0x28>
 800bdb2:	2100      	movs	r1, #0
 800bdb4:	e9c0 1600 	strd	r1, r6, [r0]
 800bdb8:	300c      	adds	r0, #12
 800bdba:	60a0      	str	r0, [r4, #8]
 800bdbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bdc0:	f7fc fe9e 	bl	8008b00 <memset>
 800bdc4:	4620      	mov	r0, r4
 800bdc6:	bd70      	pop	{r4, r5, r6, pc}

0800bdc8 <__sfp_lock_acquire>:
 800bdc8:	4801      	ldr	r0, [pc, #4]	; (800bdd0 <__sfp_lock_acquire+0x8>)
 800bdca:	f7f8 bc96 	b.w	80046fa <__retarget_lock_acquire_recursive>
 800bdce:	bf00      	nop
 800bdd0:	200005d0 	.word	0x200005d0

0800bdd4 <__sfp_lock_release>:
 800bdd4:	4801      	ldr	r0, [pc, #4]	; (800bddc <__sfp_lock_release+0x8>)
 800bdd6:	f7f8 bca4 	b.w	8004722 <__retarget_lock_release_recursive>
 800bdda:	bf00      	nop
 800bddc:	200005d0 	.word	0x200005d0

0800bde0 <__sinit_lock_acquire>:
 800bde0:	4801      	ldr	r0, [pc, #4]	; (800bde8 <__sinit_lock_acquire+0x8>)
 800bde2:	f7f8 bc8a 	b.w	80046fa <__retarget_lock_acquire_recursive>
 800bde6:	bf00      	nop
 800bde8:	200005cc 	.word	0x200005cc

0800bdec <__sinit_lock_release>:
 800bdec:	4801      	ldr	r0, [pc, #4]	; (800bdf4 <__sinit_lock_release+0x8>)
 800bdee:	f7f8 bc98 	b.w	8004722 <__retarget_lock_release_recursive>
 800bdf2:	bf00      	nop
 800bdf4:	200005cc 	.word	0x200005cc

0800bdf8 <__sinit>:
 800bdf8:	b510      	push	{r4, lr}
 800bdfa:	4604      	mov	r4, r0
 800bdfc:	f7ff fff0 	bl	800bde0 <__sinit_lock_acquire>
 800be00:	69a3      	ldr	r3, [r4, #24]
 800be02:	b11b      	cbz	r3, 800be0c <__sinit+0x14>
 800be04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be08:	f7ff bff0 	b.w	800bdec <__sinit_lock_release>
 800be0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800be10:	6523      	str	r3, [r4, #80]	; 0x50
 800be12:	4b13      	ldr	r3, [pc, #76]	; (800be60 <__sinit+0x68>)
 800be14:	4a13      	ldr	r2, [pc, #76]	; (800be64 <__sinit+0x6c>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	62a2      	str	r2, [r4, #40]	; 0x28
 800be1a:	42a3      	cmp	r3, r4
 800be1c:	bf04      	itt	eq
 800be1e:	2301      	moveq	r3, #1
 800be20:	61a3      	streq	r3, [r4, #24]
 800be22:	4620      	mov	r0, r4
 800be24:	f000 f820 	bl	800be68 <__sfp>
 800be28:	6060      	str	r0, [r4, #4]
 800be2a:	4620      	mov	r0, r4
 800be2c:	f000 f81c 	bl	800be68 <__sfp>
 800be30:	60a0      	str	r0, [r4, #8]
 800be32:	4620      	mov	r0, r4
 800be34:	f000 f818 	bl	800be68 <__sfp>
 800be38:	2200      	movs	r2, #0
 800be3a:	60e0      	str	r0, [r4, #12]
 800be3c:	2104      	movs	r1, #4
 800be3e:	6860      	ldr	r0, [r4, #4]
 800be40:	f7ff ff82 	bl	800bd48 <std>
 800be44:	68a0      	ldr	r0, [r4, #8]
 800be46:	2201      	movs	r2, #1
 800be48:	2109      	movs	r1, #9
 800be4a:	f7ff ff7d 	bl	800bd48 <std>
 800be4e:	68e0      	ldr	r0, [r4, #12]
 800be50:	2202      	movs	r2, #2
 800be52:	2112      	movs	r1, #18
 800be54:	f7ff ff78 	bl	800bd48 <std>
 800be58:	2301      	movs	r3, #1
 800be5a:	61a3      	str	r3, [r4, #24]
 800be5c:	e7d2      	b.n	800be04 <__sinit+0xc>
 800be5e:	bf00      	nop
 800be60:	0800c8a0 	.word	0x0800c8a0
 800be64:	0800bd91 	.word	0x0800bd91

0800be68 <__sfp>:
 800be68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be6a:	4607      	mov	r7, r0
 800be6c:	f7ff ffac 	bl	800bdc8 <__sfp_lock_acquire>
 800be70:	4b1e      	ldr	r3, [pc, #120]	; (800beec <__sfp+0x84>)
 800be72:	681e      	ldr	r6, [r3, #0]
 800be74:	69b3      	ldr	r3, [r6, #24]
 800be76:	b913      	cbnz	r3, 800be7e <__sfp+0x16>
 800be78:	4630      	mov	r0, r6
 800be7a:	f7ff ffbd 	bl	800bdf8 <__sinit>
 800be7e:	3648      	adds	r6, #72	; 0x48
 800be80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800be84:	3b01      	subs	r3, #1
 800be86:	d503      	bpl.n	800be90 <__sfp+0x28>
 800be88:	6833      	ldr	r3, [r6, #0]
 800be8a:	b30b      	cbz	r3, 800bed0 <__sfp+0x68>
 800be8c:	6836      	ldr	r6, [r6, #0]
 800be8e:	e7f7      	b.n	800be80 <__sfp+0x18>
 800be90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800be94:	b9d5      	cbnz	r5, 800becc <__sfp+0x64>
 800be96:	4b16      	ldr	r3, [pc, #88]	; (800bef0 <__sfp+0x88>)
 800be98:	60e3      	str	r3, [r4, #12]
 800be9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800be9e:	6665      	str	r5, [r4, #100]	; 0x64
 800bea0:	f7f8 fc05 	bl	80046ae <__retarget_lock_init_recursive>
 800bea4:	f7ff ff96 	bl	800bdd4 <__sfp_lock_release>
 800bea8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800beac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800beb0:	6025      	str	r5, [r4, #0]
 800beb2:	61a5      	str	r5, [r4, #24]
 800beb4:	2208      	movs	r2, #8
 800beb6:	4629      	mov	r1, r5
 800beb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bebc:	f7fc fe20 	bl	8008b00 <memset>
 800bec0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bec4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bec8:	4620      	mov	r0, r4
 800beca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800becc:	3468      	adds	r4, #104	; 0x68
 800bece:	e7d9      	b.n	800be84 <__sfp+0x1c>
 800bed0:	2104      	movs	r1, #4
 800bed2:	4638      	mov	r0, r7
 800bed4:	f7ff ff62 	bl	800bd9c <__sfmoreglue>
 800bed8:	4604      	mov	r4, r0
 800beda:	6030      	str	r0, [r6, #0]
 800bedc:	2800      	cmp	r0, #0
 800bede:	d1d5      	bne.n	800be8c <__sfp+0x24>
 800bee0:	f7ff ff78 	bl	800bdd4 <__sfp_lock_release>
 800bee4:	230c      	movs	r3, #12
 800bee6:	603b      	str	r3, [r7, #0]
 800bee8:	e7ee      	b.n	800bec8 <__sfp+0x60>
 800beea:	bf00      	nop
 800beec:	0800c8a0 	.word	0x0800c8a0
 800bef0:	ffff0001 	.word	0xffff0001

0800bef4 <fiprintf>:
 800bef4:	b40e      	push	{r1, r2, r3}
 800bef6:	b503      	push	{r0, r1, lr}
 800bef8:	4601      	mov	r1, r0
 800befa:	ab03      	add	r3, sp, #12
 800befc:	4805      	ldr	r0, [pc, #20]	; (800bf14 <fiprintf+0x20>)
 800befe:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf02:	6800      	ldr	r0, [r0, #0]
 800bf04:	9301      	str	r3, [sp, #4]
 800bf06:	f000 f871 	bl	800bfec <_vfiprintf_r>
 800bf0a:	b002      	add	sp, #8
 800bf0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf10:	b003      	add	sp, #12
 800bf12:	4770      	bx	lr
 800bf14:	200000fc 	.word	0x200000fc

0800bf18 <_fwalk_reent>:
 800bf18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf1c:	4606      	mov	r6, r0
 800bf1e:	4688      	mov	r8, r1
 800bf20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bf24:	2700      	movs	r7, #0
 800bf26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf2a:	f1b9 0901 	subs.w	r9, r9, #1
 800bf2e:	d505      	bpl.n	800bf3c <_fwalk_reent+0x24>
 800bf30:	6824      	ldr	r4, [r4, #0]
 800bf32:	2c00      	cmp	r4, #0
 800bf34:	d1f7      	bne.n	800bf26 <_fwalk_reent+0xe>
 800bf36:	4638      	mov	r0, r7
 800bf38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf3c:	89ab      	ldrh	r3, [r5, #12]
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	d907      	bls.n	800bf52 <_fwalk_reent+0x3a>
 800bf42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf46:	3301      	adds	r3, #1
 800bf48:	d003      	beq.n	800bf52 <_fwalk_reent+0x3a>
 800bf4a:	4629      	mov	r1, r5
 800bf4c:	4630      	mov	r0, r6
 800bf4e:	47c0      	blx	r8
 800bf50:	4307      	orrs	r7, r0
 800bf52:	3568      	adds	r5, #104	; 0x68
 800bf54:	e7e9      	b.n	800bf2a <_fwalk_reent+0x12>

0800bf56 <memmove>:
 800bf56:	4288      	cmp	r0, r1
 800bf58:	b510      	push	{r4, lr}
 800bf5a:	eb01 0402 	add.w	r4, r1, r2
 800bf5e:	d902      	bls.n	800bf66 <memmove+0x10>
 800bf60:	4284      	cmp	r4, r0
 800bf62:	4623      	mov	r3, r4
 800bf64:	d807      	bhi.n	800bf76 <memmove+0x20>
 800bf66:	1e43      	subs	r3, r0, #1
 800bf68:	42a1      	cmp	r1, r4
 800bf6a:	d008      	beq.n	800bf7e <memmove+0x28>
 800bf6c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf70:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf74:	e7f8      	b.n	800bf68 <memmove+0x12>
 800bf76:	4402      	add	r2, r0
 800bf78:	4601      	mov	r1, r0
 800bf7a:	428a      	cmp	r2, r1
 800bf7c:	d100      	bne.n	800bf80 <memmove+0x2a>
 800bf7e:	bd10      	pop	{r4, pc}
 800bf80:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf84:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bf88:	e7f7      	b.n	800bf7a <memmove+0x24>

0800bf8a <_malloc_usable_size_r>:
 800bf8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf8e:	1f18      	subs	r0, r3, #4
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	bfbc      	itt	lt
 800bf94:	580b      	ldrlt	r3, [r1, r0]
 800bf96:	18c0      	addlt	r0, r0, r3
 800bf98:	4770      	bx	lr

0800bf9a <__sfputc_r>:
 800bf9a:	6893      	ldr	r3, [r2, #8]
 800bf9c:	3b01      	subs	r3, #1
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	b410      	push	{r4}
 800bfa2:	6093      	str	r3, [r2, #8]
 800bfa4:	da08      	bge.n	800bfb8 <__sfputc_r+0x1e>
 800bfa6:	6994      	ldr	r4, [r2, #24]
 800bfa8:	42a3      	cmp	r3, r4
 800bfaa:	db01      	blt.n	800bfb0 <__sfputc_r+0x16>
 800bfac:	290a      	cmp	r1, #10
 800bfae:	d103      	bne.n	800bfb8 <__sfputc_r+0x1e>
 800bfb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfb4:	f000 b94a 	b.w	800c24c <__swbuf_r>
 800bfb8:	6813      	ldr	r3, [r2, #0]
 800bfba:	1c58      	adds	r0, r3, #1
 800bfbc:	6010      	str	r0, [r2, #0]
 800bfbe:	7019      	strb	r1, [r3, #0]
 800bfc0:	4608      	mov	r0, r1
 800bfc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfc6:	4770      	bx	lr

0800bfc8 <__sfputs_r>:
 800bfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfca:	4606      	mov	r6, r0
 800bfcc:	460f      	mov	r7, r1
 800bfce:	4614      	mov	r4, r2
 800bfd0:	18d5      	adds	r5, r2, r3
 800bfd2:	42ac      	cmp	r4, r5
 800bfd4:	d101      	bne.n	800bfda <__sfputs_r+0x12>
 800bfd6:	2000      	movs	r0, #0
 800bfd8:	e007      	b.n	800bfea <__sfputs_r+0x22>
 800bfda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfde:	463a      	mov	r2, r7
 800bfe0:	4630      	mov	r0, r6
 800bfe2:	f7ff ffda 	bl	800bf9a <__sfputc_r>
 800bfe6:	1c43      	adds	r3, r0, #1
 800bfe8:	d1f3      	bne.n	800bfd2 <__sfputs_r+0xa>
 800bfea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bfec <_vfiprintf_r>:
 800bfec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bff0:	460d      	mov	r5, r1
 800bff2:	b09d      	sub	sp, #116	; 0x74
 800bff4:	4614      	mov	r4, r2
 800bff6:	4698      	mov	r8, r3
 800bff8:	4606      	mov	r6, r0
 800bffa:	b118      	cbz	r0, 800c004 <_vfiprintf_r+0x18>
 800bffc:	6983      	ldr	r3, [r0, #24]
 800bffe:	b90b      	cbnz	r3, 800c004 <_vfiprintf_r+0x18>
 800c000:	f7ff fefa 	bl	800bdf8 <__sinit>
 800c004:	4b89      	ldr	r3, [pc, #548]	; (800c22c <_vfiprintf_r+0x240>)
 800c006:	429d      	cmp	r5, r3
 800c008:	d11b      	bne.n	800c042 <_vfiprintf_r+0x56>
 800c00a:	6875      	ldr	r5, [r6, #4]
 800c00c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c00e:	07d9      	lsls	r1, r3, #31
 800c010:	d405      	bmi.n	800c01e <_vfiprintf_r+0x32>
 800c012:	89ab      	ldrh	r3, [r5, #12]
 800c014:	059a      	lsls	r2, r3, #22
 800c016:	d402      	bmi.n	800c01e <_vfiprintf_r+0x32>
 800c018:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c01a:	f7f8 fb6e 	bl	80046fa <__retarget_lock_acquire_recursive>
 800c01e:	89ab      	ldrh	r3, [r5, #12]
 800c020:	071b      	lsls	r3, r3, #28
 800c022:	d501      	bpl.n	800c028 <_vfiprintf_r+0x3c>
 800c024:	692b      	ldr	r3, [r5, #16]
 800c026:	b9eb      	cbnz	r3, 800c064 <_vfiprintf_r+0x78>
 800c028:	4629      	mov	r1, r5
 800c02a:	4630      	mov	r0, r6
 800c02c:	f000 f960 	bl	800c2f0 <__swsetup_r>
 800c030:	b1c0      	cbz	r0, 800c064 <_vfiprintf_r+0x78>
 800c032:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c034:	07dc      	lsls	r4, r3, #31
 800c036:	d50e      	bpl.n	800c056 <_vfiprintf_r+0x6a>
 800c038:	f04f 30ff 	mov.w	r0, #4294967295
 800c03c:	b01d      	add	sp, #116	; 0x74
 800c03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c042:	4b7b      	ldr	r3, [pc, #492]	; (800c230 <_vfiprintf_r+0x244>)
 800c044:	429d      	cmp	r5, r3
 800c046:	d101      	bne.n	800c04c <_vfiprintf_r+0x60>
 800c048:	68b5      	ldr	r5, [r6, #8]
 800c04a:	e7df      	b.n	800c00c <_vfiprintf_r+0x20>
 800c04c:	4b79      	ldr	r3, [pc, #484]	; (800c234 <_vfiprintf_r+0x248>)
 800c04e:	429d      	cmp	r5, r3
 800c050:	bf08      	it	eq
 800c052:	68f5      	ldreq	r5, [r6, #12]
 800c054:	e7da      	b.n	800c00c <_vfiprintf_r+0x20>
 800c056:	89ab      	ldrh	r3, [r5, #12]
 800c058:	0598      	lsls	r0, r3, #22
 800c05a:	d4ed      	bmi.n	800c038 <_vfiprintf_r+0x4c>
 800c05c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c05e:	f7f8 fb60 	bl	8004722 <__retarget_lock_release_recursive>
 800c062:	e7e9      	b.n	800c038 <_vfiprintf_r+0x4c>
 800c064:	2300      	movs	r3, #0
 800c066:	9309      	str	r3, [sp, #36]	; 0x24
 800c068:	2320      	movs	r3, #32
 800c06a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c06e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c072:	2330      	movs	r3, #48	; 0x30
 800c074:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c238 <_vfiprintf_r+0x24c>
 800c078:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c07c:	f04f 0901 	mov.w	r9, #1
 800c080:	4623      	mov	r3, r4
 800c082:	469a      	mov	sl, r3
 800c084:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c088:	b10a      	cbz	r2, 800c08e <_vfiprintf_r+0xa2>
 800c08a:	2a25      	cmp	r2, #37	; 0x25
 800c08c:	d1f9      	bne.n	800c082 <_vfiprintf_r+0x96>
 800c08e:	ebba 0b04 	subs.w	fp, sl, r4
 800c092:	d00b      	beq.n	800c0ac <_vfiprintf_r+0xc0>
 800c094:	465b      	mov	r3, fp
 800c096:	4622      	mov	r2, r4
 800c098:	4629      	mov	r1, r5
 800c09a:	4630      	mov	r0, r6
 800c09c:	f7ff ff94 	bl	800bfc8 <__sfputs_r>
 800c0a0:	3001      	adds	r0, #1
 800c0a2:	f000 80aa 	beq.w	800c1fa <_vfiprintf_r+0x20e>
 800c0a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0a8:	445a      	add	r2, fp
 800c0aa:	9209      	str	r2, [sp, #36]	; 0x24
 800c0ac:	f89a 3000 	ldrb.w	r3, [sl]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	f000 80a2 	beq.w	800c1fa <_vfiprintf_r+0x20e>
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	f04f 32ff 	mov.w	r2, #4294967295
 800c0bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0c0:	f10a 0a01 	add.w	sl, sl, #1
 800c0c4:	9304      	str	r3, [sp, #16]
 800c0c6:	9307      	str	r3, [sp, #28]
 800c0c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c0cc:	931a      	str	r3, [sp, #104]	; 0x68
 800c0ce:	4654      	mov	r4, sl
 800c0d0:	2205      	movs	r2, #5
 800c0d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0d6:	4858      	ldr	r0, [pc, #352]	; (800c238 <_vfiprintf_r+0x24c>)
 800c0d8:	f7f4 f892 	bl	8000200 <memchr>
 800c0dc:	9a04      	ldr	r2, [sp, #16]
 800c0de:	b9d8      	cbnz	r0, 800c118 <_vfiprintf_r+0x12c>
 800c0e0:	06d1      	lsls	r1, r2, #27
 800c0e2:	bf44      	itt	mi
 800c0e4:	2320      	movmi	r3, #32
 800c0e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0ea:	0713      	lsls	r3, r2, #28
 800c0ec:	bf44      	itt	mi
 800c0ee:	232b      	movmi	r3, #43	; 0x2b
 800c0f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0f4:	f89a 3000 	ldrb.w	r3, [sl]
 800c0f8:	2b2a      	cmp	r3, #42	; 0x2a
 800c0fa:	d015      	beq.n	800c128 <_vfiprintf_r+0x13c>
 800c0fc:	9a07      	ldr	r2, [sp, #28]
 800c0fe:	4654      	mov	r4, sl
 800c100:	2000      	movs	r0, #0
 800c102:	f04f 0c0a 	mov.w	ip, #10
 800c106:	4621      	mov	r1, r4
 800c108:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c10c:	3b30      	subs	r3, #48	; 0x30
 800c10e:	2b09      	cmp	r3, #9
 800c110:	d94e      	bls.n	800c1b0 <_vfiprintf_r+0x1c4>
 800c112:	b1b0      	cbz	r0, 800c142 <_vfiprintf_r+0x156>
 800c114:	9207      	str	r2, [sp, #28]
 800c116:	e014      	b.n	800c142 <_vfiprintf_r+0x156>
 800c118:	eba0 0308 	sub.w	r3, r0, r8
 800c11c:	fa09 f303 	lsl.w	r3, r9, r3
 800c120:	4313      	orrs	r3, r2
 800c122:	9304      	str	r3, [sp, #16]
 800c124:	46a2      	mov	sl, r4
 800c126:	e7d2      	b.n	800c0ce <_vfiprintf_r+0xe2>
 800c128:	9b03      	ldr	r3, [sp, #12]
 800c12a:	1d19      	adds	r1, r3, #4
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	9103      	str	r1, [sp, #12]
 800c130:	2b00      	cmp	r3, #0
 800c132:	bfbb      	ittet	lt
 800c134:	425b      	neglt	r3, r3
 800c136:	f042 0202 	orrlt.w	r2, r2, #2
 800c13a:	9307      	strge	r3, [sp, #28]
 800c13c:	9307      	strlt	r3, [sp, #28]
 800c13e:	bfb8      	it	lt
 800c140:	9204      	strlt	r2, [sp, #16]
 800c142:	7823      	ldrb	r3, [r4, #0]
 800c144:	2b2e      	cmp	r3, #46	; 0x2e
 800c146:	d10c      	bne.n	800c162 <_vfiprintf_r+0x176>
 800c148:	7863      	ldrb	r3, [r4, #1]
 800c14a:	2b2a      	cmp	r3, #42	; 0x2a
 800c14c:	d135      	bne.n	800c1ba <_vfiprintf_r+0x1ce>
 800c14e:	9b03      	ldr	r3, [sp, #12]
 800c150:	1d1a      	adds	r2, r3, #4
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	9203      	str	r2, [sp, #12]
 800c156:	2b00      	cmp	r3, #0
 800c158:	bfb8      	it	lt
 800c15a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c15e:	3402      	adds	r4, #2
 800c160:	9305      	str	r3, [sp, #20]
 800c162:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c248 <_vfiprintf_r+0x25c>
 800c166:	7821      	ldrb	r1, [r4, #0]
 800c168:	2203      	movs	r2, #3
 800c16a:	4650      	mov	r0, sl
 800c16c:	f7f4 f848 	bl	8000200 <memchr>
 800c170:	b140      	cbz	r0, 800c184 <_vfiprintf_r+0x198>
 800c172:	2340      	movs	r3, #64	; 0x40
 800c174:	eba0 000a 	sub.w	r0, r0, sl
 800c178:	fa03 f000 	lsl.w	r0, r3, r0
 800c17c:	9b04      	ldr	r3, [sp, #16]
 800c17e:	4303      	orrs	r3, r0
 800c180:	3401      	adds	r4, #1
 800c182:	9304      	str	r3, [sp, #16]
 800c184:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c188:	482c      	ldr	r0, [pc, #176]	; (800c23c <_vfiprintf_r+0x250>)
 800c18a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c18e:	2206      	movs	r2, #6
 800c190:	f7f4 f836 	bl	8000200 <memchr>
 800c194:	2800      	cmp	r0, #0
 800c196:	d03f      	beq.n	800c218 <_vfiprintf_r+0x22c>
 800c198:	4b29      	ldr	r3, [pc, #164]	; (800c240 <_vfiprintf_r+0x254>)
 800c19a:	bb1b      	cbnz	r3, 800c1e4 <_vfiprintf_r+0x1f8>
 800c19c:	9b03      	ldr	r3, [sp, #12]
 800c19e:	3307      	adds	r3, #7
 800c1a0:	f023 0307 	bic.w	r3, r3, #7
 800c1a4:	3308      	adds	r3, #8
 800c1a6:	9303      	str	r3, [sp, #12]
 800c1a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1aa:	443b      	add	r3, r7
 800c1ac:	9309      	str	r3, [sp, #36]	; 0x24
 800c1ae:	e767      	b.n	800c080 <_vfiprintf_r+0x94>
 800c1b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1b4:	460c      	mov	r4, r1
 800c1b6:	2001      	movs	r0, #1
 800c1b8:	e7a5      	b.n	800c106 <_vfiprintf_r+0x11a>
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	3401      	adds	r4, #1
 800c1be:	9305      	str	r3, [sp, #20]
 800c1c0:	4619      	mov	r1, r3
 800c1c2:	f04f 0c0a 	mov.w	ip, #10
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1cc:	3a30      	subs	r2, #48	; 0x30
 800c1ce:	2a09      	cmp	r2, #9
 800c1d0:	d903      	bls.n	800c1da <_vfiprintf_r+0x1ee>
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d0c5      	beq.n	800c162 <_vfiprintf_r+0x176>
 800c1d6:	9105      	str	r1, [sp, #20]
 800c1d8:	e7c3      	b.n	800c162 <_vfiprintf_r+0x176>
 800c1da:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1de:	4604      	mov	r4, r0
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	e7f0      	b.n	800c1c6 <_vfiprintf_r+0x1da>
 800c1e4:	ab03      	add	r3, sp, #12
 800c1e6:	9300      	str	r3, [sp, #0]
 800c1e8:	462a      	mov	r2, r5
 800c1ea:	4b16      	ldr	r3, [pc, #88]	; (800c244 <_vfiprintf_r+0x258>)
 800c1ec:	a904      	add	r1, sp, #16
 800c1ee:	4630      	mov	r0, r6
 800c1f0:	f3af 8000 	nop.w
 800c1f4:	4607      	mov	r7, r0
 800c1f6:	1c78      	adds	r0, r7, #1
 800c1f8:	d1d6      	bne.n	800c1a8 <_vfiprintf_r+0x1bc>
 800c1fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1fc:	07d9      	lsls	r1, r3, #31
 800c1fe:	d405      	bmi.n	800c20c <_vfiprintf_r+0x220>
 800c200:	89ab      	ldrh	r3, [r5, #12]
 800c202:	059a      	lsls	r2, r3, #22
 800c204:	d402      	bmi.n	800c20c <_vfiprintf_r+0x220>
 800c206:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c208:	f7f8 fa8b 	bl	8004722 <__retarget_lock_release_recursive>
 800c20c:	89ab      	ldrh	r3, [r5, #12]
 800c20e:	065b      	lsls	r3, r3, #25
 800c210:	f53f af12 	bmi.w	800c038 <_vfiprintf_r+0x4c>
 800c214:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c216:	e711      	b.n	800c03c <_vfiprintf_r+0x50>
 800c218:	ab03      	add	r3, sp, #12
 800c21a:	9300      	str	r3, [sp, #0]
 800c21c:	462a      	mov	r2, r5
 800c21e:	4b09      	ldr	r3, [pc, #36]	; (800c244 <_vfiprintf_r+0x258>)
 800c220:	a904      	add	r1, sp, #16
 800c222:	4630      	mov	r0, r6
 800c224:	f7ff f8a6 	bl	800b374 <_printf_i>
 800c228:	e7e4      	b.n	800c1f4 <_vfiprintf_r+0x208>
 800c22a:	bf00      	nop
 800c22c:	0800cba8 	.word	0x0800cba8
 800c230:	0800cbc8 	.word	0x0800cbc8
 800c234:	0800cb88 	.word	0x0800cb88
 800c238:	0800cafc 	.word	0x0800cafc
 800c23c:	0800cb06 	.word	0x0800cb06
 800c240:	00000000 	.word	0x00000000
 800c244:	0800bfc9 	.word	0x0800bfc9
 800c248:	0800cb02 	.word	0x0800cb02

0800c24c <__swbuf_r>:
 800c24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c24e:	460e      	mov	r6, r1
 800c250:	4614      	mov	r4, r2
 800c252:	4605      	mov	r5, r0
 800c254:	b118      	cbz	r0, 800c25e <__swbuf_r+0x12>
 800c256:	6983      	ldr	r3, [r0, #24]
 800c258:	b90b      	cbnz	r3, 800c25e <__swbuf_r+0x12>
 800c25a:	f7ff fdcd 	bl	800bdf8 <__sinit>
 800c25e:	4b21      	ldr	r3, [pc, #132]	; (800c2e4 <__swbuf_r+0x98>)
 800c260:	429c      	cmp	r4, r3
 800c262:	d12b      	bne.n	800c2bc <__swbuf_r+0x70>
 800c264:	686c      	ldr	r4, [r5, #4]
 800c266:	69a3      	ldr	r3, [r4, #24]
 800c268:	60a3      	str	r3, [r4, #8]
 800c26a:	89a3      	ldrh	r3, [r4, #12]
 800c26c:	071a      	lsls	r2, r3, #28
 800c26e:	d52f      	bpl.n	800c2d0 <__swbuf_r+0x84>
 800c270:	6923      	ldr	r3, [r4, #16]
 800c272:	b36b      	cbz	r3, 800c2d0 <__swbuf_r+0x84>
 800c274:	6923      	ldr	r3, [r4, #16]
 800c276:	6820      	ldr	r0, [r4, #0]
 800c278:	1ac0      	subs	r0, r0, r3
 800c27a:	6963      	ldr	r3, [r4, #20]
 800c27c:	b2f6      	uxtb	r6, r6
 800c27e:	4283      	cmp	r3, r0
 800c280:	4637      	mov	r7, r6
 800c282:	dc04      	bgt.n	800c28e <__swbuf_r+0x42>
 800c284:	4621      	mov	r1, r4
 800c286:	4628      	mov	r0, r5
 800c288:	f7ff fd22 	bl	800bcd0 <_fflush_r>
 800c28c:	bb30      	cbnz	r0, 800c2dc <__swbuf_r+0x90>
 800c28e:	68a3      	ldr	r3, [r4, #8]
 800c290:	3b01      	subs	r3, #1
 800c292:	60a3      	str	r3, [r4, #8]
 800c294:	6823      	ldr	r3, [r4, #0]
 800c296:	1c5a      	adds	r2, r3, #1
 800c298:	6022      	str	r2, [r4, #0]
 800c29a:	701e      	strb	r6, [r3, #0]
 800c29c:	6963      	ldr	r3, [r4, #20]
 800c29e:	3001      	adds	r0, #1
 800c2a0:	4283      	cmp	r3, r0
 800c2a2:	d004      	beq.n	800c2ae <__swbuf_r+0x62>
 800c2a4:	89a3      	ldrh	r3, [r4, #12]
 800c2a6:	07db      	lsls	r3, r3, #31
 800c2a8:	d506      	bpl.n	800c2b8 <__swbuf_r+0x6c>
 800c2aa:	2e0a      	cmp	r6, #10
 800c2ac:	d104      	bne.n	800c2b8 <__swbuf_r+0x6c>
 800c2ae:	4621      	mov	r1, r4
 800c2b0:	4628      	mov	r0, r5
 800c2b2:	f7ff fd0d 	bl	800bcd0 <_fflush_r>
 800c2b6:	b988      	cbnz	r0, 800c2dc <__swbuf_r+0x90>
 800c2b8:	4638      	mov	r0, r7
 800c2ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2bc:	4b0a      	ldr	r3, [pc, #40]	; (800c2e8 <__swbuf_r+0x9c>)
 800c2be:	429c      	cmp	r4, r3
 800c2c0:	d101      	bne.n	800c2c6 <__swbuf_r+0x7a>
 800c2c2:	68ac      	ldr	r4, [r5, #8]
 800c2c4:	e7cf      	b.n	800c266 <__swbuf_r+0x1a>
 800c2c6:	4b09      	ldr	r3, [pc, #36]	; (800c2ec <__swbuf_r+0xa0>)
 800c2c8:	429c      	cmp	r4, r3
 800c2ca:	bf08      	it	eq
 800c2cc:	68ec      	ldreq	r4, [r5, #12]
 800c2ce:	e7ca      	b.n	800c266 <__swbuf_r+0x1a>
 800c2d0:	4621      	mov	r1, r4
 800c2d2:	4628      	mov	r0, r5
 800c2d4:	f000 f80c 	bl	800c2f0 <__swsetup_r>
 800c2d8:	2800      	cmp	r0, #0
 800c2da:	d0cb      	beq.n	800c274 <__swbuf_r+0x28>
 800c2dc:	f04f 37ff 	mov.w	r7, #4294967295
 800c2e0:	e7ea      	b.n	800c2b8 <__swbuf_r+0x6c>
 800c2e2:	bf00      	nop
 800c2e4:	0800cba8 	.word	0x0800cba8
 800c2e8:	0800cbc8 	.word	0x0800cbc8
 800c2ec:	0800cb88 	.word	0x0800cb88

0800c2f0 <__swsetup_r>:
 800c2f0:	4b32      	ldr	r3, [pc, #200]	; (800c3bc <__swsetup_r+0xcc>)
 800c2f2:	b570      	push	{r4, r5, r6, lr}
 800c2f4:	681d      	ldr	r5, [r3, #0]
 800c2f6:	4606      	mov	r6, r0
 800c2f8:	460c      	mov	r4, r1
 800c2fa:	b125      	cbz	r5, 800c306 <__swsetup_r+0x16>
 800c2fc:	69ab      	ldr	r3, [r5, #24]
 800c2fe:	b913      	cbnz	r3, 800c306 <__swsetup_r+0x16>
 800c300:	4628      	mov	r0, r5
 800c302:	f7ff fd79 	bl	800bdf8 <__sinit>
 800c306:	4b2e      	ldr	r3, [pc, #184]	; (800c3c0 <__swsetup_r+0xd0>)
 800c308:	429c      	cmp	r4, r3
 800c30a:	d10f      	bne.n	800c32c <__swsetup_r+0x3c>
 800c30c:	686c      	ldr	r4, [r5, #4]
 800c30e:	89a3      	ldrh	r3, [r4, #12]
 800c310:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c314:	0719      	lsls	r1, r3, #28
 800c316:	d42c      	bmi.n	800c372 <__swsetup_r+0x82>
 800c318:	06dd      	lsls	r5, r3, #27
 800c31a:	d411      	bmi.n	800c340 <__swsetup_r+0x50>
 800c31c:	2309      	movs	r3, #9
 800c31e:	6033      	str	r3, [r6, #0]
 800c320:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c324:	81a3      	strh	r3, [r4, #12]
 800c326:	f04f 30ff 	mov.w	r0, #4294967295
 800c32a:	e03e      	b.n	800c3aa <__swsetup_r+0xba>
 800c32c:	4b25      	ldr	r3, [pc, #148]	; (800c3c4 <__swsetup_r+0xd4>)
 800c32e:	429c      	cmp	r4, r3
 800c330:	d101      	bne.n	800c336 <__swsetup_r+0x46>
 800c332:	68ac      	ldr	r4, [r5, #8]
 800c334:	e7eb      	b.n	800c30e <__swsetup_r+0x1e>
 800c336:	4b24      	ldr	r3, [pc, #144]	; (800c3c8 <__swsetup_r+0xd8>)
 800c338:	429c      	cmp	r4, r3
 800c33a:	bf08      	it	eq
 800c33c:	68ec      	ldreq	r4, [r5, #12]
 800c33e:	e7e6      	b.n	800c30e <__swsetup_r+0x1e>
 800c340:	0758      	lsls	r0, r3, #29
 800c342:	d512      	bpl.n	800c36a <__swsetup_r+0x7a>
 800c344:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c346:	b141      	cbz	r1, 800c35a <__swsetup_r+0x6a>
 800c348:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c34c:	4299      	cmp	r1, r3
 800c34e:	d002      	beq.n	800c356 <__swsetup_r+0x66>
 800c350:	4630      	mov	r0, r6
 800c352:	f7fc fbdd 	bl	8008b10 <_free_r>
 800c356:	2300      	movs	r3, #0
 800c358:	6363      	str	r3, [r4, #52]	; 0x34
 800c35a:	89a3      	ldrh	r3, [r4, #12]
 800c35c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c360:	81a3      	strh	r3, [r4, #12]
 800c362:	2300      	movs	r3, #0
 800c364:	6063      	str	r3, [r4, #4]
 800c366:	6923      	ldr	r3, [r4, #16]
 800c368:	6023      	str	r3, [r4, #0]
 800c36a:	89a3      	ldrh	r3, [r4, #12]
 800c36c:	f043 0308 	orr.w	r3, r3, #8
 800c370:	81a3      	strh	r3, [r4, #12]
 800c372:	6923      	ldr	r3, [r4, #16]
 800c374:	b94b      	cbnz	r3, 800c38a <__swsetup_r+0x9a>
 800c376:	89a3      	ldrh	r3, [r4, #12]
 800c378:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c37c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c380:	d003      	beq.n	800c38a <__swsetup_r+0x9a>
 800c382:	4621      	mov	r1, r4
 800c384:	4630      	mov	r0, r6
 800c386:	f000 f84d 	bl	800c424 <__smakebuf_r>
 800c38a:	89a0      	ldrh	r0, [r4, #12]
 800c38c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c390:	f010 0301 	ands.w	r3, r0, #1
 800c394:	d00a      	beq.n	800c3ac <__swsetup_r+0xbc>
 800c396:	2300      	movs	r3, #0
 800c398:	60a3      	str	r3, [r4, #8]
 800c39a:	6963      	ldr	r3, [r4, #20]
 800c39c:	425b      	negs	r3, r3
 800c39e:	61a3      	str	r3, [r4, #24]
 800c3a0:	6923      	ldr	r3, [r4, #16]
 800c3a2:	b943      	cbnz	r3, 800c3b6 <__swsetup_r+0xc6>
 800c3a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c3a8:	d1ba      	bne.n	800c320 <__swsetup_r+0x30>
 800c3aa:	bd70      	pop	{r4, r5, r6, pc}
 800c3ac:	0781      	lsls	r1, r0, #30
 800c3ae:	bf58      	it	pl
 800c3b0:	6963      	ldrpl	r3, [r4, #20]
 800c3b2:	60a3      	str	r3, [r4, #8]
 800c3b4:	e7f4      	b.n	800c3a0 <__swsetup_r+0xb0>
 800c3b6:	2000      	movs	r0, #0
 800c3b8:	e7f7      	b.n	800c3aa <__swsetup_r+0xba>
 800c3ba:	bf00      	nop
 800c3bc:	200000fc 	.word	0x200000fc
 800c3c0:	0800cba8 	.word	0x0800cba8
 800c3c4:	0800cbc8 	.word	0x0800cbc8
 800c3c8:	0800cb88 	.word	0x0800cb88

0800c3cc <abort>:
 800c3cc:	b508      	push	{r3, lr}
 800c3ce:	2006      	movs	r0, #6
 800c3d0:	f000 f890 	bl	800c4f4 <raise>
 800c3d4:	2001      	movs	r0, #1
 800c3d6:	f7f7 feff 	bl	80041d8 <_exit>

0800c3da <__swhatbuf_r>:
 800c3da:	b570      	push	{r4, r5, r6, lr}
 800c3dc:	460e      	mov	r6, r1
 800c3de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3e2:	2900      	cmp	r1, #0
 800c3e4:	b096      	sub	sp, #88	; 0x58
 800c3e6:	4614      	mov	r4, r2
 800c3e8:	461d      	mov	r5, r3
 800c3ea:	da08      	bge.n	800c3fe <__swhatbuf_r+0x24>
 800c3ec:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	602a      	str	r2, [r5, #0]
 800c3f4:	061a      	lsls	r2, r3, #24
 800c3f6:	d410      	bmi.n	800c41a <__swhatbuf_r+0x40>
 800c3f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3fc:	e00e      	b.n	800c41c <__swhatbuf_r+0x42>
 800c3fe:	466a      	mov	r2, sp
 800c400:	f000 f894 	bl	800c52c <_fstat_r>
 800c404:	2800      	cmp	r0, #0
 800c406:	dbf1      	blt.n	800c3ec <__swhatbuf_r+0x12>
 800c408:	9a01      	ldr	r2, [sp, #4]
 800c40a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c40e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c412:	425a      	negs	r2, r3
 800c414:	415a      	adcs	r2, r3
 800c416:	602a      	str	r2, [r5, #0]
 800c418:	e7ee      	b.n	800c3f8 <__swhatbuf_r+0x1e>
 800c41a:	2340      	movs	r3, #64	; 0x40
 800c41c:	2000      	movs	r0, #0
 800c41e:	6023      	str	r3, [r4, #0]
 800c420:	b016      	add	sp, #88	; 0x58
 800c422:	bd70      	pop	{r4, r5, r6, pc}

0800c424 <__smakebuf_r>:
 800c424:	898b      	ldrh	r3, [r1, #12]
 800c426:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c428:	079d      	lsls	r5, r3, #30
 800c42a:	4606      	mov	r6, r0
 800c42c:	460c      	mov	r4, r1
 800c42e:	d507      	bpl.n	800c440 <__smakebuf_r+0x1c>
 800c430:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c434:	6023      	str	r3, [r4, #0]
 800c436:	6123      	str	r3, [r4, #16]
 800c438:	2301      	movs	r3, #1
 800c43a:	6163      	str	r3, [r4, #20]
 800c43c:	b002      	add	sp, #8
 800c43e:	bd70      	pop	{r4, r5, r6, pc}
 800c440:	ab01      	add	r3, sp, #4
 800c442:	466a      	mov	r2, sp
 800c444:	f7ff ffc9 	bl	800c3da <__swhatbuf_r>
 800c448:	9900      	ldr	r1, [sp, #0]
 800c44a:	4605      	mov	r5, r0
 800c44c:	4630      	mov	r0, r6
 800c44e:	f7fc fbcb 	bl	8008be8 <_malloc_r>
 800c452:	b948      	cbnz	r0, 800c468 <__smakebuf_r+0x44>
 800c454:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c458:	059a      	lsls	r2, r3, #22
 800c45a:	d4ef      	bmi.n	800c43c <__smakebuf_r+0x18>
 800c45c:	f023 0303 	bic.w	r3, r3, #3
 800c460:	f043 0302 	orr.w	r3, r3, #2
 800c464:	81a3      	strh	r3, [r4, #12]
 800c466:	e7e3      	b.n	800c430 <__smakebuf_r+0xc>
 800c468:	4b0d      	ldr	r3, [pc, #52]	; (800c4a0 <__smakebuf_r+0x7c>)
 800c46a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c46c:	89a3      	ldrh	r3, [r4, #12]
 800c46e:	6020      	str	r0, [r4, #0]
 800c470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c474:	81a3      	strh	r3, [r4, #12]
 800c476:	9b00      	ldr	r3, [sp, #0]
 800c478:	6163      	str	r3, [r4, #20]
 800c47a:	9b01      	ldr	r3, [sp, #4]
 800c47c:	6120      	str	r0, [r4, #16]
 800c47e:	b15b      	cbz	r3, 800c498 <__smakebuf_r+0x74>
 800c480:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c484:	4630      	mov	r0, r6
 800c486:	f000 f863 	bl	800c550 <_isatty_r>
 800c48a:	b128      	cbz	r0, 800c498 <__smakebuf_r+0x74>
 800c48c:	89a3      	ldrh	r3, [r4, #12]
 800c48e:	f023 0303 	bic.w	r3, r3, #3
 800c492:	f043 0301 	orr.w	r3, r3, #1
 800c496:	81a3      	strh	r3, [r4, #12]
 800c498:	89a0      	ldrh	r0, [r4, #12]
 800c49a:	4305      	orrs	r5, r0
 800c49c:	81a5      	strh	r5, [r4, #12]
 800c49e:	e7cd      	b.n	800c43c <__smakebuf_r+0x18>
 800c4a0:	0800bd91 	.word	0x0800bd91

0800c4a4 <_raise_r>:
 800c4a4:	291f      	cmp	r1, #31
 800c4a6:	b538      	push	{r3, r4, r5, lr}
 800c4a8:	4604      	mov	r4, r0
 800c4aa:	460d      	mov	r5, r1
 800c4ac:	d904      	bls.n	800c4b8 <_raise_r+0x14>
 800c4ae:	2316      	movs	r3, #22
 800c4b0:	6003      	str	r3, [r0, #0]
 800c4b2:	f04f 30ff 	mov.w	r0, #4294967295
 800c4b6:	bd38      	pop	{r3, r4, r5, pc}
 800c4b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c4ba:	b112      	cbz	r2, 800c4c2 <_raise_r+0x1e>
 800c4bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c4c0:	b94b      	cbnz	r3, 800c4d6 <_raise_r+0x32>
 800c4c2:	4620      	mov	r0, r4
 800c4c4:	f000 f830 	bl	800c528 <_getpid_r>
 800c4c8:	462a      	mov	r2, r5
 800c4ca:	4601      	mov	r1, r0
 800c4cc:	4620      	mov	r0, r4
 800c4ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4d2:	f000 b817 	b.w	800c504 <_kill_r>
 800c4d6:	2b01      	cmp	r3, #1
 800c4d8:	d00a      	beq.n	800c4f0 <_raise_r+0x4c>
 800c4da:	1c59      	adds	r1, r3, #1
 800c4dc:	d103      	bne.n	800c4e6 <_raise_r+0x42>
 800c4de:	2316      	movs	r3, #22
 800c4e0:	6003      	str	r3, [r0, #0]
 800c4e2:	2001      	movs	r0, #1
 800c4e4:	e7e7      	b.n	800c4b6 <_raise_r+0x12>
 800c4e6:	2400      	movs	r4, #0
 800c4e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c4ec:	4628      	mov	r0, r5
 800c4ee:	4798      	blx	r3
 800c4f0:	2000      	movs	r0, #0
 800c4f2:	e7e0      	b.n	800c4b6 <_raise_r+0x12>

0800c4f4 <raise>:
 800c4f4:	4b02      	ldr	r3, [pc, #8]	; (800c500 <raise+0xc>)
 800c4f6:	4601      	mov	r1, r0
 800c4f8:	6818      	ldr	r0, [r3, #0]
 800c4fa:	f7ff bfd3 	b.w	800c4a4 <_raise_r>
 800c4fe:	bf00      	nop
 800c500:	200000fc 	.word	0x200000fc

0800c504 <_kill_r>:
 800c504:	b538      	push	{r3, r4, r5, lr}
 800c506:	4d07      	ldr	r5, [pc, #28]	; (800c524 <_kill_r+0x20>)
 800c508:	2300      	movs	r3, #0
 800c50a:	4604      	mov	r4, r0
 800c50c:	4608      	mov	r0, r1
 800c50e:	4611      	mov	r1, r2
 800c510:	602b      	str	r3, [r5, #0]
 800c512:	f7f7 fe51 	bl	80041b8 <_kill>
 800c516:	1c43      	adds	r3, r0, #1
 800c518:	d102      	bne.n	800c520 <_kill_r+0x1c>
 800c51a:	682b      	ldr	r3, [r5, #0]
 800c51c:	b103      	cbz	r3, 800c520 <_kill_r+0x1c>
 800c51e:	6023      	str	r3, [r4, #0]
 800c520:	bd38      	pop	{r3, r4, r5, pc}
 800c522:	bf00      	nop
 800c524:	200005e4 	.word	0x200005e4

0800c528 <_getpid_r>:
 800c528:	f7f7 be3e 	b.w	80041a8 <_getpid>

0800c52c <_fstat_r>:
 800c52c:	b538      	push	{r3, r4, r5, lr}
 800c52e:	4d07      	ldr	r5, [pc, #28]	; (800c54c <_fstat_r+0x20>)
 800c530:	2300      	movs	r3, #0
 800c532:	4604      	mov	r4, r0
 800c534:	4608      	mov	r0, r1
 800c536:	4611      	mov	r1, r2
 800c538:	602b      	str	r3, [r5, #0]
 800c53a:	f7f7 fe9c 	bl	8004276 <_fstat>
 800c53e:	1c43      	adds	r3, r0, #1
 800c540:	d102      	bne.n	800c548 <_fstat_r+0x1c>
 800c542:	682b      	ldr	r3, [r5, #0]
 800c544:	b103      	cbz	r3, 800c548 <_fstat_r+0x1c>
 800c546:	6023      	str	r3, [r4, #0]
 800c548:	bd38      	pop	{r3, r4, r5, pc}
 800c54a:	bf00      	nop
 800c54c:	200005e4 	.word	0x200005e4

0800c550 <_isatty_r>:
 800c550:	b538      	push	{r3, r4, r5, lr}
 800c552:	4d06      	ldr	r5, [pc, #24]	; (800c56c <_isatty_r+0x1c>)
 800c554:	2300      	movs	r3, #0
 800c556:	4604      	mov	r4, r0
 800c558:	4608      	mov	r0, r1
 800c55a:	602b      	str	r3, [r5, #0]
 800c55c:	f7f7 fe9b 	bl	8004296 <_isatty>
 800c560:	1c43      	adds	r3, r0, #1
 800c562:	d102      	bne.n	800c56a <_isatty_r+0x1a>
 800c564:	682b      	ldr	r3, [r5, #0]
 800c566:	b103      	cbz	r3, 800c56a <_isatty_r+0x1a>
 800c568:	6023      	str	r3, [r4, #0]
 800c56a:	bd38      	pop	{r3, r4, r5, pc}
 800c56c:	200005e4 	.word	0x200005e4

0800c570 <roundf>:
 800c570:	ee10 0a10 	vmov	r0, s0
 800c574:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800c578:	3a7f      	subs	r2, #127	; 0x7f
 800c57a:	2a16      	cmp	r2, #22
 800c57c:	dc15      	bgt.n	800c5aa <roundf+0x3a>
 800c57e:	2a00      	cmp	r2, #0
 800c580:	da08      	bge.n	800c594 <roundf+0x24>
 800c582:	3201      	adds	r2, #1
 800c584:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800c588:	d101      	bne.n	800c58e <roundf+0x1e>
 800c58a:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800c58e:	ee00 3a10 	vmov	s0, r3
 800c592:	4770      	bx	lr
 800c594:	4907      	ldr	r1, [pc, #28]	; (800c5b4 <roundf+0x44>)
 800c596:	4111      	asrs	r1, r2
 800c598:	4208      	tst	r0, r1
 800c59a:	d0fa      	beq.n	800c592 <roundf+0x22>
 800c59c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c5a0:	4113      	asrs	r3, r2
 800c5a2:	4403      	add	r3, r0
 800c5a4:	ea23 0301 	bic.w	r3, r3, r1
 800c5a8:	e7f1      	b.n	800c58e <roundf+0x1e>
 800c5aa:	2a80      	cmp	r2, #128	; 0x80
 800c5ac:	d1f1      	bne.n	800c592 <roundf+0x22>
 800c5ae:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c5b2:	4770      	bx	lr
 800c5b4:	007fffff 	.word	0x007fffff

0800c5b8 <_init>:
 800c5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ba:	bf00      	nop
 800c5bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5be:	bc08      	pop	{r3}
 800c5c0:	469e      	mov	lr, r3
 800c5c2:	4770      	bx	lr

0800c5c4 <_fini>:
 800c5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5c6:	bf00      	nop
 800c5c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5ca:	bc08      	pop	{r3}
 800c5cc:	469e      	mov	lr, r3
 800c5ce:	4770      	bx	lr
